   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"demod.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "../source/demod.c"
  20              		.section	.rodata.coefs,"a"
  21              		.align	2
  24              	coefs:
  25 0000 F4C508BB 		.word	-1157052940
  26 0004 45B5C4BB 		.word	-1144736443
  27 0008 24720DBC 		.word	-1139969500
  28 000c E0A6EABA 		.word	-1159026976
  29 0010 7398C93C 		.word	1019844723
  30 0014 E9009B3D 		.word	1033568489
  31 0018 F34C143E 		.word	1041517811
  32 001c 6AE0593E 		.word	1046077546
  33 0020 10A9823E 		.word	1048750352
  34 0024 10A9823E 		.word	1048750352
  35 0028 6AE0593E 		.word	1046077546
  36 002c F34C143E 		.word	1041517811
  37 0030 E9009B3D 		.word	1033568489
  38 0034 7398C93C 		.word	1019844723
  39 0038 E0A6EABA 		.word	-1159026976
  40 003c 24720DBC 		.word	-1139969500
  41 0040 45B5C4BB 		.word	-1144736443
  42 0044 F4C508BB 		.word	-1157052940
  43              		.section	.bss.raw_inputs,"aw",%nobits
  44              		.align	2
  47              	raw_inputs:
  48 0000 00000000 		.space	24
  48      00000000 
  48      00000000 
  48      00000000 
  48      00000000 
  49              		.section	.bss.write_index_raw,"aw",%nobits
  52              	write_index_raw:
  53 0000 00       		.space	1
  54              		.section	.bss.inputs,"aw",%nobits
  55              		.align	2
  58              	inputs:
  59 0000 00000000 		.space	400
  59      00000000 
  59      00000000 
  59      00000000 
  59      00000000 
  60              		.section	.bss.demod_bitstream,"aw",%nobits
  61              		.align	2
  64              	demod_bitstream:
  65 0000 00000000 		.space	4
  66              		.section	.bss.write_index,"aw",%nobits
  69              	write_index:
  70 0000 00       		.space	1
  71              		.section	.bss.read_index,"aw",%nobits
  74              	read_index:
  75 0000 00       		.space	1
  76              		.section	.bss.demod_write_index,"aw",%nobits
  77              		.align	1
  80              	demod_write_index:
  81 0000 0000     		.space	2
  82              		.section	.bss.current_state,"aw",%nobits
  85              	current_state:
  86 0000 00       		.space	1
  87              		.section	.bss.unfiltered_data_count,"aw",%nobits
  88              		.align	1
  91              	unfiltered_data_count:
  92 0000 0000     		.space	2
  93              		.section	.bss.stream_state,"aw",%nobits
  96              	stream_state:
  97 0000 00       		.space	1
  98              		.section	.bss.sample_count,"aw",%nobits
 101              	sample_count:
 102 0000 00       		.space	1
 103              		.section	.bss.bit_count,"aw",%nobits
 106              	bit_count:
 107 0000 00       		.space	1
 108              		.section	.bss.zero_count,"aw",%nobits
 111              	zero_count:
 112 0000 00       		.space	1
 113              		.section	.bss.parity,"aw",%nobits
 116              	parity:
 117 0000 00       		.space	1
 118              		.section	.bss.error_flag,"aw",%nobits
 121              	error_flag:
 122 0000 00       		.space	1
 123              		.section	.bss.data_byte,"aw",%nobits
 126              	data_byte:
 127 0000 00       		.space	1
 128              		.section	.bss.data_ready,"aw",%nobits
 131              	data_ready:
 132 0000 00       		.space	1
 133              		.section	.text.demod_init,"ax",%progbits
 134              		.align	1
 135              		.global	demod_init
 136              		.syntax unified
 137              		.thumb
 138              		.thumb_func
 140              	demod_init:
 141              	.LFB123:
   1:../source/demod.c **** #include "demod.h" 
   2:../source/demod.c **** #include "ADC.h"
   3:../source/demod.c **** 
   4:../source/demod.c **** 
   5:../source/demod.c **** void add_data(uint16_t new_data);
   6:../source/demod.c **** void data_fsm(uint8_t data_in);
   7:../source/demod.c **** 
   8:../source/demod.c **** static const float coefs[FILTER_SIZE] = {
   9:../source/demod.c **** 		 -0.002086994263159,-0.006003054525357,-0.008633170414909,-0.001790251586214,
  10:../source/demod.c **** 		    0.02460882704212,   0.0756853298976,   0.1448247875714,   0.2127701317527,
  11:../source/demod.c **** 		     0.2551960820215,   0.2551960820215,   0.2127701317527,   0.1448247875714,
  12:../source/demod.c **** 		     0.0756853298976,  0.02460882704212,-0.001790251586214,-0.008633170414909,
  13:../source/demod.c **** 		  -0.006003054525357,-0.002086994263159
  14:../source/demod.c **** 		};
  15:../source/demod.c **** 
  16:../source/demod.c **** static float raw_inputs[MULT_BUFF_SIZE];
  17:../source/demod.c **** static uint8_t write_index_raw;
  18:../source/demod.c **** 
  19:../source/demod.c **** 
  20:../source/demod.c **** 
  21:../source/demod.c **** static float inputs[BUFFER_SIZE];
  22:../source/demod.c **** static uint8_t* demod_bitstream;
  23:../source/demod.c **** 
  24:../source/demod.c **** static uint8_t write_index;
  25:../source/demod.c **** static uint8_t read_index;
  26:../source/demod.c **** 
  27:../source/demod.c **** static uint16_t demod_write_index;		//
  28:../source/demod.c **** 
  29:../source/demod.c **** 
  30:../source/demod.c **** static uint8_t current_state;			//State of the hysteresis trigger
  31:../source/demod.c **** static uint16_t unfiltered_data_count;	//number of data samples that were not filtered
  32:../source/demod.c **** 
  33:../source/demod.c **** static COMM_STATE_t stream_state;	//State of the transmission according to the enum COMM_STATE_t.
  34:../source/demod.c **** static uint8_t sample_count;			//counter for the number of samples in a bit.
  35:../source/demod.c **** static uint8_t bit_count;			//counter of bits in a message to find the end bit.
  36:../source/demod.c **** static uint8_t zero_count;			//counter for the amount of 0s in the start bit
  37:../source/demod.c **** static uint8_t parity;				//variable to calculate parity.
  38:../source/demod.c **** static uint8_t error_flag;			//Error from parity or lack of end bit.
  39:../source/demod.c **** static uint8_t data_byte;			//data byte demodulated
  40:../source/demod.c **** static bool data_ready;				//flag that indicates data is ready to be read.
  41:../source/demod.c **** 
  42:../source/demod.c **** 
  43:../source/demod.c **** void demod_init( uint8_t* demod_bitstream_ptr){
 142              		.loc 1 43 47
 143              		.cfi_startproc
 144              		@ args = 0, pretend = 0, frame = 8
 145              		@ frame_needed = 1, uses_anonymous_args = 0
 146 0000 80B5     		push	{r7, lr}
 147              		.cfi_def_cfa_offset 8
 148              		.cfi_offset 7, -8
 149              		.cfi_offset 14, -4
 150 0002 82B0     		sub	sp, sp, #8
 151              		.cfi_def_cfa_offset 16
 152 0004 00AF     		add	r7, sp, #0
 153              		.cfi_def_cfa_register 7
 154 0006 7860     		str	r0, [r7, #4]
  44:../source/demod.c **** 	setADCIRQ(add_data);
 155              		.loc 1 44 2
 156 0008 0448     		ldr	r0, .L2
 157 000a FFF7FEFF 		bl	setADCIRQ
  45:../source/demod.c **** 	demod_bitstream = demod_bitstream_ptr;
 158              		.loc 1 45 18
 159 000e 044A     		ldr	r2, .L2+4
 160 0010 7B68     		ldr	r3, [r7, #4]
 161 0012 1360     		str	r3, [r2]
  46:../source/demod.c **** }
 162              		.loc 1 46 1
 163 0014 00BF     		nop
 164 0016 0837     		adds	r7, r7, #8
 165              		.cfi_def_cfa_offset 8
 166 0018 BD46     		mov	sp, r7
 167              		.cfi_def_cfa_register 13
 168              		@ sp needed
 169 001a 80BD     		pop	{r7, pc}
 170              	.L3:
 171              		.align	2
 172              	.L2:
 173 001c 00000000 		.word	add_data
 174 0020 00000000 		.word	demod_bitstream
 175              		.cfi_endproc
 176              	.LFE123:
 178              		.section	.text.filter_data,"ax",%progbits
 179              		.align	1
 180              		.global	filter_data
 181              		.syntax unified
 182              		.thumb
 183              		.thumb_func
 185              	filter_data:
 186              	.LFB124:
  47:../source/demod.c **** 
  48:../source/demod.c **** uint8_t filter_data (void){
 187              		.loc 1 48 27
 188              		.cfi_startproc
 189              		@ args = 0, pretend = 0, frame = 16
 190              		@ frame_needed = 1, uses_anonymous_args = 0
 191 0000 80B5     		push	{r7, lr}
 192              		.cfi_def_cfa_offset 8
 193              		.cfi_offset 7, -8
 194              		.cfi_offset 14, -4
 195 0002 84B0     		sub	sp, sp, #16
 196              		.cfi_def_cfa_offset 24
 197 0004 00AF     		add	r7, sp, #0
 198              		.cfi_def_cfa_register 7
  49:../source/demod.c **** #ifdef DEBUG_PIN
  50:../source/demod.c **** 	DEBUG_TP_SET;
 199              		.loc 1 50 2
 200 0006 544B     		ldr	r3, .L25
 201 0008 4FF40002 		mov	r2, #8388608
 202 000c 1A60     		str	r2, [r3]
  51:../source/demod.c **** 	//GPIO_Set(PTC, GPIO_OUT(12));
  52:../source/demod.c **** #endif
  53:../source/demod.c **** 
  54:../source/demod.c **** 	int i,j;
  55:../source/demod.c **** 	uint8_t num_data=0;			//number of data samples filtered
 203              		.loc 1 55 10
 204 000e 0023     		movs	r3, #0
 205 0010 FB71     		strb	r3, [r7, #7]
  56:../source/demod.c **** 	float filtered_data=0;
 206              		.loc 1 56 8
 207 0012 4FF00003 		mov	r3, #0
 208 0016 3B60     		str	r3, [r7]	@ float
  57:../source/demod.c **** 	if(write_index >= read_index){
 209              		.loc 1 57 17
 210 0018 504B     		ldr	r3, .L25+4
 211 001a 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 212 001c 504B     		ldr	r3, .L25+8
 213 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 214              		.loc 1 57 4
 215 0020 9A42     		cmp	r2, r3
 216 0022 06D3     		bcc	.L5
  58:../source/demod.c **** 		num_data= write_index-read_index;
 217              		.loc 1 58 24
 218 0024 4D4B     		ldr	r3, .L25+4
 219 0026 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 220 0028 4D4B     		ldr	r3, .L25+8
 221 002a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 222              		.loc 1 58 11
 223 002c D31A     		subs	r3, r2, r3
 224 002e FB71     		strb	r3, [r7, #7]
 225 0030 07E0     		b	.L6
 226              	.L5:
  59:../source/demod.c **** 	}
  60:../source/demod.c **** 	else{
  61:../source/demod.c **** 		num_data= write_index - read_index + (BUFFER_SIZE);
 227              		.loc 1 61 25
 228 0032 4A4B     		ldr	r3, .L25+4
 229 0034 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 230 0036 4A4B     		ldr	r3, .L25+8
 231 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 232 003a D31A     		subs	r3, r2, r3
 233 003c DBB2     		uxtb	r3, r3
 234              		.loc 1 61 11
 235 003e 6433     		adds	r3, r3, #100
 236 0040 FB71     		strb	r3, [r7, #7]
 237              	.L6:
  62:../source/demod.c **** 	}
  63:../source/demod.c **** 	for(j=0; j<num_data; j++)
 238              		.loc 1 63 7
 239 0042 0023     		movs	r3, #0
 240 0044 BB60     		str	r3, [r7, #8]
 241              		.loc 1 63 2
 242 0046 7AE0     		b	.L7
 243              	.L20:
  64:../source/demod.c **** 	{
  65:../source/demod.c **** 		for(i=0; i<FILTER_SIZE; i++){
 244              		.loc 1 65 8
 245 0048 0023     		movs	r3, #0
 246 004a FB60     		str	r3, [r7, #12]
 247              		.loc 1 65 3
 248 004c 28E0     		b	.L8
 249              	.L11:
  66:../source/demod.c **** 			filtered_data += inputs[CIRCULAR_INDEX_R(read_index - i, BUFFER_SIZE)] * coefs[i];
 250              		.loc 1 66 28
 251 004e 444B     		ldr	r3, .L25+8
 252 0050 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 253 0052 1A46     		mov	r2, r3
 254 0054 FB68     		ldr	r3, [r7, #12]
 255 0056 D31A     		subs	r3, r2, r3
 256 0058 002B     		cmp	r3, #0
 257 005a 06DA     		bge	.L9
 258              		.loc 1 66 28 is_stmt 0 discriminator 1
 259 005c 404B     		ldr	r3, .L25+8
 260 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 261 0060 1A46     		mov	r2, r3
 262 0062 FB68     		ldr	r3, [r7, #12]
 263 0064 D31A     		subs	r3, r2, r3
 264 0066 6433     		adds	r3, r3, #100
 265 0068 04E0     		b	.L10
 266              	.L9:
 267              		.loc 1 66 28 discriminator 2
 268 006a 3D4B     		ldr	r3, .L25+8
 269 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 270 006e 1A46     		mov	r2, r3
 271 0070 FB68     		ldr	r3, [r7, #12]
 272 0072 D31A     		subs	r3, r2, r3
 273              	.L10:
 274              		.loc 1 66 27 is_stmt 1 discriminator 4
 275 0074 3B4A     		ldr	r2, .L25+12
 276 0076 9B00     		lsls	r3, r3, #2
 277 0078 1344     		add	r3, r3, r2
 278 007a 93ED007A 		vldr.32	s14, [r3]
 279              		.loc 1 66 82 discriminator 4
 280 007e 3A4A     		ldr	r2, .L25+16
 281 0080 FB68     		ldr	r3, [r7, #12]
 282 0082 9B00     		lsls	r3, r3, #2
 283 0084 1344     		add	r3, r3, r2
 284 0086 D3ED007A 		vldr.32	s15, [r3]
 285              		.loc 1 66 75 discriminator 4
 286 008a 67EE277A 		vmul.f32	s15, s14, s15
 287              		.loc 1 66 18 discriminator 4
 288 008e 97ED007A 		vldr.32	s14, [r7]
 289 0092 77EE277A 		vadd.f32	s15, s14, s15
 290 0096 C7ED007A 		vstr.32	s15, [r7]
  65:../source/demod.c **** 			filtered_data += inputs[CIRCULAR_INDEX_R(read_index - i, BUFFER_SIZE)] * coefs[i];
 291              		.loc 1 65 28 discriminator 2
 292 009a FB68     		ldr	r3, [r7, #12]
 293 009c 0133     		adds	r3, r3, #1
 294 009e FB60     		str	r3, [r7, #12]
 295              	.L8:
  65:../source/demod.c **** 			filtered_data += inputs[CIRCULAR_INDEX_R(read_index - i, BUFFER_SIZE)] * coefs[i];
 296              		.loc 1 65 13 discriminator 1
 297 00a0 FB68     		ldr	r3, [r7, #12]
 298 00a2 112B     		cmp	r3, #17
 299 00a4 D3DD     		ble	.L11
  67:../source/demod.c **** 		}
  68:../source/demod.c **** 		read_index = UPDATE_INDEX(read_index,BUFFER_SIZE);
 300              		.loc 1 68 16
 301 00a6 2E4B     		ldr	r3, .L25+8
 302 00a8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 303              		.loc 1 68 14
 304 00aa 632B     		cmp	r3, #99
 305 00ac 04D0     		beq	.L12
 306              		.loc 1 68 16 discriminator 1
 307 00ae 2C4B     		ldr	r3, .L25+8
 308 00b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 309              		.loc 1 68 14 discriminator 1
 310 00b2 0133     		adds	r3, r3, #1
 311 00b4 DBB2     		uxtb	r3, r3
 312 00b6 00E0     		b	.L13
 313              	.L12:
 314              		.loc 1 68 14 is_stmt 0 discriminator 2
 315 00b8 0023     		movs	r3, #0
 316              	.L13:
 317              		.loc 1 68 14 discriminator 4
 318 00ba 294A     		ldr	r2, .L25+8
 319 00bc 1370     		strb	r3, [r2]
  69:../source/demod.c **** 
  70:../source/demod.c **** 		if(filtered_data > V_TH){
 320              		.loc 1 70 5 is_stmt 1
 321 00be D7ED007A 		vldr.32	s15, [r7]
 322 00c2 9FED2A7A 		vldr.32	s14, .L25+20
 323 00c6 F4EEC77A 		vcmpe.f32	s15, s14
 324 00ca F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 325 00ce 03DD     		ble	.L24
  71:../source/demod.c **** 				current_state = LOGIC_0;	// Set to 0 when amplitude is greater than V_th
 326              		.loc 1 71 19
 327 00d0 274B     		ldr	r3, .L25+24
 328 00d2 0022     		movs	r2, #0
 329 00d4 1A70     		strb	r2, [r3]
 330 00d6 0BE0     		b	.L16
 331              	.L24:
  72:../source/demod.c **** 		}
  73:../source/demod.c **** 		else if( filtered_data < V_TL){
 332              		.loc 1 73 10
 333 00d8 D7ED007A 		vldr.32	s15, [r7]
 334 00dc 9FED257A 		vldr.32	s14, .L25+28
 335 00e0 F4EEC77A 		vcmpe.f32	s15, s14
 336 00e4 F1EE10FA 		vmrs	APSR_nzcv, FPSCR
 337 00e8 02D5     		bpl	.L16
  74:../source/demod.c **** 				current_state = LOGIC_1;	//Set to 1 when amplitude is less than V_tl
 338              		.loc 1 74 19
 339 00ea 214B     		ldr	r3, .L25+24
 340 00ec 0122     		movs	r2, #1
 341 00ee 1A70     		strb	r2, [r3]
 342              	.L16:
  75:../source/demod.c **** 		}
  76:../source/demod.c **** 		data_fsm(current_state);
 343              		.loc 1 76 3
 344 00f0 1F4B     		ldr	r3, .L25+24
 345 00f2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 346 00f4 1846     		mov	r0, r3
 347 00f6 FFF7FEFF 		bl	data_fsm
  77:../source/demod.c **** 
  78:../source/demod.c **** 		demod_bitstream[demod_write_index]= current_state;						//load data into array
 348              		.loc 1 78 18
 349 00fa 1F4B     		ldr	r3, .L25+32
 350 00fc 1B68     		ldr	r3, [r3]
 351 00fe 1F4A     		ldr	r2, .L25+36
 352 0100 1288     		ldrh	r2, [r2]
 353 0102 1344     		add	r3, r3, r2
 354              		.loc 1 78 37
 355 0104 1A4A     		ldr	r2, .L25+24
 356 0106 1278     		ldrb	r2, [r2]	@ zero_extendqisi2
 357 0108 1A70     		strb	r2, [r3]
  79:../source/demod.c **** 		demod_write_index = UPDATE_INDEX(demod_write_index, BITSTREAM_SIZE);	//update write index
 358              		.loc 1 79 23
 359 010a 1C4B     		ldr	r3, .L25+36
 360 010c 1B88     		ldrh	r3, [r3]
 361              		.loc 1 79 21
 362 010e 40F2E732 		movw	r2, #999
 363 0112 9342     		cmp	r3, r2
 364 0114 04D0     		beq	.L18
 365              		.loc 1 79 23 discriminator 1
 366 0116 194B     		ldr	r3, .L25+36
 367 0118 1B88     		ldrh	r3, [r3]
 368              		.loc 1 79 21 discriminator 1
 369 011a 0133     		adds	r3, r3, #1
 370 011c 9BB2     		uxth	r3, r3
 371 011e 00E0     		b	.L19
 372              	.L18:
 373              		.loc 1 79 21 is_stmt 0 discriminator 2
 374 0120 0023     		movs	r3, #0
 375              	.L19:
 376              		.loc 1 79 21 discriminator 4
 377 0122 164A     		ldr	r2, .L25+36
 378 0124 1380     		strh	r3, [r2]	@ movhi
  80:../source/demod.c **** 
  81:../source/demod.c **** 		unfiltered_data_count--;
 379              		.loc 1 81 24 is_stmt 1
 380 0126 164B     		ldr	r3, .L25+40
 381 0128 1B88     		ldrh	r3, [r3]
 382 012a 013B     		subs	r3, r3, #1
 383 012c 9AB2     		uxth	r2, r3
 384 012e 144B     		ldr	r3, .L25+40
 385 0130 1A80     		strh	r2, [r3]	@ movhi
  82:../source/demod.c **** 		filtered_data=0;			//restart the aux variable.
 386              		.loc 1 82 16
 387 0132 4FF00003 		mov	r3, #0
 388 0136 3B60     		str	r3, [r7]	@ float
  63:../source/demod.c **** 	{
 389              		.loc 1 63 24 discriminator 2
 390 0138 BB68     		ldr	r3, [r7, #8]
 391 013a 0133     		adds	r3, r3, #1
 392 013c BB60     		str	r3, [r7, #8]
 393              	.L7:
  63:../source/demod.c **** 	{
 394              		.loc 1 63 12 discriminator 1
 395 013e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 396 0140 BA68     		ldr	r2, [r7, #8]
 397 0142 9A42     		cmp	r2, r3
 398 0144 80DB     		blt	.L20
  83:../source/demod.c **** 	}
  84:../source/demod.c **** 	#ifdef DEBUG_PIN
  85:../source/demod.c **** 		DEBUG_TP_CLR;
 399              		.loc 1 85 3
 400 0146 0F4B     		ldr	r3, .L25+44
 401 0148 4FF40002 		mov	r2, #8388608
 402 014c 1A60     		str	r2, [r3]
  86:../source/demod.c **** 		//GPIO_Clear(PTC, GPIO_OUT(12));
  87:../source/demod.c **** 	#endif
  88:../source/demod.c **** 	return num_data;
 403              		.loc 1 88 9
 404 014e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  89:../source/demod.c **** }
 405              		.loc 1 89 1
 406 0150 1846     		mov	r0, r3
 407 0152 1037     		adds	r7, r7, #16
 408              		.cfi_def_cfa_offset 8
 409 0154 BD46     		mov	sp, r7
 410              		.cfi_def_cfa_register 13
 411              		@ sp needed
 412 0156 80BD     		pop	{r7, pc}
 413              	.L26:
 414              		.align	2
 415              	.L25:
 416 0158 44F00F40 		.word	1074786372
 417 015c 00000000 		.word	write_index
 418 0160 00000000 		.word	read_index
 419 0164 00000000 		.word	inputs
 420 0168 00000000 		.word	coefs
 421 016c CDCCCC3D 		.word	1036831949
 422 0170 00000000 		.word	current_state
 423 0174 CDCC4CBE 		.word	-1102263091
 424 0178 00000000 		.word	demod_bitstream
 425 017c 00000000 		.word	demod_write_index
 426 0180 00000000 		.word	unfiltered_data_count
 427 0184 48F00F40 		.word	1074786376
 428              		.cfi_endproc
 429              	.LFE124:
 431              		.section	.text.add_data,"ax",%progbits
 432              		.align	1
 433              		.global	add_data
 434              		.syntax unified
 435              		.thumb
 436              		.thumb_func
 438              	add_data:
 439              	.LFB125:
  90:../source/demod.c **** 
  91:../source/demod.c **** void add_data(uint16_t new_data){
 440              		.loc 1 91 33
 441              		.cfi_startproc
 442              		@ args = 0, pretend = 0, frame = 8
 443              		@ frame_needed = 1, uses_anonymous_args = 0
 444              		@ link register save eliminated.
 445 0000 80B4     		push	{r7}
 446              		.cfi_def_cfa_offset 4
 447              		.cfi_offset 7, -4
 448 0002 83B0     		sub	sp, sp, #12
 449              		.cfi_def_cfa_offset 16
 450 0004 00AF     		add	r7, sp, #0
 451              		.cfi_def_cfa_register 7
 452 0006 0346     		mov	r3, r0
 453 0008 FB80     		strh	r3, [r7, #6]	@ movhi
  92:../source/demod.c **** 
  93:../source/demod.c **** 	raw_inputs[write_index_raw] = (new_data-2048)*(3.3f)/4095;
 454              		.loc 1 93 41
 455 000a FB88     		ldrh	r3, [r7, #6]
 456 000c A3F50063 		sub	r3, r3, #2048
 457              		.loc 1 93 47
 458 0010 07EE903A 		vmov	s15, r3	@ int
 459 0014 F8EEE77A 		vcvt.f32.s32	s15, s15
 460 0018 9FED297A 		vldr.32	s14, .L34
 461 001c 27EE877A 		vmul.f32	s14, s15, s14
 462              		.loc 1 93 12
 463 0020 284B     		ldr	r3, .L34+4
 464 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 465              		.loc 1 93 54
 466 0024 DFED286A 		vldr.32	s13, .L34+8
 467 0028 C7EE267A 		vdiv.f32	s15, s14, s13
 468              		.loc 1 93 30
 469 002c 274A     		ldr	r2, .L34+12
 470 002e 9B00     		lsls	r3, r3, #2
 471 0030 1344     		add	r3, r3, r2
 472 0032 C3ED007A 		vstr.32	s15, [r3]
  94:../source/demod.c **** 	inputs[write_index] = raw_inputs[write_index_raw] * raw_inputs[CIRCULAR_INDEX_R(write_index_raw-(M
 473              		.loc 1 94 34
 474 0036 234B     		ldr	r3, .L34+4
 475 0038 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 476 003a 244A     		ldr	r2, .L34+12
 477 003c 9B00     		lsls	r3, r3, #2
 478 003e 1344     		add	r3, r3, r2
 479 0040 93ED007A 		vldr.32	s14, [r3]
 480              		.loc 1 94 65
 481 0044 1F4B     		ldr	r3, .L34+4
 482 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 483 0048 042B     		cmp	r3, #4
 484 004a 03D8     		bhi	.L28
 485              		.loc 1 94 65 is_stmt 0 discriminator 1
 486 004c 1D4B     		ldr	r3, .L34+4
 487 004e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 488 0050 0133     		adds	r3, r3, #1
 489 0052 02E0     		b	.L29
 490              	.L28:
 491              		.loc 1 94 65 discriminator 2
 492 0054 1B4B     		ldr	r3, .L34+4
 493 0056 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 494 0058 053B     		subs	r3, r3, #5
 495              	.L29:
 496              		.loc 1 94 64 is_stmt 1 discriminator 4
 497 005a 1C4A     		ldr	r2, .L34+12
 498 005c 9B00     		lsls	r3, r3, #2
 499 005e 1344     		add	r3, r3, r2
 500 0060 D3ED007A 		vldr.32	s15, [r3]
 501              		.loc 1 94 8 discriminator 4
 502 0064 1A4B     		ldr	r3, .L34+16
 503 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 504              		.loc 1 94 52 discriminator 4
 505 0068 67EE277A 		vmul.f32	s15, s14, s15
 506              		.loc 1 94 22 discriminator 4
 507 006c 194A     		ldr	r2, .L34+20
 508 006e 9B00     		lsls	r3, r3, #2
 509 0070 1344     		add	r3, r3, r2
 510 0072 C3ED007A 		vstr.32	s15, [r3]
  95:../source/demod.c **** 
  96:../source/demod.c **** 	write_index_raw = UPDATE_INDEX(write_index_raw ,MULT_BUFF_SIZE);
 511              		.loc 1 96 20
 512 0076 134B     		ldr	r3, .L34+4
 513 0078 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 514              		.loc 1 96 18
 515 007a 052B     		cmp	r3, #5
 516 007c 04D0     		beq	.L30
 517              		.loc 1 96 20 discriminator 1
 518 007e 114B     		ldr	r3, .L34+4
 519 0080 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 520              		.loc 1 96 18 discriminator 1
 521 0082 0133     		adds	r3, r3, #1
 522 0084 DBB2     		uxtb	r3, r3
 523 0086 00E0     		b	.L31
 524              	.L30:
 525              		.loc 1 96 18 is_stmt 0 discriminator 2
 526 0088 0023     		movs	r3, #0
 527              	.L31:
 528              		.loc 1 96 18 discriminator 4
 529 008a 0E4A     		ldr	r2, .L34+4
 530 008c 1370     		strb	r3, [r2]
  97:../source/demod.c **** 	write_index = UPDATE_INDEX(write_index,BUFFER_SIZE);
 531              		.loc 1 97 16 is_stmt 1
 532 008e 104B     		ldr	r3, .L34+16
 533 0090 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 534              		.loc 1 97 14
 535 0092 632B     		cmp	r3, #99
 536 0094 04D0     		beq	.L32
 537              		.loc 1 97 16 discriminator 1
 538 0096 0E4B     		ldr	r3, .L34+16
 539 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 540              		.loc 1 97 14 discriminator 1
 541 009a 0133     		adds	r3, r3, #1
 542 009c DBB2     		uxtb	r3, r3
 543 009e 00E0     		b	.L33
 544              	.L32:
 545              		.loc 1 97 14 is_stmt 0 discriminator 2
 546 00a0 0023     		movs	r3, #0
 547              	.L33:
 548              		.loc 1 97 14 discriminator 4
 549 00a2 0B4A     		ldr	r2, .L34+16
 550 00a4 1370     		strb	r3, [r2]
  98:../source/demod.c **** 	unfiltered_data_count++;
 551              		.loc 1 98 23 is_stmt 1
 552 00a6 0C4B     		ldr	r3, .L34+24
 553 00a8 1B88     		ldrh	r3, [r3]
 554 00aa 0133     		adds	r3, r3, #1
 555 00ac 9AB2     		uxth	r2, r3
 556 00ae 0A4B     		ldr	r3, .L34+24
 557 00b0 1A80     		strh	r2, [r3]	@ movhi
  99:../source/demod.c **** }
 558              		.loc 1 99 1
 559 00b2 00BF     		nop
 560 00b4 0C37     		adds	r7, r7, #12
 561              		.cfi_def_cfa_offset 4
 562 00b6 BD46     		mov	sp, r7
 563              		.cfi_def_cfa_register 13
 564              		@ sp needed
 565 00b8 5DF8047B 		ldr	r7, [sp], #4
 566              		.cfi_restore 7
 567              		.cfi_def_cfa_offset 0
 568 00bc 7047     		bx	lr
 569              	.L35:
 570 00be 00BF     		.align	2
 571              	.L34:
 572 00c0 33335340 		.word	1079194419
 573 00c4 00000000 		.word	write_index_raw
 574 00c8 00F07F45 		.word	1166012416
 575 00cc 00000000 		.word	raw_inputs
 576 00d0 00000000 		.word	write_index
 577 00d4 00000000 		.word	inputs
 578 00d8 00000000 		.word	unfiltered_data_count
 579              		.cfi_endproc
 580              	.LFE125:
 582              		.section	.text.get_unfiltered_count,"ax",%progbits
 583              		.align	1
 584              		.global	get_unfiltered_count
 585              		.syntax unified
 586              		.thumb
 587              		.thumb_func
 589              	get_unfiltered_count:
 590              	.LFB126:
 100:../source/demod.c **** 
 101:../source/demod.c **** 
 102:../source/demod.c **** uint16_t get_unfiltered_count(void){
 591              		.loc 1 102 36
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 1, uses_anonymous_args = 0
 595              		@ link register save eliminated.
 596 0000 80B4     		push	{r7}
 597              		.cfi_def_cfa_offset 4
 598              		.cfi_offset 7, -4
 599 0002 00AF     		add	r7, sp, #0
 600              		.cfi_def_cfa_register 7
 103:../source/demod.c **** 	return unfiltered_data_count;
 601              		.loc 1 103 9
 602 0004 034B     		ldr	r3, .L38
 603 0006 1B88     		ldrh	r3, [r3]
 104:../source/demod.c **** }
 604              		.loc 1 104 1
 605 0008 1846     		mov	r0, r3
 606 000a BD46     		mov	sp, r7
 607              		.cfi_def_cfa_register 13
 608              		@ sp needed
 609 000c 5DF8047B 		ldr	r7, [sp], #4
 610              		.cfi_restore 7
 611              		.cfi_def_cfa_offset 0
 612 0010 7047     		bx	lr
 613              	.L39:
 614 0012 00BF     		.align	2
 615              	.L38:
 616 0014 00000000 		.word	unfiltered_data_count
 617              		.cfi_endproc
 618              	.LFE126:
 620              		.section	.text.is_data_ready,"ax",%progbits
 621              		.align	1
 622              		.global	is_data_ready
 623              		.syntax unified
 624              		.thumb
 625              		.thumb_func
 627              	is_data_ready:
 628              	.LFB127:
 105:../source/demod.c **** 
 106:../source/demod.c **** bool is_data_ready(void){
 629              		.loc 1 106 25
 630              		.cfi_startproc
 631              		@ args = 0, pretend = 0, frame = 0
 632              		@ frame_needed = 1, uses_anonymous_args = 0
 633              		@ link register save eliminated.
 634 0000 80B4     		push	{r7}
 635              		.cfi_def_cfa_offset 4
 636              		.cfi_offset 7, -4
 637 0002 00AF     		add	r7, sp, #0
 638              		.cfi_def_cfa_register 7
 107:../source/demod.c **** 	return data_ready;
 639              		.loc 1 107 9
 640 0004 034B     		ldr	r3, .L42
 641 0006 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 108:../source/demod.c **** }
 642              		.loc 1 108 1
 643 0008 1846     		mov	r0, r3
 644 000a BD46     		mov	sp, r7
 645              		.cfi_def_cfa_register 13
 646              		@ sp needed
 647 000c 5DF8047B 		ldr	r7, [sp], #4
 648              		.cfi_restore 7
 649              		.cfi_def_cfa_offset 0
 650 0010 7047     		bx	lr
 651              	.L43:
 652 0012 00BF     		.align	2
 653              	.L42:
 654 0014 00000000 		.word	data_ready
 655              		.cfi_endproc
 656              	.LFE127:
 658              		.section	.text.get_data_byte,"ax",%progbits
 659              		.align	1
 660              		.global	get_data_byte
 661              		.syntax unified
 662              		.thumb
 663              		.thumb_func
 665              	get_data_byte:
 666              	.LFB128:
 109:../source/demod.c **** 
 110:../source/demod.c **** uint8_t get_data_byte(void){
 667              		.loc 1 110 28
 668              		.cfi_startproc
 669              		@ args = 0, pretend = 0, frame = 0
 670              		@ frame_needed = 1, uses_anonymous_args = 0
 671              		@ link register save eliminated.
 672 0000 80B4     		push	{r7}
 673              		.cfi_def_cfa_offset 4
 674              		.cfi_offset 7, -4
 675 0002 00AF     		add	r7, sp, #0
 676              		.cfi_def_cfa_register 7
 111:../source/demod.c **** 	data_ready = false;
 677              		.loc 1 111 13
 678 0004 044B     		ldr	r3, .L46
 679 0006 0022     		movs	r2, #0
 680 0008 1A70     		strb	r2, [r3]
 112:../source/demod.c **** 	return data_byte;
 681              		.loc 1 112 9
 682 000a 044B     		ldr	r3, .L46+4
 683 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 113:../source/demod.c **** }
 684              		.loc 1 113 1
 685 000e 1846     		mov	r0, r3
 686 0010 BD46     		mov	sp, r7
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 0012 5DF8047B 		ldr	r7, [sp], #4
 690              		.cfi_restore 7
 691              		.cfi_def_cfa_offset 0
 692 0016 7047     		bx	lr
 693              	.L47:
 694              		.align	2
 695              	.L46:
 696 0018 00000000 		.word	data_ready
 697 001c 00000000 		.word	data_byte
 698              		.cfi_endproc
 699              	.LFE128:
 701              		.section	.text.data_fsm,"ax",%progbits
 702              		.align	1
 703              		.global	data_fsm
 704              		.syntax unified
 705              		.thumb
 706              		.thumb_func
 708              	data_fsm:
 709              	.LFB129:
 114:../source/demod.c **** 
 115:../source/demod.c **** void data_fsm(uint8_t data_in){
 710              		.loc 1 115 31
 711              		.cfi_startproc
 712              		@ args = 0, pretend = 0, frame = 8
 713              		@ frame_needed = 1, uses_anonymous_args = 0
 714              		@ link register save eliminated.
 715 0000 80B4     		push	{r7}
 716              		.cfi_def_cfa_offset 4
 717              		.cfi_offset 7, -4
 718 0002 83B0     		sub	sp, sp, #12
 719              		.cfi_def_cfa_offset 16
 720 0004 00AF     		add	r7, sp, #0
 721              		.cfi_def_cfa_register 7
 722 0006 0346     		mov	r3, r0
 723 0008 FB71     		strb	r3, [r7, #7]
 116:../source/demod.c **** 	switch(stream_state){
 724              		.loc 1 116 2
 725 000a 974B     		ldr	r3, .L83
 726 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 727 000e 042B     		cmp	r3, #4
 728 0010 00F22481 		bhi	.L76
 729 0014 01A2     		adr	r2, .L51
 730 0016 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 731 001a 00BF     		.p2align 2
 732              	.L51:
 733 001c 31000000 		.word	.L55+1
 734 0020 59000000 		.word	.L54+1
 735 0024 CD000000 		.word	.L53+1
 736 0028 61010000 		.word	.L52+1
 737 002c DB010000 		.word	.L50+1
 738              		.p2align 1
 739              	.L55:
 117:../source/demod.c **** 	case IDLE:
 118:../source/demod.c **** 		if(data_in == LOGIC_0){
 740              		.loc 1 118 5
 741 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 742 0032 002B     		cmp	r3, #0
 743 0034 40F00981 		bne	.L77
 119:../source/demod.c **** 			stream_state = CHECK_START;
 744              		.loc 1 119 17
 745 0038 8B4B     		ldr	r3, .L83
 746 003a 0122     		movs	r2, #1
 747 003c 1A70     		strb	r2, [r3]
 120:../source/demod.c **** 			zero_count++;
 748              		.loc 1 120 14
 749 003e 8B4B     		ldr	r3, .L83+4
 750 0040 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 751 0042 0133     		adds	r3, r3, #1
 752 0044 DAB2     		uxtb	r2, r3
 753 0046 894B     		ldr	r3, .L83+4
 754 0048 1A70     		strb	r2, [r3]
 121:../source/demod.c **** 			sample_count++;
 755              		.loc 1 121 16
 756 004a 894B     		ldr	r3, .L83+8
 757 004c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 758 004e 0133     		adds	r3, r3, #1
 759 0050 DAB2     		uxtb	r2, r3
 760 0052 874B     		ldr	r3, .L83+8
 761 0054 1A70     		strb	r2, [r3]
 122:../source/demod.c **** 		}
 123:../source/demod.c **** 		break;
 762              		.loc 1 123 3
 763 0056 F8E0     		b	.L77
 764              	.L54:
 124:../source/demod.c **** 	case CHECK_START:
 125:../source/demod.c **** 		sample_count++;
 765              		.loc 1 125 15
 766 0058 854B     		ldr	r3, .L83+8
 767 005a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 768 005c 0133     		adds	r3, r3, #1
 769 005e DAB2     		uxtb	r2, r3
 770 0060 834B     		ldr	r3, .L83+8
 771 0062 1A70     		strb	r2, [r3]
 126:../source/demod.c **** 		if((sample_count < 6) && (data_in == LOGIC_0)){
 772              		.loc 1 126 20
 773 0064 824B     		ldr	r3, .L83+8
 774 0066 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 775              		.loc 1 126 5
 776 0068 052B     		cmp	r3, #5
 777 006a 09D8     		bhi	.L57
 778              		.loc 1 126 25 discriminator 1
 779 006c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 780 006e 002B     		cmp	r3, #0
 781 0070 06D1     		bne	.L57
 127:../source/demod.c **** 			zero_count++;
 782              		.loc 1 127 14
 783 0072 7E4B     		ldr	r3, .L83+4
 784 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 785 0076 0133     		adds	r3, r3, #1
 786 0078 DAB2     		uxtb	r2, r3
 787 007a 7C4B     		ldr	r3, .L83+4
 788 007c 1A70     		strb	r2, [r3]
 128:../source/demod.c **** 		}
 129:../source/demod.c **** 		else if (sample_count == OVERSAMPLE_RATE){
 130:../source/demod.c **** 			if(zero_count > 2){
 131:../source/demod.c **** 				stream_state = RECIEVING;	//mayority of the sampled bits are 0. start is considered
 132:../source/demod.c **** 				error_flag=0;
 133:../source/demod.c **** 				data_byte =0;
 134:../source/demod.c **** 				data_ready = false;
 135:../source/demod.c **** 			}
 136:../source/demod.c **** 			else{
 137:../source/demod.c **** 				stream_state = IDLE;		//considered a false start
 138:../source/demod.c **** 			}
 139:../source/demod.c **** 			zero_count=0;			//reset counters
 140:../source/demod.c **** 			sample_count =0;
 141:../source/demod.c **** 			parity =0;				//reset parity
 142:../source/demod.c **** 			bit_count = 0;			//make sure bit_count is in 0
 143:../source/demod.c **** 		}
 144:../source/demod.c **** 
 145:../source/demod.c **** 		break;
 789              		.loc 1 145 3
 790 007e E6E0     		b	.L78
 791              	.L57:
 129:../source/demod.c **** 			if(zero_count > 2){
 792              		.loc 1 129 25
 793 0080 7B4B     		ldr	r3, .L83+8
 794 0082 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 129:../source/demod.c **** 			if(zero_count > 2){
 795              		.loc 1 129 11
 796 0084 0A2B     		cmp	r3, #10
 797 0086 40F0E280 		bne	.L78
 130:../source/demod.c **** 				stream_state = RECIEVING;	//mayority of the sampled bits are 0. start is considered
 798              		.loc 1 130 18
 799 008a 784B     		ldr	r3, .L83+4
 800 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 130:../source/demod.c **** 				stream_state = RECIEVING;	//mayority of the sampled bits are 0. start is considered
 801              		.loc 1 130 6
 802 008e 022B     		cmp	r3, #2
 803 0090 0CD9     		bls	.L59
 131:../source/demod.c **** 				error_flag=0;
 804              		.loc 1 131 18
 805 0092 754B     		ldr	r3, .L83
 806 0094 0222     		movs	r2, #2
 807 0096 1A70     		strb	r2, [r3]
 132:../source/demod.c **** 				data_byte =0;
 808              		.loc 1 132 15
 809 0098 764B     		ldr	r3, .L83+12
 810 009a 0022     		movs	r2, #0
 811 009c 1A70     		strb	r2, [r3]
 133:../source/demod.c **** 				data_ready = false;
 812              		.loc 1 133 15
 813 009e 764B     		ldr	r3, .L83+16
 814 00a0 0022     		movs	r2, #0
 815 00a2 1A70     		strb	r2, [r3]
 134:../source/demod.c **** 			}
 816              		.loc 1 134 16
 817 00a4 754B     		ldr	r3, .L83+20
 818 00a6 0022     		movs	r2, #0
 819 00a8 1A70     		strb	r2, [r3]
 820 00aa 02E0     		b	.L60
 821              	.L59:
 137:../source/demod.c **** 			}
 822              		.loc 1 137 18
 823 00ac 6E4B     		ldr	r3, .L83
 824 00ae 0022     		movs	r2, #0
 825 00b0 1A70     		strb	r2, [r3]
 826              	.L60:
 139:../source/demod.c **** 			sample_count =0;
 827              		.loc 1 139 14
 828 00b2 6E4B     		ldr	r3, .L83+4
 829 00b4 0022     		movs	r2, #0
 830 00b6 1A70     		strb	r2, [r3]
 140:../source/demod.c **** 			parity =0;				//reset parity
 831              		.loc 1 140 17
 832 00b8 6D4B     		ldr	r3, .L83+8
 833 00ba 0022     		movs	r2, #0
 834 00bc 1A70     		strb	r2, [r3]
 141:../source/demod.c **** 			bit_count = 0;			//make sure bit_count is in 0
 835              		.loc 1 141 11
 836 00be 704B     		ldr	r3, .L83+24
 837 00c0 0022     		movs	r2, #0
 838 00c2 1A70     		strb	r2, [r3]
 142:../source/demod.c **** 		}
 839              		.loc 1 142 14
 840 00c4 6F4B     		ldr	r3, .L83+28
 841 00c6 0022     		movs	r2, #0
 842 00c8 1A70     		strb	r2, [r3]
 843              		.loc 1 145 3
 844 00ca C0E0     		b	.L78
 845              	.L53:
 146:../source/demod.c **** 
 147:../source/demod.c **** 	case RECIEVING:
 148:../source/demod.c **** 		sample_count++;
 846              		.loc 1 148 15
 847 00cc 684B     		ldr	r3, .L83+8
 848 00ce 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 849 00d0 0133     		adds	r3, r3, #1
 850 00d2 DAB2     		uxtb	r2, r3
 851 00d4 664B     		ldr	r3, .L83+8
 852 00d6 1A70     		strb	r2, [r3]
 149:../source/demod.c **** 		if((sample_count > COMP_WINDOW_LOW) && (sample_count < COMP_WINDOW_HIGH)){		//take the 5 middle s
 853              		.loc 1 149 20
 854 00d8 654B     		ldr	r3, .L83+8
 855 00da 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 856              		.loc 1 149 5
 857 00dc 032B     		cmp	r3, #3
 858 00de 0DD9     		bls	.L61
 859              		.loc 1 149 56 discriminator 1
 860 00e0 634B     		ldr	r3, .L83+8
 861 00e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 862              		.loc 1 149 39 discriminator 1
 863 00e4 082B     		cmp	r3, #8
 864 00e6 09D8     		bhi	.L61
 150:../source/demod.c **** 			if(data_in == LOGIC_0){
 865              		.loc 1 150 6
 866 00e8 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 867 00ea 002B     		cmp	r3, #0
 868 00ec 2DD1     		bne	.L63
 151:../source/demod.c **** 				zero_count++;
 869              		.loc 1 151 15
 870 00ee 5F4B     		ldr	r3, .L83+4
 871 00f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 872 00f2 0133     		adds	r3, r3, #1
 873 00f4 DAB2     		uxtb	r2, r3
 874 00f6 5D4B     		ldr	r3, .L83+4
 875 00f8 1A70     		strb	r2, [r3]
 150:../source/demod.c **** 			if(data_in == LOGIC_0){
 876              		.loc 1 150 6
 877 00fa 26E0     		b	.L63
 878              	.L61:
 152:../source/demod.c **** 			}
 153:../source/demod.c **** 		}
 154:../source/demod.c **** 		else if(sample_count == OVERSAMPLE_RATE){
 879              		.loc 1 154 24
 880 00fc 5C4B     		ldr	r3, .L83+8
 881 00fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 882              		.loc 1 154 10
 883 0100 0A2B     		cmp	r3, #10
 884 0102 22D1     		bne	.L63
 155:../source/demod.c **** 			//data byte is unchanged IF 0 IS RECIEVED!!!
 156:../source/demod.c **** 			//if(zero_count > COMP_THRESHOLD){
 157:../source/demod.c **** 				//data_byte += ( 0 << bit_count);
 158:../source/demod.c **** 				//parity ^= LOGIC_0;
 159:../source/demod.c **** 			//}
 160:../source/demod.c **** 			if(zero_count <= COMP_THRESHOLD){
 885              		.loc 1 160 18
 886 0104 594B     		ldr	r3, .L83+4
 887 0106 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 888              		.loc 1 160 6
 889 0108 022B     		cmp	r3, #2
 890 010a 12D8     		bhi	.L64
 161:../source/demod.c **** 				data_byte += (1<<bit_count);			//UART IS LSB FIRST. SHIFT THE DATA BIT N BITS AND ADD IT
 891              		.loc 1 161 20
 892 010c 5D4B     		ldr	r3, .L83+28
 893 010e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 894 0110 1A46     		mov	r2, r3
 895 0112 0123     		movs	r3, #1
 896 0114 9340     		lsls	r3, r3, r2
 897              		.loc 1 161 15
 898 0116 DAB2     		uxtb	r2, r3
 899 0118 574B     		ldr	r3, .L83+16
 900 011a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 901 011c 1344     		add	r3, r3, r2
 902 011e DAB2     		uxtb	r2, r3
 903 0120 554B     		ldr	r3, .L83+16
 904 0122 1A70     		strb	r2, [r3]
 162:../source/demod.c **** 				parity ^= LOGIC_1;
 905              		.loc 1 162 12
 906 0124 564B     		ldr	r3, .L83+24
 907 0126 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 908 0128 83F00103 		eor	r3, r3, #1
 909 012c DAB2     		uxtb	r2, r3
 910 012e 544B     		ldr	r3, .L83+24
 911 0130 1A70     		strb	r2, [r3]
 912              	.L64:
 163:../source/demod.c **** 			}
 164:../source/demod.c **** 			zero_count =0;			//Restart counters
 913              		.loc 1 164 15
 914 0132 4E4B     		ldr	r3, .L83+4
 915 0134 0022     		movs	r2, #0
 916 0136 1A70     		strb	r2, [r3]
 165:../source/demod.c **** 			sample_count=0;
 917              		.loc 1 165 16
 918 0138 4D4B     		ldr	r3, .L83+8
 919 013a 0022     		movs	r2, #0
 920 013c 1A70     		strb	r2, [r3]
 166:../source/demod.c **** 			bit_count++;		//add 1 to bit count
 921              		.loc 1 166 13
 922 013e 514B     		ldr	r3, .L83+28
 923 0140 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 924 0142 0133     		adds	r3, r3, #1
 925 0144 DAB2     		uxtb	r2, r3
 926 0146 4F4B     		ldr	r3, .L83+28
 927 0148 1A70     		strb	r2, [r3]
 928              	.L63:
 167:../source/demod.c **** 		}
 168:../source/demod.c **** 
 169:../source/demod.c **** 		if(bit_count == INFO_BIT_NUM){		//if 8 bits of data have been read
 929              		.loc 1 169 16
 930 014a 4E4B     		ldr	r3, .L83+28
 931 014c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 932              		.loc 1 169 5
 933 014e 082B     		cmp	r3, #8
 934 0150 7FD1     		bne	.L79
 170:../source/demod.c **** 			bit_count=0;
 935              		.loc 1 170 13
 936 0152 4C4B     		ldr	r3, .L83+28
 937 0154 0022     		movs	r2, #0
 938 0156 1A70     		strb	r2, [r3]
 171:../source/demod.c **** 			stream_state = PARITY;
 939              		.loc 1 171 17
 940 0158 434B     		ldr	r3, .L83
 941 015a 0322     		movs	r2, #3
 942 015c 1A70     		strb	r2, [r3]
 172:../source/demod.c **** 		}
 173:../source/demod.c **** 
 174:../source/demod.c **** 		break;
 943              		.loc 1 174 3
 944 015e 78E0     		b	.L79
 945              	.L52:
 175:../source/demod.c **** 
 176:../source/demod.c **** 	case PARITY:
 177:../source/demod.c **** 		sample_count++;
 946              		.loc 1 177 15
 947 0160 434B     		ldr	r3, .L83+8
 948 0162 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 949 0164 0133     		adds	r3, r3, #1
 950 0166 DAB2     		uxtb	r2, r3
 951 0168 414B     		ldr	r3, .L83+8
 952 016a 1A70     		strb	r2, [r3]
 178:../source/demod.c **** 		if((sample_count > COMP_WINDOW_LOW) && (sample_count < COMP_WINDOW_HIGH)){		//take the 5 middle s
 953              		.loc 1 178 20
 954 016c 404B     		ldr	r3, .L83+8
 955 016e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 956              		.loc 1 178 5
 957 0170 032B     		cmp	r3, #3
 958 0172 0DD9     		bls	.L66
 959              		.loc 1 178 56 discriminator 1
 960 0174 3E4B     		ldr	r3, .L83+8
 961 0176 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 962              		.loc 1 178 39 discriminator 1
 963 0178 082B     		cmp	r3, #8
 964 017a 09D8     		bhi	.L66
 179:../source/demod.c **** 			if(data_in == LOGIC_0){
 965              		.loc 1 179 6
 966 017c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 967 017e 002B     		cmp	r3, #0
 968 0180 2AD1     		bne	.L68
 180:../source/demod.c **** 				zero_count++;
 969              		.loc 1 180 15
 970 0182 3A4B     		ldr	r3, .L83+4
 971 0184 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 972 0186 0133     		adds	r3, r3, #1
 973 0188 DAB2     		uxtb	r2, r3
 974 018a 384B     		ldr	r3, .L83+4
 975 018c 1A70     		strb	r2, [r3]
 179:../source/demod.c **** 			if(data_in == LOGIC_0){
 976              		.loc 1 179 6
 977 018e 23E0     		b	.L68
 978              	.L66:
 181:../source/demod.c **** 			}
 182:../source/demod.c **** 		}
 183:../source/demod.c **** 		else if(sample_count == OVERSAMPLE_RATE){
 979              		.loc 1 183 24
 980 0190 374B     		ldr	r3, .L83+8
 981 0192 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 982              		.loc 1 183 10
 983 0194 0A2B     		cmp	r3, #10
 984 0196 5ED1     		bne	.L80
 184:../source/demod.c **** 			//XOR with 0 doesn't change the result. Only analyze for 1
 185:../source/demod.c **** 			if(zero_count <= COMP_THRESHOLD){
 985              		.loc 1 185 18
 986 0198 344B     		ldr	r3, .L83+4
 987 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 988              		.loc 1 185 6
 989 019c 022B     		cmp	r3, #2
 990 019e 06D8     		bhi	.L69
 186:../source/demod.c **** 				parity ^= LOGIC_1;
 991              		.loc 1 186 12
 992 01a0 374B     		ldr	r3, .L83+24
 993 01a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 994 01a4 83F00103 		eor	r3, r3, #1
 995 01a8 DAB2     		uxtb	r2, r3
 996 01aa 354B     		ldr	r3, .L83+24
 997 01ac 1A70     		strb	r2, [r3]
 998              	.L69:
 187:../source/demod.c **** 			}
 188:../source/demod.c **** 
 189:../source/demod.c **** 			if(parity == PARITY_VALUE){
 999              		.loc 1 189 14
 1000 01ae 344B     		ldr	r3, .L83+24
 1001 01b0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1002              		.loc 1 189 6
 1003 01b2 012B     		cmp	r3, #1
 1004 01b4 03D1     		bne	.L70
 190:../source/demod.c **** 				error_flag =NO_ERR;				//check for parity
 1005              		.loc 1 190 16
 1006 01b6 2F4B     		ldr	r3, .L83+12
 1007 01b8 0022     		movs	r2, #0
 1008 01ba 1A70     		strb	r2, [r3]
 1009 01bc 02E0     		b	.L71
 1010              	.L70:
 191:../source/demod.c **** 			}
 192:../source/demod.c **** 			else{
 193:../source/demod.c **** 				error_flag =PARITY_ERR;
 1011              		.loc 1 193 16
 1012 01be 2D4B     		ldr	r3, .L83+12
 1013 01c0 0122     		movs	r2, #1
 1014 01c2 1A70     		strb	r2, [r3]
 1015              	.L71:
 194:../source/demod.c **** 			}
 195:../source/demod.c **** 
 196:../source/demod.c **** 			zero_count =0;			//Restart counters
 1016              		.loc 1 196 15
 1017 01c4 294B     		ldr	r3, .L83+4
 1018 01c6 0022     		movs	r2, #0
 1019 01c8 1A70     		strb	r2, [r3]
 197:../source/demod.c **** 			sample_count=0;
 1020              		.loc 1 197 16
 1021 01ca 294B     		ldr	r3, .L83+8
 1022 01cc 0022     		movs	r2, #0
 1023 01ce 1A70     		strb	r2, [r3]
 198:../source/demod.c **** 			stream_state = END;
 1024              		.loc 1 198 17
 1025 01d0 254B     		ldr	r3, .L83
 1026 01d2 0422     		movs	r2, #4
 1027 01d4 1A70     		strb	r2, [r3]
 199:../source/demod.c **** 		}
 200:../source/demod.c **** 
 201:../source/demod.c **** 		break;
 1028              		.loc 1 201 3
 1029 01d6 3EE0     		b	.L80
 1030              	.L68:
 1031 01d8 3DE0     		b	.L80
 1032              	.L50:
 202:../source/demod.c **** 	case END:
 203:../source/demod.c **** 		sample_count++;
 1033              		.loc 1 203 15
 1034 01da 254B     		ldr	r3, .L83+8
 1035 01dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1036 01de 0133     		adds	r3, r3, #1
 1037 01e0 DAB2     		uxtb	r2, r3
 1038 01e2 234B     		ldr	r3, .L83+8
 1039 01e4 1A70     		strb	r2, [r3]
 204:../source/demod.c **** 		if((sample_count > COMP_WINDOW_LOW) && (sample_count < COMP_WINDOW_HIGH)){		//take the 5 middle s
 1040              		.loc 1 204 20
 1041 01e6 224B     		ldr	r3, .L83+8
 1042 01e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1043              		.loc 1 204 5
 1044 01ea 032B     		cmp	r3, #3
 1045 01ec 0DD9     		bls	.L72
 1046              		.loc 1 204 56 discriminator 1
 1047 01ee 204B     		ldr	r3, .L83+8
 1048 01f0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1049              		.loc 1 204 39 discriminator 1
 1050 01f2 082B     		cmp	r3, #8
 1051 01f4 09D8     		bhi	.L72
 205:../source/demod.c **** 			if(data_in == LOGIC_0){
 1052              		.loc 1 205 6
 1053 01f6 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1054 01f8 002B     		cmp	r3, #0
 1055 01fa 25D1     		bne	.L74
 206:../source/demod.c **** 				zero_count++;
 1056              		.loc 1 206 15
 1057 01fc 1B4B     		ldr	r3, .L83+4
 1058 01fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1059 0200 0133     		adds	r3, r3, #1
 1060 0202 DAB2     		uxtb	r2, r3
 1061 0204 194B     		ldr	r3, .L83+4
 1062 0206 1A70     		strb	r2, [r3]
 205:../source/demod.c **** 			if(data_in == LOGIC_0){
 1063              		.loc 1 205 6
 1064 0208 1EE0     		b	.L74
 1065              	.L72:
 207:../source/demod.c **** 			}
 208:../source/demod.c **** 		}
 209:../source/demod.c **** 		else if(sample_count == OVERSAMPLE_RATE){
 1066              		.loc 1 209 24
 1067 020a 194B     		ldr	r3, .L83+8
 1068 020c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1069              		.loc 1 209 10
 1070 020e 0A2B     		cmp	r3, #10
 1071 0210 23D1     		bne	.L81
 210:../source/demod.c **** 			if(zero_count > COMP_THRESHOLD){			//END BIT SHOULD BE 1.
 1072              		.loc 1 210 18
 1073 0212 164B     		ldr	r3, .L83+4
 1074 0214 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1075              		.loc 1 210 6
 1076 0216 022B     		cmp	r3, #2
 1077 0218 05D9     		bls	.L75
 211:../source/demod.c **** 				error_flag += END_ERR;					//By adding, if there was a parity error it will still show, because
 1078              		.loc 1 211 16
 1079 021a 164B     		ldr	r3, .L83+12
 1080 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1081 021e 0233     		adds	r3, r3, #2
 1082 0220 DAB2     		uxtb	r2, r3
 1083 0222 144B     		ldr	r3, .L83+12
 1084 0224 1A70     		strb	r2, [r3]
 1085              	.L75:
 212:../source/demod.c **** 			}
 213:../source/demod.c **** 			zero_count =0;			//Restart counters
 1086              		.loc 1 213 15
 1087 0226 114B     		ldr	r3, .L83+4
 1088 0228 0022     		movs	r2, #0
 1089 022a 1A70     		strb	r2, [r3]
 214:../source/demod.c **** 			sample_count=0;
 1090              		.loc 1 214 16
 1091 022c 104B     		ldr	r3, .L83+8
 1092 022e 0022     		movs	r2, #0
 1093 0230 1A70     		strb	r2, [r3]
 215:../source/demod.c **** 			stream_state = IDLE;
 1094              		.loc 1 215 17
 1095 0232 0D4B     		ldr	r3, .L83
 1096 0234 0022     		movs	r2, #0
 1097 0236 1A70     		strb	r2, [r3]
 216:../source/demod.c **** 			if(error_flag == NO_ERR){
 1098              		.loc 1 216 18
 1099 0238 0E4B     		ldr	r3, .L83+12
 1100 023a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1101              		.loc 1 216 6
 1102 023c 002B     		cmp	r3, #0
 1103 023e 0CD1     		bne	.L81
 217:../source/demod.c **** 				data_ready = true;
 1104              		.loc 1 217 16
 1105 0240 0E4B     		ldr	r3, .L83+20
 1106 0242 0122     		movs	r2, #1
 1107 0244 1A70     		strb	r2, [r3]
 218:../source/demod.c **** 			}
 219:../source/demod.c **** 		}
 220:../source/demod.c **** 		break;
 1108              		.loc 1 220 3
 1109 0246 08E0     		b	.L81
 1110              	.L74:
 1111 0248 07E0     		b	.L81
 1112              	.L77:
 123:../source/demod.c **** 	case CHECK_START:
 1113              		.loc 1 123 3
 1114 024a 00BF     		nop
 1115 024c 06E0     		b	.L76
 1116              	.L78:
 145:../source/demod.c **** 
 1117              		.loc 1 145 3
 1118 024e 00BF     		nop
 1119 0250 04E0     		b	.L76
 1120              	.L79:
 174:../source/demod.c **** 
 1121              		.loc 1 174 3
 1122 0252 00BF     		nop
 1123 0254 02E0     		b	.L76
 1124              	.L80:
 201:../source/demod.c **** 	case END:
 1125              		.loc 1 201 3
 1126 0256 00BF     		nop
 1127 0258 00E0     		b	.L76
 1128              	.L81:
 1129              		.loc 1 220 3
 1130 025a 00BF     		nop
 1131              	.L76:
 221:../source/demod.c **** 
 222:../source/demod.c **** 	default:
 223:../source/demod.c **** 
 224:../source/demod.c **** 	}
 225:../source/demod.c **** }
 1132              		.loc 1 225 1
 1133 025c 00BF     		nop
 1134 025e 0C37     		adds	r7, r7, #12
 1135              		.cfi_def_cfa_offset 4
 1136 0260 BD46     		mov	sp, r7
 1137              		.cfi_def_cfa_register 13
 1138              		@ sp needed
 1139 0262 5DF8047B 		ldr	r7, [sp], #4
 1140              		.cfi_restore 7
 1141              		.cfi_def_cfa_offset 0
 1142 0266 7047     		bx	lr
 1143              	.L84:
 1144              		.align	2
 1145              	.L83:
 1146 0268 00000000 		.word	stream_state
 1147 026c 00000000 		.word	zero_count
 1148 0270 00000000 		.word	sample_count
 1149 0274 00000000 		.word	error_flag
 1150 0278 00000000 		.word	data_byte
 1151 027c 00000000 		.word	data_ready
 1152 0280 00000000 		.word	parity
 1153 0284 00000000 		.word	bit_count
 1154              		.cfi_endproc
 1155              	.LFE129:
 1157              		.text
 1158              	.Letext0:
 1159              		.file 2 "C:/nxp/MCUXpressoIDE_11.10.0_3148/ide/plugins/com.nxp.mcuxpresso.tools.win32_11.10.0.2023
 1160              		.file 3 "../source/demod.h"
 1161              		.file 4 "../source/ADC.h"
DEFINED SYMBOLS
                            *ABS*:00000000 demod.c
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:21     .rodata.coefs:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:24     .rodata.coefs:00000000 coefs
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:44     .bss.raw_inputs:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:47     .bss.raw_inputs:00000000 raw_inputs
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:52     .bss.write_index_raw:00000000 write_index_raw
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:53     .bss.write_index_raw:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:55     .bss.inputs:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:58     .bss.inputs:00000000 inputs
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:61     .bss.demod_bitstream:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:64     .bss.demod_bitstream:00000000 demod_bitstream
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:69     .bss.write_index:00000000 write_index
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:70     .bss.write_index:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:74     .bss.read_index:00000000 read_index
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:75     .bss.read_index:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:77     .bss.demod_write_index:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:80     .bss.demod_write_index:00000000 demod_write_index
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:85     .bss.current_state:00000000 current_state
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:86     .bss.current_state:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:88     .bss.unfiltered_data_count:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:91     .bss.unfiltered_data_count:00000000 unfiltered_data_count
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:96     .bss.stream_state:00000000 stream_state
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:97     .bss.stream_state:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:101    .bss.sample_count:00000000 sample_count
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:102    .bss.sample_count:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:106    .bss.bit_count:00000000 bit_count
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:107    .bss.bit_count:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:111    .bss.zero_count:00000000 zero_count
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:112    .bss.zero_count:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:116    .bss.parity:00000000 parity
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:117    .bss.parity:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:121    .bss.error_flag:00000000 error_flag
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:122    .bss.error_flag:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:126    .bss.data_byte:00000000 data_byte
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:127    .bss.data_byte:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:131    .bss.data_ready:00000000 data_ready
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:132    .bss.data_ready:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:134    .text.demod_init:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:140    .text.demod_init:00000000 demod_init
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:173    .text.demod_init:0000001c $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:438    .text.add_data:00000000 add_data
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:179    .text.filter_data:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:185    .text.filter_data:00000000 filter_data
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:708    .text.data_fsm:00000000 data_fsm
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:416    .text.filter_data:00000158 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:432    .text.add_data:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:572    .text.add_data:000000c0 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:583    .text.get_unfiltered_count:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:589    .text.get_unfiltered_count:00000000 get_unfiltered_count
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:616    .text.get_unfiltered_count:00000014 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:621    .text.is_data_ready:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:627    .text.is_data_ready:00000000 is_data_ready
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:654    .text.is_data_ready:00000014 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:659    .text.get_data_byte:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:665    .text.get_data_byte:00000000 get_data_byte
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:696    .text.get_data_byte:00000018 $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:702    .text.data_fsm:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:733    .text.data_fsm:0000001c $d
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:738    .text.data_fsm:00000030 $t
C:\Users\casas\AppData\Local\Temp\ccEKDNTY.s:1146   .text.data_fsm:00000268 $d
                           .group:00000000 wm4.0.1dcc4abb7b230aa9a5dadaa004994123
                           .group:00000000 wm4.redlib_version.h.25.d2e865e22c1528eeae52d7d98a50fff1
                           .group:00000000 wm4.libconfigarm.h.19.34723c94cbd19598192aa6b1e87fca41
                           .group:00000000 wm4.stdint.h.31.58198de4ea930fb897655479091e17c7
                           .group:00000000 wm4.stdbool.h.15.fddf1cb2402fd739d8e2516677869231
                           .group:00000000 wm4.demod.h.6.0f610abc8f1690c7678312b865d83aab
                           .group:00000000 wm4.fsl_device_registers.h.32.f10b25a7fd7ad45b9a40904c33f28816
                           .group:00000000 wm4.MK64F12.h.105.e884e5c80776532d2ec0f5c21e2ea7cb
                           .group:00000000 wm4.core_cm4.h.42.42f38327ee0970d80f60117e6a3ba2b0
                           .group:00000000 wm4.cmsis_gcc.h.36.39970cb43ce4b53c82644a1f9bc2eab9
                           .group:00000000 wm4.core_cm4.h.223.7b48c9958ef5573320c4765074c8b0ce
                           .group:00000000 wm4.system_MK64F12.h.109.c6d21568e03be21b21c922eb7345d6e3
                           .group:00000000 wm4.MK64F12.h.475.9475ab1c0ace29480f556d9316131319
                           .group:00000000 wm4.MK64F12_features.h.92.512cea46d882153168efeec0bc3a9da7
                           .group:00000000 wm4.hardware.h.28.9c5eae6fa67a41a2ef974419a839913d

UNDEFINED SYMBOLS
setADCIRQ
