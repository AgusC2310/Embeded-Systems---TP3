   1              		.cpu cortex-m4
   2              		.arch armv7e-m
   3              		.fpu fpv4-sp-d16
   4              		.eabi_attribute 27, 1
   5              		.eabi_attribute 28, 1
   6              		.eabi_attribute 20, 1
   7              		.eabi_attribute 21, 1
   8              		.eabi_attribute 23, 3
   9              		.eabi_attribute 24, 1
  10              		.eabi_attribute 25, 1
  11              		.eabi_attribute 26, 1
  12              		.eabi_attribute 30, 6
  13              		.eabi_attribute 34, 1
  14              		.eabi_attribute 18, 4
  15              		.file	"uart2.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.file 1 "../source/uart2.c"
  20              		.section	.text.NVIC_EnableIRQ,"ax",%progbits
  21              		.align	1
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  26              	NVIC_EnableIRQ:
  27              	.LFB108:
  28              		.file 2 "../source/../CMSIS/core_cm4.h"
   1:../source/../CMSIS/core_cm4.h **** /**************************************************************************//**
   2:../source/../CMSIS/core_cm4.h ****  * @file     core_cm4.h
   3:../source/../CMSIS/core_cm4.h ****  * @brief    CMSIS Cortex-M4 Core Peripheral Access Layer Header File
   4:../source/../CMSIS/core_cm4.h ****  * @version  V4.30
   5:../source/../CMSIS/core_cm4.h ****  * @date     20. October 2015
   6:../source/../CMSIS/core_cm4.h ****  ******************************************************************************/
   7:../source/../CMSIS/core_cm4.h **** /* Copyright (c) 2009 - 2015 ARM LIMITED
   8:../source/../CMSIS/core_cm4.h **** 
   9:../source/../CMSIS/core_cm4.h ****    All rights reserved.
  10:../source/../CMSIS/core_cm4.h ****    Redistribution and use in source and binary forms, with or without
  11:../source/../CMSIS/core_cm4.h ****    modification, are permitted provided that the following conditions are met:
  12:../source/../CMSIS/core_cm4.h ****    - Redistributions of source code must retain the above copyright
  13:../source/../CMSIS/core_cm4.h ****      notice, this list of conditions and the following disclaimer.
  14:../source/../CMSIS/core_cm4.h ****    - Redistributions in binary form must reproduce the above copyright
  15:../source/../CMSIS/core_cm4.h ****      notice, this list of conditions and the following disclaimer in the
  16:../source/../CMSIS/core_cm4.h ****      documentation and/or other materials provided with the distribution.
  17:../source/../CMSIS/core_cm4.h ****    - Neither the name of ARM nor the names of its contributors may be used
  18:../source/../CMSIS/core_cm4.h ****      to endorse or promote products derived from this software without
  19:../source/../CMSIS/core_cm4.h ****      specific prior written permission.
  20:../source/../CMSIS/core_cm4.h ****    *
  21:../source/../CMSIS/core_cm4.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  22:../source/../CMSIS/core_cm4.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  23:../source/../CMSIS/core_cm4.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  24:../source/../CMSIS/core_cm4.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  25:../source/../CMSIS/core_cm4.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  26:../source/../CMSIS/core_cm4.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  27:../source/../CMSIS/core_cm4.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  28:../source/../CMSIS/core_cm4.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  29:../source/../CMSIS/core_cm4.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  30:../source/../CMSIS/core_cm4.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  31:../source/../CMSIS/core_cm4.h ****    POSSIBILITY OF SUCH DAMAGE.
  32:../source/../CMSIS/core_cm4.h ****    ---------------------------------------------------------------------------*/
  33:../source/../CMSIS/core_cm4.h **** 
  34:../source/../CMSIS/core_cm4.h **** 
  35:../source/../CMSIS/core_cm4.h **** #if   defined ( __ICCARM__ )
  36:../source/../CMSIS/core_cm4.h ****  #pragma system_include         /* treat file as system include file for MISRA check */
  37:../source/../CMSIS/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  38:../source/../CMSIS/core_cm4.h ****   #pragma clang system_header   /* treat file as system include file */
  39:../source/../CMSIS/core_cm4.h **** #endif
  40:../source/../CMSIS/core_cm4.h **** 
  41:../source/../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_GENERIC
  42:../source/../CMSIS/core_cm4.h **** #define __CORE_CM4_H_GENERIC
  43:../source/../CMSIS/core_cm4.h **** 
  44:../source/../CMSIS/core_cm4.h **** #include <stdint.h>
  45:../source/../CMSIS/core_cm4.h **** 
  46:../source/../CMSIS/core_cm4.h **** #ifdef __cplusplus
  47:../source/../CMSIS/core_cm4.h ****  extern "C" {
  48:../source/../CMSIS/core_cm4.h **** #endif
  49:../source/../CMSIS/core_cm4.h **** 
  50:../source/../CMSIS/core_cm4.h **** /**
  51:../source/../CMSIS/core_cm4.h ****   \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  52:../source/../CMSIS/core_cm4.h ****   CMSIS violates the following MISRA-C:2004 rules:
  53:../source/../CMSIS/core_cm4.h **** 
  54:../source/../CMSIS/core_cm4.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  55:../source/../CMSIS/core_cm4.h ****      Function definitions in header files are used to allow 'inlining'.
  56:../source/../CMSIS/core_cm4.h **** 
  57:../source/../CMSIS/core_cm4.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  58:../source/../CMSIS/core_cm4.h ****      Unions are used for effective representation of core registers.
  59:../source/../CMSIS/core_cm4.h **** 
  60:../source/../CMSIS/core_cm4.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  61:../source/../CMSIS/core_cm4.h ****      Function-like macros are used to allow more efficient code.
  62:../source/../CMSIS/core_cm4.h ****  */
  63:../source/../CMSIS/core_cm4.h **** 
  64:../source/../CMSIS/core_cm4.h **** 
  65:../source/../CMSIS/core_cm4.h **** /*******************************************************************************
  66:../source/../CMSIS/core_cm4.h ****  *                 CMSIS definitions
  67:../source/../CMSIS/core_cm4.h ****  ******************************************************************************/
  68:../source/../CMSIS/core_cm4.h **** /**
  69:../source/../CMSIS/core_cm4.h ****   \ingroup Cortex_M4
  70:../source/../CMSIS/core_cm4.h ****   @{
  71:../source/../CMSIS/core_cm4.h ****  */
  72:../source/../CMSIS/core_cm4.h **** 
  73:../source/../CMSIS/core_cm4.h **** /*  CMSIS CM4 definitions */
  74:../source/../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_MAIN  (0x04U)                                      /*!< [31:16] CMSIS H
  75:../source/../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION_SUB   (0x1EU)                                      /*!< [15:0]  CMSIS H
  76:../source/../CMSIS/core_cm4.h **** #define __CM4_CMSIS_VERSION       ((__CM4_CMSIS_VERSION_MAIN << 16U) | \
  77:../source/../CMSIS/core_cm4.h ****                                     __CM4_CMSIS_VERSION_SUB           )        /*!< CMSIS HAL versi
  78:../source/../CMSIS/core_cm4.h **** 
  79:../source/../CMSIS/core_cm4.h **** #define __CORTEX_M                (0x04U)                                      /*!< Cortex-M Core *
  80:../source/../CMSIS/core_cm4.h **** 
  81:../source/../CMSIS/core_cm4.h **** 
  82:../source/../CMSIS/core_cm4.h **** #if   defined ( __CC_ARM )
  83:../source/../CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  84:../source/../CMSIS/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  85:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  86:../source/../CMSIS/core_cm4.h **** 
  87:../source/../CMSIS/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
  88:../source/../CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  89:../source/../CMSIS/core_cm4.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  90:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static __inline
  91:../source/../CMSIS/core_cm4.h **** 
  92:../source/../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
  93:../source/../CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  94:../source/../CMSIS/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  95:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
  96:../source/../CMSIS/core_cm4.h **** 
  97:../source/../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
  98:../source/../CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  99:../source/../CMSIS/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
 100:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
 101:../source/../CMSIS/core_cm4.h **** 
 102:../source/../CMSIS/core_cm4.h **** #elif defined ( __TMS470__ )
 103:../source/../CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
 104:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
 105:../source/../CMSIS/core_cm4.h **** 
 106:../source/../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 107:../source/../CMSIS/core_cm4.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
 108:../source/../CMSIS/core_cm4.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
 109:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
 110:../source/../CMSIS/core_cm4.h **** 
 111:../source/../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 112:../source/../CMSIS/core_cm4.h ****   #define __packed
 113:../source/../CMSIS/core_cm4.h ****   #define __ASM            _asm                                      /*!< asm keyword for COSMIC Co
 114:../source/../CMSIS/core_cm4.h ****   #define __INLINE         inline                                    /*!< inline keyword for COSMIC
 115:../source/../CMSIS/core_cm4.h ****   #define __STATIC_INLINE  static inline
 116:../source/../CMSIS/core_cm4.h **** 
 117:../source/../CMSIS/core_cm4.h **** #else
 118:../source/../CMSIS/core_cm4.h ****   #error Unknown compiler
 119:../source/../CMSIS/core_cm4.h **** #endif
 120:../source/../CMSIS/core_cm4.h **** 
 121:../source/../CMSIS/core_cm4.h **** /** __FPU_USED indicates whether an FPU is used or not.
 122:../source/../CMSIS/core_cm4.h ****     For this, __FPU_PRESENT has to be checked prior to making use of FPU specific registers and fun
 123:../source/../CMSIS/core_cm4.h **** */
 124:../source/../CMSIS/core_cm4.h **** #if defined ( __CC_ARM )
 125:../source/../CMSIS/core_cm4.h ****   #if defined __TARGET_FPU_VFP
 126:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 127:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 128:../source/../CMSIS/core_cm4.h ****     #else
 129:../source/../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 130:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 131:../source/../CMSIS/core_cm4.h ****     #endif
 132:../source/../CMSIS/core_cm4.h ****   #else
 133:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 134:../source/../CMSIS/core_cm4.h ****   #endif
 135:../source/../CMSIS/core_cm4.h **** 
 136:../source/../CMSIS/core_cm4.h **** #elif defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050)
 137:../source/../CMSIS/core_cm4.h ****   #if defined __ARM_PCS_VFP
 138:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1)
 139:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 140:../source/../CMSIS/core_cm4.h ****     #else
 141:../source/../CMSIS/core_cm4.h ****       #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESEN
 142:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 143:../source/../CMSIS/core_cm4.h ****     #endif
 144:../source/../CMSIS/core_cm4.h ****   #else
 145:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 146:../source/../CMSIS/core_cm4.h ****   #endif
 147:../source/../CMSIS/core_cm4.h **** 
 148:../source/../CMSIS/core_cm4.h **** #elif defined ( __GNUC__ )
 149:../source/../CMSIS/core_cm4.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 150:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 151:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 152:../source/../CMSIS/core_cm4.h ****     #else
 153:../source/../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 154:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 155:../source/../CMSIS/core_cm4.h ****     #endif
 156:../source/../CMSIS/core_cm4.h ****   #else
 157:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 158:../source/../CMSIS/core_cm4.h ****   #endif
 159:../source/../CMSIS/core_cm4.h **** 
 160:../source/../CMSIS/core_cm4.h **** #elif defined ( __ICCARM__ )
 161:../source/../CMSIS/core_cm4.h ****   #if defined __ARMVFP__
 162:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 163:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 164:../source/../CMSIS/core_cm4.h ****     #else
 165:../source/../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 166:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 167:../source/../CMSIS/core_cm4.h ****     #endif
 168:../source/../CMSIS/core_cm4.h ****   #else
 169:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 170:../source/../CMSIS/core_cm4.h ****   #endif
 171:../source/../CMSIS/core_cm4.h **** 
 172:../source/../CMSIS/core_cm4.h **** #elif defined ( __TMS470__ )
 173:../source/../CMSIS/core_cm4.h ****   #if defined __TI_VFP_SUPPORT__
 174:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 175:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 176:../source/../CMSIS/core_cm4.h ****     #else
 177:../source/../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 178:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 179:../source/../CMSIS/core_cm4.h ****     #endif
 180:../source/../CMSIS/core_cm4.h ****   #else
 181:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 182:../source/../CMSIS/core_cm4.h ****   #endif
 183:../source/../CMSIS/core_cm4.h **** 
 184:../source/../CMSIS/core_cm4.h **** #elif defined ( __TASKING__ )
 185:../source/../CMSIS/core_cm4.h ****   #if defined __FPU_VFP__
 186:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 187:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 188:../source/../CMSIS/core_cm4.h ****     #else
 189:../source/../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 190:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 191:../source/../CMSIS/core_cm4.h ****     #endif
 192:../source/../CMSIS/core_cm4.h ****   #else
 193:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 194:../source/../CMSIS/core_cm4.h ****   #endif
 195:../source/../CMSIS/core_cm4.h **** 
 196:../source/../CMSIS/core_cm4.h **** #elif defined ( __CSMC__ )
 197:../source/../CMSIS/core_cm4.h ****   #if ( __CSMC__ & 0x400U)
 198:../source/../CMSIS/core_cm4.h ****     #if (__FPU_PRESENT == 1U)
 199:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       1U
 200:../source/../CMSIS/core_cm4.h ****     #else
 201:../source/../CMSIS/core_cm4.h ****       #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 202:../source/../CMSIS/core_cm4.h ****       #define __FPU_USED       0U
 203:../source/../CMSIS/core_cm4.h ****     #endif
 204:../source/../CMSIS/core_cm4.h ****   #else
 205:../source/../CMSIS/core_cm4.h ****     #define __FPU_USED         0U
 206:../source/../CMSIS/core_cm4.h ****   #endif
 207:../source/../CMSIS/core_cm4.h **** 
 208:../source/../CMSIS/core_cm4.h **** #endif
 209:../source/../CMSIS/core_cm4.h **** 
 210:../source/../CMSIS/core_cm4.h **** #include "core_cmInstr.h"                /* Core Instruction Access */
 211:../source/../CMSIS/core_cm4.h **** #include "core_cmFunc.h"                 /* Core Function Access */
 212:../source/../CMSIS/core_cm4.h **** #include "core_cmSimd.h"                 /* Compiler specific SIMD Intrinsics */
 213:../source/../CMSIS/core_cm4.h **** 
 214:../source/../CMSIS/core_cm4.h **** #ifdef __cplusplus
 215:../source/../CMSIS/core_cm4.h **** }
 216:../source/../CMSIS/core_cm4.h **** #endif
 217:../source/../CMSIS/core_cm4.h **** 
 218:../source/../CMSIS/core_cm4.h **** #endif /* __CORE_CM4_H_GENERIC */
 219:../source/../CMSIS/core_cm4.h **** 
 220:../source/../CMSIS/core_cm4.h **** #ifndef __CMSIS_GENERIC
 221:../source/../CMSIS/core_cm4.h **** 
 222:../source/../CMSIS/core_cm4.h **** #ifndef __CORE_CM4_H_DEPENDANT
 223:../source/../CMSIS/core_cm4.h **** #define __CORE_CM4_H_DEPENDANT
 224:../source/../CMSIS/core_cm4.h **** 
 225:../source/../CMSIS/core_cm4.h **** #ifdef __cplusplus
 226:../source/../CMSIS/core_cm4.h ****  extern "C" {
 227:../source/../CMSIS/core_cm4.h **** #endif
 228:../source/../CMSIS/core_cm4.h **** 
 229:../source/../CMSIS/core_cm4.h **** /* check device defines and use defaults */
 230:../source/../CMSIS/core_cm4.h **** #if defined __CHECK_DEVICE_DEFINES
 231:../source/../CMSIS/core_cm4.h ****   #ifndef __CM4_REV
 232:../source/../CMSIS/core_cm4.h ****     #define __CM4_REV               0x0000U
 233:../source/../CMSIS/core_cm4.h ****     #warning "__CM4_REV not defined in device header file; using default!"
 234:../source/../CMSIS/core_cm4.h ****   #endif
 235:../source/../CMSIS/core_cm4.h **** 
 236:../source/../CMSIS/core_cm4.h ****   #ifndef __FPU_PRESENT
 237:../source/../CMSIS/core_cm4.h ****     #define __FPU_PRESENT             0U
 238:../source/../CMSIS/core_cm4.h ****     #warning "__FPU_PRESENT not defined in device header file; using default!"
 239:../source/../CMSIS/core_cm4.h ****   #endif
 240:../source/../CMSIS/core_cm4.h **** 
 241:../source/../CMSIS/core_cm4.h ****   #ifndef __MPU_PRESENT
 242:../source/../CMSIS/core_cm4.h ****     #define __MPU_PRESENT             0U
 243:../source/../CMSIS/core_cm4.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 244:../source/../CMSIS/core_cm4.h ****   #endif
 245:../source/../CMSIS/core_cm4.h **** 
 246:../source/../CMSIS/core_cm4.h ****   #ifndef __NVIC_PRIO_BITS
 247:../source/../CMSIS/core_cm4.h ****     #define __NVIC_PRIO_BITS          4U
 248:../source/../CMSIS/core_cm4.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 249:../source/../CMSIS/core_cm4.h ****   #endif
 250:../source/../CMSIS/core_cm4.h **** 
 251:../source/../CMSIS/core_cm4.h ****   #ifndef __Vendor_SysTickConfig
 252:../source/../CMSIS/core_cm4.h ****     #define __Vendor_SysTickConfig    0U
 253:../source/../CMSIS/core_cm4.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 254:../source/../CMSIS/core_cm4.h ****   #endif
 255:../source/../CMSIS/core_cm4.h **** #endif
 256:../source/../CMSIS/core_cm4.h **** 
 257:../source/../CMSIS/core_cm4.h **** /* IO definitions (access restrictions to peripheral registers) */
 258:../source/../CMSIS/core_cm4.h **** /**
 259:../source/../CMSIS/core_cm4.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 260:../source/../CMSIS/core_cm4.h **** 
 261:../source/../CMSIS/core_cm4.h ****     <strong>IO Type Qualifiers</strong> are used
 262:../source/../CMSIS/core_cm4.h ****     \li to specify the access to peripheral variables.
 263:../source/../CMSIS/core_cm4.h ****     \li for automatic generation of peripheral register debug information.
 264:../source/../CMSIS/core_cm4.h **** */
 265:../source/../CMSIS/core_cm4.h **** #ifdef __cplusplus
 266:../source/../CMSIS/core_cm4.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions */
 267:../source/../CMSIS/core_cm4.h **** #else
 268:../source/../CMSIS/core_cm4.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions */
 269:../source/../CMSIS/core_cm4.h **** #endif
 270:../source/../CMSIS/core_cm4.h **** #define     __O     volatile             /*!< Defines 'write only' permissions */
 271:../source/../CMSIS/core_cm4.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions */
 272:../source/../CMSIS/core_cm4.h **** 
 273:../source/../CMSIS/core_cm4.h **** /* following defines should be used for structure members */
 274:../source/../CMSIS/core_cm4.h **** #define     __IM     volatile const      /*! Defines 'read only' structure member permissions */
 275:../source/../CMSIS/core_cm4.h **** #define     __OM     volatile            /*! Defines 'write only' structure member permissions */
 276:../source/../CMSIS/core_cm4.h **** #define     __IOM    volatile            /*! Defines 'read / write' structure member permissions */
 277:../source/../CMSIS/core_cm4.h **** 
 278:../source/../CMSIS/core_cm4.h **** /*@} end of group Cortex_M4 */
 279:../source/../CMSIS/core_cm4.h **** 
 280:../source/../CMSIS/core_cm4.h **** 
 281:../source/../CMSIS/core_cm4.h **** 
 282:../source/../CMSIS/core_cm4.h **** /*******************************************************************************
 283:../source/../CMSIS/core_cm4.h ****  *                 Register Abstraction
 284:../source/../CMSIS/core_cm4.h ****   Core Register contain:
 285:../source/../CMSIS/core_cm4.h ****   - Core Register
 286:../source/../CMSIS/core_cm4.h ****   - Core NVIC Register
 287:../source/../CMSIS/core_cm4.h ****   - Core SCB Register
 288:../source/../CMSIS/core_cm4.h ****   - Core SysTick Register
 289:../source/../CMSIS/core_cm4.h ****   - Core Debug Register
 290:../source/../CMSIS/core_cm4.h ****   - Core MPU Register
 291:../source/../CMSIS/core_cm4.h ****   - Core FPU Register
 292:../source/../CMSIS/core_cm4.h ****  ******************************************************************************/
 293:../source/../CMSIS/core_cm4.h **** /**
 294:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_core_register Defines and Type Definitions
 295:../source/../CMSIS/core_cm4.h ****   \brief Type definitions and defines for Cortex-M processor based devices.
 296:../source/../CMSIS/core_cm4.h **** */
 297:../source/../CMSIS/core_cm4.h **** 
 298:../source/../CMSIS/core_cm4.h **** /**
 299:../source/../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 300:../source/../CMSIS/core_cm4.h ****   \defgroup   CMSIS_CORE  Status and Control Registers
 301:../source/../CMSIS/core_cm4.h ****   \brief      Core Register type definitions.
 302:../source/../CMSIS/core_cm4.h ****   @{
 303:../source/../CMSIS/core_cm4.h ****  */
 304:../source/../CMSIS/core_cm4.h **** 
 305:../source/../CMSIS/core_cm4.h **** /**
 306:../source/../CMSIS/core_cm4.h ****   \brief  Union type to access the Application Program Status Register (APSR).
 307:../source/../CMSIS/core_cm4.h ****  */
 308:../source/../CMSIS/core_cm4.h **** typedef union
 309:../source/../CMSIS/core_cm4.h **** {
 310:../source/../CMSIS/core_cm4.h ****   struct
 311:../source/../CMSIS/core_cm4.h ****   {
 312:../source/../CMSIS/core_cm4.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved */
 313:../source/../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 314:../source/../CMSIS/core_cm4.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved */
 315:../source/../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 316:../source/../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 317:../source/../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 318:../source/../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 319:../source/../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 320:../source/../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 321:../source/../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 322:../source/../CMSIS/core_cm4.h **** } APSR_Type;
 323:../source/../CMSIS/core_cm4.h **** 
 324:../source/../CMSIS/core_cm4.h **** /* APSR Register Definitions */
 325:../source/../CMSIS/core_cm4.h **** #define APSR_N_Pos                         31U                                            /*!< APSR
 326:../source/../CMSIS/core_cm4.h **** #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR
 327:../source/../CMSIS/core_cm4.h **** 
 328:../source/../CMSIS/core_cm4.h **** #define APSR_Z_Pos                         30U                                            /*!< APSR
 329:../source/../CMSIS/core_cm4.h **** #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR
 330:../source/../CMSIS/core_cm4.h **** 
 331:../source/../CMSIS/core_cm4.h **** #define APSR_C_Pos                         29U                                            /*!< APSR
 332:../source/../CMSIS/core_cm4.h **** #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR
 333:../source/../CMSIS/core_cm4.h **** 
 334:../source/../CMSIS/core_cm4.h **** #define APSR_V_Pos                         28U                                            /*!< APSR
 335:../source/../CMSIS/core_cm4.h **** #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR
 336:../source/../CMSIS/core_cm4.h **** 
 337:../source/../CMSIS/core_cm4.h **** #define APSR_Q_Pos                         27U                                            /*!< APSR
 338:../source/../CMSIS/core_cm4.h **** #define APSR_Q_Msk                         (1UL << APSR_Q_Pos)                            /*!< APSR
 339:../source/../CMSIS/core_cm4.h **** 
 340:../source/../CMSIS/core_cm4.h **** #define APSR_GE_Pos                        16U                                            /*!< APSR
 341:../source/../CMSIS/core_cm4.h **** #define APSR_GE_Msk                        (0xFUL << APSR_GE_Pos)                         /*!< APSR
 342:../source/../CMSIS/core_cm4.h **** 
 343:../source/../CMSIS/core_cm4.h **** 
 344:../source/../CMSIS/core_cm4.h **** /**
 345:../source/../CMSIS/core_cm4.h ****   \brief  Union type to access the Interrupt Program Status Register (IPSR).
 346:../source/../CMSIS/core_cm4.h ****  */
 347:../source/../CMSIS/core_cm4.h **** typedef union
 348:../source/../CMSIS/core_cm4.h **** {
 349:../source/../CMSIS/core_cm4.h ****   struct
 350:../source/../CMSIS/core_cm4.h ****   {
 351:../source/../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 352:../source/../CMSIS/core_cm4.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
 353:../source/../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 354:../source/../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 355:../source/../CMSIS/core_cm4.h **** } IPSR_Type;
 356:../source/../CMSIS/core_cm4.h **** 
 357:../source/../CMSIS/core_cm4.h **** /* IPSR Register Definitions */
 358:../source/../CMSIS/core_cm4.h **** #define IPSR_ISR_Pos                        0U                                            /*!< IPSR
 359:../source/../CMSIS/core_cm4.h **** #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR
 360:../source/../CMSIS/core_cm4.h **** 
 361:../source/../CMSIS/core_cm4.h **** 
 362:../source/../CMSIS/core_cm4.h **** /**
 363:../source/../CMSIS/core_cm4.h ****   \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 364:../source/../CMSIS/core_cm4.h ****  */
 365:../source/../CMSIS/core_cm4.h **** typedef union
 366:../source/../CMSIS/core_cm4.h **** {
 367:../source/../CMSIS/core_cm4.h ****   struct
 368:../source/../CMSIS/core_cm4.h ****   {
 369:../source/../CMSIS/core_cm4.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
 370:../source/../CMSIS/core_cm4.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved */
 371:../source/../CMSIS/core_cm4.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags */
 372:../source/../CMSIS/core_cm4.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved */
 373:../source/../CMSIS/core_cm4.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
 374:../source/../CMSIS/core_cm4.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0) */
 375:../source/../CMSIS/core_cm4.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag */
 376:../source/../CMSIS/core_cm4.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
 377:../source/../CMSIS/core_cm4.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
 378:../source/../CMSIS/core_cm4.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
 379:../source/../CMSIS/core_cm4.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
 380:../source/../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 381:../source/../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 382:../source/../CMSIS/core_cm4.h **** } xPSR_Type;
 383:../source/../CMSIS/core_cm4.h **** 
 384:../source/../CMSIS/core_cm4.h **** /* xPSR Register Definitions */
 385:../source/../CMSIS/core_cm4.h **** #define xPSR_N_Pos                         31U                                            /*!< xPSR
 386:../source/../CMSIS/core_cm4.h **** #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR
 387:../source/../CMSIS/core_cm4.h **** 
 388:../source/../CMSIS/core_cm4.h **** #define xPSR_Z_Pos                         30U                                            /*!< xPSR
 389:../source/../CMSIS/core_cm4.h **** #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR
 390:../source/../CMSIS/core_cm4.h **** 
 391:../source/../CMSIS/core_cm4.h **** #define xPSR_C_Pos                         29U                                            /*!< xPSR
 392:../source/../CMSIS/core_cm4.h **** #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR
 393:../source/../CMSIS/core_cm4.h **** 
 394:../source/../CMSIS/core_cm4.h **** #define xPSR_V_Pos                         28U                                            /*!< xPSR
 395:../source/../CMSIS/core_cm4.h **** #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR
 396:../source/../CMSIS/core_cm4.h **** 
 397:../source/../CMSIS/core_cm4.h **** #define xPSR_Q_Pos                         27U                                            /*!< xPSR
 398:../source/../CMSIS/core_cm4.h **** #define xPSR_Q_Msk                         (1UL << xPSR_Q_Pos)                            /*!< xPSR
 399:../source/../CMSIS/core_cm4.h **** 
 400:../source/../CMSIS/core_cm4.h **** #define xPSR_IT_Pos                        25U                                            /*!< xPSR
 401:../source/../CMSIS/core_cm4.h **** #define xPSR_IT_Msk                        (3UL << xPSR_IT_Pos)                           /*!< xPSR
 402:../source/../CMSIS/core_cm4.h **** 
 403:../source/../CMSIS/core_cm4.h **** #define xPSR_T_Pos                         24U                                            /*!< xPSR
 404:../source/../CMSIS/core_cm4.h **** #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR
 405:../source/../CMSIS/core_cm4.h **** 
 406:../source/../CMSIS/core_cm4.h **** #define xPSR_GE_Pos                        16U                                            /*!< xPSR
 407:../source/../CMSIS/core_cm4.h **** #define xPSR_GE_Msk                        (0xFUL << xPSR_GE_Pos)                         /*!< xPSR
 408:../source/../CMSIS/core_cm4.h **** 
 409:../source/../CMSIS/core_cm4.h **** #define xPSR_ISR_Pos                        0U                                            /*!< xPSR
 410:../source/../CMSIS/core_cm4.h **** #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR
 411:../source/../CMSIS/core_cm4.h **** 
 412:../source/../CMSIS/core_cm4.h **** 
 413:../source/../CMSIS/core_cm4.h **** /**
 414:../source/../CMSIS/core_cm4.h ****   \brief  Union type to access the Control Registers (CONTROL).
 415:../source/../CMSIS/core_cm4.h ****  */
 416:../source/../CMSIS/core_cm4.h **** typedef union
 417:../source/../CMSIS/core_cm4.h **** {
 418:../source/../CMSIS/core_cm4.h ****   struct
 419:../source/../CMSIS/core_cm4.h ****   {
 420:../source/../CMSIS/core_cm4.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 421:../source/../CMSIS/core_cm4.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
 422:../source/../CMSIS/core_cm4.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag */
 423:../source/../CMSIS/core_cm4.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved */
 424:../source/../CMSIS/core_cm4.h ****   } b;                                   /*!< Structure used for bit  access */
 425:../source/../CMSIS/core_cm4.h ****   uint32_t w;                            /*!< Type      used for word access */
 426:../source/../CMSIS/core_cm4.h **** } CONTROL_Type;
 427:../source/../CMSIS/core_cm4.h **** 
 428:../source/../CMSIS/core_cm4.h **** /* CONTROL Register Definitions */
 429:../source/../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Pos                    2U                                            /*!< CONT
 430:../source/../CMSIS/core_cm4.h **** #define CONTROL_FPCA_Msk                   (1UL << CONTROL_FPCA_Pos)                      /*!< CONT
 431:../source/../CMSIS/core_cm4.h **** 
 432:../source/../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONT
 433:../source/../CMSIS/core_cm4.h **** #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONT
 434:../source/../CMSIS/core_cm4.h **** 
 435:../source/../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONT
 436:../source/../CMSIS/core_cm4.h **** #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONT
 437:../source/../CMSIS/core_cm4.h **** 
 438:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CORE */
 439:../source/../CMSIS/core_cm4.h **** 
 440:../source/../CMSIS/core_cm4.h **** 
 441:../source/../CMSIS/core_cm4.h **** /**
 442:../source/../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
 443:../source/../CMSIS/core_cm4.h ****   \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 444:../source/../CMSIS/core_cm4.h ****   \brief      Type definitions for the NVIC Registers
 445:../source/../CMSIS/core_cm4.h ****   @{
 446:../source/../CMSIS/core_cm4.h ****  */
 447:../source/../CMSIS/core_cm4.h **** 
 448:../source/../CMSIS/core_cm4.h **** /**
 449:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 450:../source/../CMSIS/core_cm4.h ****  */
 451:../source/../CMSIS/core_cm4.h **** typedef struct
 452:../source/../CMSIS/core_cm4.h **** {
 453:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ISER[8U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
 454:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[24U];
 455:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ICER[8U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 456:../source/../CMSIS/core_cm4.h ****         uint32_t RSERVED1[24U];
 457:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ISPR[8U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register *
 458:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED2[24U];
 459:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ICPR[8U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 460:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED3[24U];
 461:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t IABR[8U];               /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register */
 462:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED4[56U];
 463:../source/../CMSIS/core_cm4.h ****   __IOM uint8_t  IP[240U];               /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 464:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED5[644U];
 465:../source/../CMSIS/core_cm4.h ****   __OM  uint32_t STIR;                   /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 466:../source/../CMSIS/core_cm4.h **** }  NVIC_Type;
 467:../source/../CMSIS/core_cm4.h **** 
 468:../source/../CMSIS/core_cm4.h **** /* Software Triggered Interrupt Register Definitions */
 469:../source/../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Pos                 0U                                         /*!< STIR: I
 470:../source/../CMSIS/core_cm4.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL /*<< NVIC_STIR_INTID_Pos*/)        /*!< STIR: I
 471:../source/../CMSIS/core_cm4.h **** 
 472:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_NVIC */
 473:../source/../CMSIS/core_cm4.h **** 
 474:../source/../CMSIS/core_cm4.h **** 
 475:../source/../CMSIS/core_cm4.h **** /**
 476:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 477:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCB     System Control Block (SCB)
 478:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control Block Registers
 479:../source/../CMSIS/core_cm4.h ****   @{
 480:../source/../CMSIS/core_cm4.h ****  */
 481:../source/../CMSIS/core_cm4.h **** 
 482:../source/../CMSIS/core_cm4.h **** /**
 483:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control Block (SCB).
 484:../source/../CMSIS/core_cm4.h ****  */
 485:../source/../CMSIS/core_cm4.h **** typedef struct
 486:../source/../CMSIS/core_cm4.h **** {
 487:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
 488:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 489:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
 490:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 491:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
 492:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register *
 493:../source/../CMSIS/core_cm4.h ****   __IOM uint8_t  SHP[12U];               /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 494:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State
 495:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CFSR;                   /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 496:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t HFSR;                   /*!< Offset: 0x02C (R/W)  HardFault Status Register */
 497:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t DFSR;                   /*!< Offset: 0x030 (R/W)  Debug Fault Status Register */
 498:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t MMFAR;                  /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 499:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t BFAR;                   /*!< Offset: 0x038 (R/W)  BusFault Address Register */
 500:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t AFSR;                   /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 501:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PFR[2U];                /*!< Offset: 0x040 (R/ )  Processor Feature Register */
 502:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t DFR;                    /*!< Offset: 0x048 (R/ )  Debug Feature Register */
 503:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t ADR;                    /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register */
 504:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t MMFR[4U];               /*!< Offset: 0x050 (R/ )  Memory Model Feature Register */
 505:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t ISAR[5U];               /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 506:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[5U];
 507:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CPACR;                  /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 508:../source/../CMSIS/core_cm4.h **** } SCB_Type;
 509:../source/../CMSIS/core_cm4.h **** 
 510:../source/../CMSIS/core_cm4.h **** /* SCB CPUID Register Definitions */
 511:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB 
 512:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 513:../source/../CMSIS/core_cm4.h **** 
 514:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB 
 515:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 516:../source/../CMSIS/core_cm4.h **** 
 517:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB 
 518:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 519:../source/../CMSIS/core_cm4.h **** 
 520:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB 
 521:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 522:../source/../CMSIS/core_cm4.h **** 
 523:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB 
 524:../source/../CMSIS/core_cm4.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB 
 525:../source/../CMSIS/core_cm4.h **** 
 526:../source/../CMSIS/core_cm4.h **** /* SCB Interrupt Control State Register Definitions */
 527:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB 
 528:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 529:../source/../CMSIS/core_cm4.h **** 
 530:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB 
 531:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 532:../source/../CMSIS/core_cm4.h **** 
 533:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB 
 534:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 535:../source/../CMSIS/core_cm4.h **** 
 536:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB 
 537:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 538:../source/../CMSIS/core_cm4.h **** 
 539:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB 
 540:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 541:../source/../CMSIS/core_cm4.h **** 
 542:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB 
 543:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 544:../source/../CMSIS/core_cm4.h **** 
 545:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB 
 546:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 547:../source/../CMSIS/core_cm4.h **** 
 548:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB 
 549:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 550:../source/../CMSIS/core_cm4.h **** 
 551:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Pos             11U                                            /*!< SCB 
 552:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 553:../source/../CMSIS/core_cm4.h **** 
 554:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB 
 555:../source/../CMSIS/core_cm4.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB 
 556:../source/../CMSIS/core_cm4.h **** 
 557:../source/../CMSIS/core_cm4.h **** /* SCB Vector Table Offset Register Definitions */
 558:../source/../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Pos                 7U                                            /*!< SCB 
 559:../source/../CMSIS/core_cm4.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 560:../source/../CMSIS/core_cm4.h **** 
 561:../source/../CMSIS/core_cm4.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 562:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB 
 563:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 564:../source/../CMSIS/core_cm4.h **** 
 565:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB 
 566:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 567:../source/../CMSIS/core_cm4.h **** 
 568:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Pos            15U                                            /*!< SCB 
 569:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 570:../source/../CMSIS/core_cm4.h **** 
 571:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Pos              8U                                            /*!< SCB 
 572:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 573:../source/../CMSIS/core_cm4.h **** 
 574:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB 
 575:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 576:../source/../CMSIS/core_cm4.h **** 
 577:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB 
 578:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 579:../source/../CMSIS/core_cm4.h **** 
 580:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Pos             0U                                            /*!< SCB 
 581:../source/../CMSIS/core_cm4.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL /*<< SCB_AIRCR_VECTRESET_Pos*/)           /*!< SCB 
 582:../source/../CMSIS/core_cm4.h **** 
 583:../source/../CMSIS/core_cm4.h **** /* SCB System Control Register Definitions */
 584:../source/../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB 
 585:../source/../CMSIS/core_cm4.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 586:../source/../CMSIS/core_cm4.h **** 
 587:../source/../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB 
 588:../source/../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 589:../source/../CMSIS/core_cm4.h **** 
 590:../source/../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB 
 591:../source/../CMSIS/core_cm4.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 592:../source/../CMSIS/core_cm4.h **** 
 593:../source/../CMSIS/core_cm4.h **** /* SCB Configuration Control Register Definitions */
 594:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB 
 595:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 596:../source/../CMSIS/core_cm4.h **** 
 597:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Pos               8U                                            /*!< SCB 
 598:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 599:../source/../CMSIS/core_cm4.h **** 
 600:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Pos               4U                                            /*!< SCB 
 601:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 602:../source/../CMSIS/core_cm4.h **** 
 603:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB 
 604:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 605:../source/../CMSIS/core_cm4.h **** 
 606:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Pos            1U                                            /*!< SCB 
 607:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 608:../source/../CMSIS/core_cm4.h **** 
 609:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0U                                            /*!< SCB 
 610:../source/../CMSIS/core_cm4.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL /*<< SCB_CCR_NONBASETHRDENA_Pos*/)        /*!< SCB 
 611:../source/../CMSIS/core_cm4.h **** 
 612:../source/../CMSIS/core_cm4.h **** /* SCB System Handler Control and State Register Definitions */
 613:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18U                                            /*!< SCB 
 614:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 615:../source/../CMSIS/core_cm4.h **** 
 616:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17U                                            /*!< SCB 
 617:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 618:../source/../CMSIS/core_cm4.h **** 
 619:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16U                                            /*!< SCB 
 620:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 621:../source/../CMSIS/core_cm4.h **** 
 622:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB 
 623:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 624:../source/../CMSIS/core_cm4.h **** 
 625:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14U                                            /*!< SCB 
 626:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 627:../source/../CMSIS/core_cm4.h **** 
 628:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13U                                            /*!< SCB 
 629:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 630:../source/../CMSIS/core_cm4.h **** 
 631:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12U                                            /*!< SCB 
 632:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 633:../source/../CMSIS/core_cm4.h **** 
 634:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11U                                            /*!< SCB 
 635:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 636:../source/../CMSIS/core_cm4.h **** 
 637:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Pos            10U                                            /*!< SCB 
 638:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 639:../source/../CMSIS/core_cm4.h **** 
 640:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Pos            8U                                            /*!< SCB 
 641:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 642:../source/../CMSIS/core_cm4.h **** 
 643:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Pos             7U                                            /*!< SCB 
 644:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 645:../source/../CMSIS/core_cm4.h **** 
 646:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3U                                            /*!< SCB 
 647:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 648:../source/../CMSIS/core_cm4.h **** 
 649:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1U                                            /*!< SCB 
 650:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 651:../source/../CMSIS/core_cm4.h **** 
 652:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0U                                            /*!< SCB 
 653:../source/../CMSIS/core_cm4.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL /*<< SCB_SHCSR_MEMFAULTACT_Pos*/)         /*!< SCB 
 654:../source/../CMSIS/core_cm4.h **** 
 655:../source/../CMSIS/core_cm4.h **** /* SCB Configurable Fault Status Register Definitions */
 656:../source/../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Pos            16U                                            /*!< SCB 
 657:../source/../CMSIS/core_cm4.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 658:../source/../CMSIS/core_cm4.h **** 
 659:../source/../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8U                                            /*!< SCB 
 660:../source/../CMSIS/core_cm4.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 661:../source/../CMSIS/core_cm4.h **** 
 662:../source/../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0U                                            /*!< SCB 
 663:../source/../CMSIS/core_cm4.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL /*<< SCB_CFSR_MEMFAULTSR_Pos*/)        /*!< SCB 
 664:../source/../CMSIS/core_cm4.h **** 
 665:../source/../CMSIS/core_cm4.h **** /* SCB Hard Fault Status Register Definitions */
 666:../source/../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Pos              31U                                            /*!< SCB 
 667:../source/../CMSIS/core_cm4.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 668:../source/../CMSIS/core_cm4.h **** 
 669:../source/../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Pos                30U                                            /*!< SCB 
 670:../source/../CMSIS/core_cm4.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 671:../source/../CMSIS/core_cm4.h **** 
 672:../source/../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Pos                1U                                            /*!< SCB 
 673:../source/../CMSIS/core_cm4.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 674:../source/../CMSIS/core_cm4.h **** 
 675:../source/../CMSIS/core_cm4.h **** /* SCB Debug Fault Status Register Definitions */
 676:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Pos               4U                                            /*!< SCB 
 677:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 678:../source/../CMSIS/core_cm4.h **** 
 679:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Pos                 3U                                            /*!< SCB 
 680:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 681:../source/../CMSIS/core_cm4.h **** 
 682:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Pos                2U                                            /*!< SCB 
 683:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 684:../source/../CMSIS/core_cm4.h **** 
 685:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Pos                   1U                                            /*!< SCB 
 686:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 687:../source/../CMSIS/core_cm4.h **** 
 688:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Pos                 0U                                            /*!< SCB 
 689:../source/../CMSIS/core_cm4.h **** #define SCB_DFSR_HALTED_Msk                (1UL /*<< SCB_DFSR_HALTED_Pos*/)               /*!< SCB 
 690:../source/../CMSIS/core_cm4.h **** 
 691:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCB */
 692:../source/../CMSIS/core_cm4.h **** 
 693:../source/../CMSIS/core_cm4.h **** 
 694:../source/../CMSIS/core_cm4.h **** /**
 695:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 696:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 697:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Control and ID Register not in the SCB
 698:../source/../CMSIS/core_cm4.h ****   @{
 699:../source/../CMSIS/core_cm4.h ****  */
 700:../source/../CMSIS/core_cm4.h **** 
 701:../source/../CMSIS/core_cm4.h **** /**
 702:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Control and ID Register not in the SCB.
 703:../source/../CMSIS/core_cm4.h ****  */
 704:../source/../CMSIS/core_cm4.h **** typedef struct
 705:../source/../CMSIS/core_cm4.h **** {
 706:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 707:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t ICTR;                   /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 708:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ACTLR;                  /*!< Offset: 0x008 (R/W)  Auxiliary Control Register */
 709:../source/../CMSIS/core_cm4.h **** } SCnSCB_Type;
 710:../source/../CMSIS/core_cm4.h **** 
 711:../source/../CMSIS/core_cm4.h **** /* Interrupt Controller Type Register Definitions */
 712:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0U                                         /*!< ICTR: I
 713:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL /*<< SCnSCB_ICTR_INTLINESNUM_Pos*/)  /*!< ICTR: I
 714:../source/../CMSIS/core_cm4.h **** 
 715:../source/../CMSIS/core_cm4.h **** /* Auxiliary Control Register Definitions */
 716:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Pos            9U                                         /*!< ACTLR: 
 717:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISOOFP_Msk           (1UL << SCnSCB_ACTLR_DISOOFP_Pos)           /*!< ACTLR: 
 718:../source/../CMSIS/core_cm4.h **** 
 719:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Pos            8U                                         /*!< ACTLR: 
 720:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFPCA_Msk           (1UL << SCnSCB_ACTLR_DISFPCA_Pos)           /*!< ACTLR: 
 721:../source/../CMSIS/core_cm4.h **** 
 722:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2U                                         /*!< ACTLR: 
 723:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 724:../source/../CMSIS/core_cm4.h **** 
 725:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1U                                         /*!< ACTLR: 
 726:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 727:../source/../CMSIS/core_cm4.h **** 
 728:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0U                                         /*!< ACTLR: 
 729:../source/../CMSIS/core_cm4.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL /*<< SCnSCB_ACTLR_DISMCYCINT_Pos*/)    /*!< ACTLR: 
 730:../source/../CMSIS/core_cm4.h **** 
 731:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SCnotSCB */
 732:../source/../CMSIS/core_cm4.h **** 
 733:../source/../CMSIS/core_cm4.h **** 
 734:../source/../CMSIS/core_cm4.h **** /**
 735:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 736:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 737:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the System Timer Registers.
 738:../source/../CMSIS/core_cm4.h ****   @{
 739:../source/../CMSIS/core_cm4.h ****  */
 740:../source/../CMSIS/core_cm4.h **** 
 741:../source/../CMSIS/core_cm4.h **** /**
 742:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the System Timer (SysTick).
 743:../source/../CMSIS/core_cm4.h ****  */
 744:../source/../CMSIS/core_cm4.h **** typedef struct
 745:../source/../CMSIS/core_cm4.h **** {
 746:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 747:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
 748:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register *
 749:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
 750:../source/../CMSIS/core_cm4.h **** } SysTick_Type;
 751:../source/../CMSIS/core_cm4.h **** 
 752:../source/../CMSIS/core_cm4.h **** /* SysTick Control / Status Register Definitions */
 753:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysT
 754:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 755:../source/../CMSIS/core_cm4.h **** 
 756:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysT
 757:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 758:../source/../CMSIS/core_cm4.h **** 
 759:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysT
 760:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 761:../source/../CMSIS/core_cm4.h **** 
 762:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysT
 763:../source/../CMSIS/core_cm4.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysT
 764:../source/../CMSIS/core_cm4.h **** 
 765:../source/../CMSIS/core_cm4.h **** /* SysTick Reload Register Definitions */
 766:../source/../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysT
 767:../source/../CMSIS/core_cm4.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysT
 768:../source/../CMSIS/core_cm4.h **** 
 769:../source/../CMSIS/core_cm4.h **** /* SysTick Current Register Definitions */
 770:../source/../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysT
 771:../source/../CMSIS/core_cm4.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysT
 772:../source/../CMSIS/core_cm4.h **** 
 773:../source/../CMSIS/core_cm4.h **** /* SysTick Calibration Register Definitions */
 774:../source/../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysT
 775:../source/../CMSIS/core_cm4.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 776:../source/../CMSIS/core_cm4.h **** 
 777:../source/../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysT
 778:../source/../CMSIS/core_cm4.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 779:../source/../CMSIS/core_cm4.h **** 
 780:../source/../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysT
 781:../source/../CMSIS/core_cm4.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysT
 782:../source/../CMSIS/core_cm4.h **** 
 783:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_SysTick */
 784:../source/../CMSIS/core_cm4.h **** 
 785:../source/../CMSIS/core_cm4.h **** 
 786:../source/../CMSIS/core_cm4.h **** /**
 787:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 788:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 789:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the Instrumentation Trace Macrocell (ITM)
 790:../source/../CMSIS/core_cm4.h ****   @{
 791:../source/../CMSIS/core_cm4.h ****  */
 792:../source/../CMSIS/core_cm4.h **** 
 793:../source/../CMSIS/core_cm4.h **** /**
 794:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 795:../source/../CMSIS/core_cm4.h ****  */
 796:../source/../CMSIS/core_cm4.h **** typedef struct
 797:../source/../CMSIS/core_cm4.h **** {
 798:../source/../CMSIS/core_cm4.h ****   __OM  union
 799:../source/../CMSIS/core_cm4.h ****   {
 800:../source/../CMSIS/core_cm4.h ****     __OM  uint8_t    u8;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit */
 801:../source/../CMSIS/core_cm4.h ****     __OM  uint16_t   u16;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit */
 802:../source/../CMSIS/core_cm4.h ****     __OM  uint32_t   u32;                /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit */
 803:../source/../CMSIS/core_cm4.h ****   }  PORT [32U];                         /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers */
 804:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[864U];
 805:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t TER;                    /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register */
 806:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED1[15U];
 807:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t TPR;                    /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register */
 808:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED2[15U];
 809:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t TCR;                    /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register */
 810:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED3[29U];
 811:../source/../CMSIS/core_cm4.h ****   __OM  uint32_t IWR;                    /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register *
 812:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t IRR;                    /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register */
 813:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t IMCR;                   /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 814:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED4[43U];
 815:../source/../CMSIS/core_cm4.h ****   __OM  uint32_t LAR;                    /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register */
 816:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t LSR;                    /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register */
 817:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED5[6U];
 818:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID4;                   /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 819:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID5;                   /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 820:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID6;                   /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 821:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID7;                   /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 822:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID0;                   /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 823:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID1;                   /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 824:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID2;                   /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 825:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PID3;                   /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 826:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t CID0;                   /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 827:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t CID1;                   /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 828:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t CID2;                   /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 829:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t CID3;                   /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 830:../source/../CMSIS/core_cm4.h **** } ITM_Type;
 831:../source/../CMSIS/core_cm4.h **** 
 832:../source/../CMSIS/core_cm4.h **** /* ITM Trace Privilege Register Definitions */
 833:../source/../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Pos                0U                                            /*!< ITM 
 834:../source/../CMSIS/core_cm4.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL /*<< ITM_TPR_PRIVMASK_Pos*/)            /*!< ITM 
 835:../source/../CMSIS/core_cm4.h **** 
 836:../source/../CMSIS/core_cm4.h **** /* ITM Trace Control Register Definitions */
 837:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Pos                   23U                                            /*!< ITM 
 838:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 839:../source/../CMSIS/core_cm4.h **** 
 840:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Pos             16U                                            /*!< ITM 
 841:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 842:../source/../CMSIS/core_cm4.h **** 
 843:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Pos                10U                                            /*!< ITM 
 844:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 845:../source/../CMSIS/core_cm4.h **** 
 846:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Pos              8U                                            /*!< ITM 
 847:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 848:../source/../CMSIS/core_cm4.h **** 
 849:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Pos                  4U                                            /*!< ITM 
 850:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 851:../source/../CMSIS/core_cm4.h **** 
 852:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Pos                  3U                                            /*!< ITM 
 853:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 854:../source/../CMSIS/core_cm4.h **** 
 855:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Pos                 2U                                            /*!< ITM 
 856:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 857:../source/../CMSIS/core_cm4.h **** 
 858:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Pos                   1U                                            /*!< ITM 
 859:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 860:../source/../CMSIS/core_cm4.h **** 
 861:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Pos                  0U                                            /*!< ITM 
 862:../source/../CMSIS/core_cm4.h **** #define ITM_TCR_ITMENA_Msk                 (1UL /*<< ITM_TCR_ITMENA_Pos*/)                /*!< ITM 
 863:../source/../CMSIS/core_cm4.h **** 
 864:../source/../CMSIS/core_cm4.h **** /* ITM Integration Write Register Definitions */
 865:../source/../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Pos                0U                                            /*!< ITM 
 866:../source/../CMSIS/core_cm4.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL /*<< ITM_IWR_ATVALIDM_Pos*/)              /*!< ITM 
 867:../source/../CMSIS/core_cm4.h **** 
 868:../source/../CMSIS/core_cm4.h **** /* ITM Integration Read Register Definitions */
 869:../source/../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Pos                0U                                            /*!< ITM 
 870:../source/../CMSIS/core_cm4.h **** #define ITM_IRR_ATREADYM_Msk               (1UL /*<< ITM_IRR_ATREADYM_Pos*/)              /*!< ITM 
 871:../source/../CMSIS/core_cm4.h **** 
 872:../source/../CMSIS/core_cm4.h **** /* ITM Integration Mode Control Register Definitions */
 873:../source/../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Pos            0U                                            /*!< ITM 
 874:../source/../CMSIS/core_cm4.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL /*<< ITM_IMCR_INTEGRATION_Pos*/)          /*!< ITM 
 875:../source/../CMSIS/core_cm4.h **** 
 876:../source/../CMSIS/core_cm4.h **** /* ITM Lock Status Register Definitions */
 877:../source/../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Pos                 2U                                            /*!< ITM 
 878:../source/../CMSIS/core_cm4.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 879:../source/../CMSIS/core_cm4.h **** 
 880:../source/../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Pos                  1U                                            /*!< ITM 
 881:../source/../CMSIS/core_cm4.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 882:../source/../CMSIS/core_cm4.h **** 
 883:../source/../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Pos                 0U                                            /*!< ITM 
 884:../source/../CMSIS/core_cm4.h **** #define ITM_LSR_Present_Msk                (1UL /*<< ITM_LSR_Present_Pos*/)               /*!< ITM 
 885:../source/../CMSIS/core_cm4.h **** 
 886:../source/../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_ITM */
 887:../source/../CMSIS/core_cm4.h **** 
 888:../source/../CMSIS/core_cm4.h **** 
 889:../source/../CMSIS/core_cm4.h **** /**
 890:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
 891:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 892:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the Data Watchpoint and Trace (DWT)
 893:../source/../CMSIS/core_cm4.h ****   @{
 894:../source/../CMSIS/core_cm4.h ****  */
 895:../source/../CMSIS/core_cm4.h **** 
 896:../source/../CMSIS/core_cm4.h **** /**
 897:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 898:../source/../CMSIS/core_cm4.h ****  */
 899:../source/../CMSIS/core_cm4.h **** typedef struct
 900:../source/../CMSIS/core_cm4.h **** {
 901:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  Control Register */
 902:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CYCCNT;                 /*!< Offset: 0x004 (R/W)  Cycle Count Register */
 903:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CPICNT;                 /*!< Offset: 0x008 (R/W)  CPI Count Register */
 904:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t EXCCNT;                 /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 905:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t SLEEPCNT;               /*!< Offset: 0x010 (R/W)  Sleep Count Register */
 906:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t LSUCNT;                 /*!< Offset: 0x014 (R/W)  LSU Count Register */
 907:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FOLDCNT;                /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 908:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t PCSR;                   /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 909:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t COMP0;                  /*!< Offset: 0x020 (R/W)  Comparator Register 0 */
 910:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t MASK0;                  /*!< Offset: 0x024 (R/W)  Mask Register 0 */
 911:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION0;              /*!< Offset: 0x028 (R/W)  Function Register 0 */
 912:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
 913:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t COMP1;                  /*!< Offset: 0x030 (R/W)  Comparator Register 1 */
 914:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t MASK1;                  /*!< Offset: 0x034 (R/W)  Mask Register 1 */
 915:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION1;              /*!< Offset: 0x038 (R/W)  Function Register 1 */
 916:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED1[1U];
 917:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t COMP2;                  /*!< Offset: 0x040 (R/W)  Comparator Register 2 */
 918:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t MASK2;                  /*!< Offset: 0x044 (R/W)  Mask Register 2 */
 919:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION2;              /*!< Offset: 0x048 (R/W)  Function Register 2 */
 920:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED2[1U];
 921:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t COMP3;                  /*!< Offset: 0x050 (R/W)  Comparator Register 3 */
 922:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t MASK3;                  /*!< Offset: 0x054 (R/W)  Mask Register 3 */
 923:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FUNCTION3;              /*!< Offset: 0x058 (R/W)  Function Register 3 */
 924:../source/../CMSIS/core_cm4.h **** } DWT_Type;
 925:../source/../CMSIS/core_cm4.h **** 
 926:../source/../CMSIS/core_cm4.h **** /* DWT Control Register Definitions */
 927:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Pos               28U                                         /*!< DWT CTR
 928:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 929:../source/../CMSIS/core_cm4.h **** 
 930:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Pos              27U                                         /*!< DWT CTR
 931:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 932:../source/../CMSIS/core_cm4.h **** 
 933:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26U                                         /*!< DWT CTR
 934:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 935:../source/../CMSIS/core_cm4.h **** 
 936:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Pos              25U                                         /*!< DWT CTR
 937:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 938:../source/../CMSIS/core_cm4.h **** 
 939:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Pos              24U                                         /*!< DWT CTR
 940:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 941:../source/../CMSIS/core_cm4.h **** 
 942:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Pos             22U                                         /*!< DWT CTR
 943:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 944:../source/../CMSIS/core_cm4.h **** 
 945:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21U                                         /*!< DWT CTR
 946:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 947:../source/../CMSIS/core_cm4.h **** 
 948:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Pos             20U                                         /*!< DWT CTR
 949:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 950:../source/../CMSIS/core_cm4.h **** 
 951:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19U                                         /*!< DWT CTR
 952:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 953:../source/../CMSIS/core_cm4.h **** 
 954:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Pos             18U                                         /*!< DWT CTR
 955:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 956:../source/../CMSIS/core_cm4.h **** 
 957:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Pos             17U                                         /*!< DWT CTR
 958:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 959:../source/../CMSIS/core_cm4.h **** 
 960:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Pos             16U                                         /*!< DWT CTR
 961:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 962:../source/../CMSIS/core_cm4.h **** 
 963:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12U                                         /*!< DWT CTR
 964:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 965:../source/../CMSIS/core_cm4.h **** 
 966:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Pos               10U                                         /*!< DWT CTR
 967:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 968:../source/../CMSIS/core_cm4.h **** 
 969:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Pos                 9U                                         /*!< DWT CTR
 970:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 971:../source/../CMSIS/core_cm4.h **** 
 972:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Pos               5U                                         /*!< DWT CTR
 973:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 974:../source/../CMSIS/core_cm4.h **** 
 975:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Pos             1U                                         /*!< DWT CTR
 976:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 977:../source/../CMSIS/core_cm4.h **** 
 978:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Pos              0U                                         /*!< DWT CTR
 979:../source/../CMSIS/core_cm4.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL /*<< DWT_CTRL_CYCCNTENA_Pos*/)       /*!< DWT CTR
 980:../source/../CMSIS/core_cm4.h **** 
 981:../source/../CMSIS/core_cm4.h **** /* DWT CPI Count Register Definitions */
 982:../source/../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Pos               0U                                         /*!< DWT CPI
 983:../source/../CMSIS/core_cm4.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL /*<< DWT_CPICNT_CPICNT_Pos*/)       /*!< DWT CPI
 984:../source/../CMSIS/core_cm4.h **** 
 985:../source/../CMSIS/core_cm4.h **** /* DWT Exception Overhead Count Register Definitions */
 986:../source/../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Pos               0U                                         /*!< DWT EXC
 987:../source/../CMSIS/core_cm4.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL /*<< DWT_EXCCNT_EXCCNT_Pos*/)       /*!< DWT EXC
 988:../source/../CMSIS/core_cm4.h **** 
 989:../source/../CMSIS/core_cm4.h **** /* DWT Sleep Count Register Definitions */
 990:../source/../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0U                                         /*!< DWT SLE
 991:../source/../CMSIS/core_cm4.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL /*<< DWT_SLEEPCNT_SLEEPCNT_Pos*/)   /*!< DWT SLE
 992:../source/../CMSIS/core_cm4.h **** 
 993:../source/../CMSIS/core_cm4.h **** /* DWT LSU Count Register Definitions */
 994:../source/../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Pos               0U                                         /*!< DWT LSU
 995:../source/../CMSIS/core_cm4.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL /*<< DWT_LSUCNT_LSUCNT_Pos*/)       /*!< DWT LSU
 996:../source/../CMSIS/core_cm4.h **** 
 997:../source/../CMSIS/core_cm4.h **** /* DWT Folded-instruction Count Register Definitions */
 998:../source/../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0U                                         /*!< DWT FOL
 999:../source/../CMSIS/core_cm4.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL /*<< DWT_FOLDCNT_FOLDCNT_Pos*/)     /*!< DWT FOL
1000:../source/../CMSIS/core_cm4.h **** 
1001:../source/../CMSIS/core_cm4.h **** /* DWT Comparator Mask Register Definitions */
1002:../source/../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Pos                   0U                                         /*!< DWT MAS
1003:../source/../CMSIS/core_cm4.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL /*<< DWT_MASK_MASK_Pos*/)           /*!< DWT MAS
1004:../source/../CMSIS/core_cm4.h **** 
1005:../source/../CMSIS/core_cm4.h **** /* DWT Comparator Function Register Definitions */
1006:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Pos           24U                                         /*!< DWT FUN
1007:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
1008:../source/../CMSIS/core_cm4.h **** 
1009:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16U                                         /*!< DWT FUN
1010:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
1011:../source/../CMSIS/core_cm4.h **** 
1012:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12U                                         /*!< DWT FUN
1013:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
1014:../source/../CMSIS/core_cm4.h **** 
1015:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10U                                         /*!< DWT FUN
1016:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
1017:../source/../CMSIS/core_cm4.h **** 
1018:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9U                                         /*!< DWT FUN
1019:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
1020:../source/../CMSIS/core_cm4.h **** 
1021:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8U                                         /*!< DWT FUN
1022:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
1023:../source/../CMSIS/core_cm4.h **** 
1024:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7U                                         /*!< DWT FUN
1025:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
1026:../source/../CMSIS/core_cm4.h **** 
1027:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5U                                         /*!< DWT FUN
1028:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
1029:../source/../CMSIS/core_cm4.h **** 
1030:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Pos           0U                                         /*!< DWT FUN
1031:../source/../CMSIS/core_cm4.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL /*<< DWT_FUNCTION_FUNCTION_Pos*/)    /*!< DWT FUN
1032:../source/../CMSIS/core_cm4.h **** 
1033:../source/../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_DWT */
1034:../source/../CMSIS/core_cm4.h **** 
1035:../source/../CMSIS/core_cm4.h **** 
1036:../source/../CMSIS/core_cm4.h **** /**
1037:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1038:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_TPI     Trace Port Interface (TPI)
1039:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the Trace Port Interface (TPI)
1040:../source/../CMSIS/core_cm4.h ****   @{
1041:../source/../CMSIS/core_cm4.h ****  */
1042:../source/../CMSIS/core_cm4.h **** 
1043:../source/../CMSIS/core_cm4.h **** /**
1044:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Trace Port Interface Register (TPI).
1045:../source/../CMSIS/core_cm4.h ****  */
1046:../source/../CMSIS/core_cm4.h **** typedef struct
1047:../source/../CMSIS/core_cm4.h **** {
1048:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t SSPSR;                  /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
1049:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CSPSR;                  /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
1050:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[2U];
1051:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ACPR;                   /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
1052:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED1[55U];
1053:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t SPPR;                   /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
1054:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED2[131U];
1055:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t FFSR;                   /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
1056:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FFCR;                   /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
1057:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t FSCR;                   /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
1058:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED3[759U];
1059:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t TRIGGER;                /*!< Offset: 0xEE8 (R/ )  TRIGGER */
1060:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO0;                  /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
1061:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR2;              /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
1062:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED4[1U];
1063:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t ITATBCTR0;              /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
1064:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t FIFO1;                  /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
1065:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t ITCTRL;                 /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
1066:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED5[39U];
1067:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMSET;               /*!< Offset: 0xFA0 (R/W)  Claim tag set */
1068:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CLAIMCLR;               /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
1069:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED7[8U];
1070:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t DEVID;                  /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
1071:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t DEVTYPE;                /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
1072:../source/../CMSIS/core_cm4.h **** } TPI_Type;
1073:../source/../CMSIS/core_cm4.h **** 
1074:../source/../CMSIS/core_cm4.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
1075:../source/../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Pos              0U                                         /*!< TPI ACP
1076:../source/../CMSIS/core_cm4.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL /*<< TPI_ACPR_PRESCALER_Pos*/)    /*!< TPI ACP
1077:../source/../CMSIS/core_cm4.h **** 
1078:../source/../CMSIS/core_cm4.h **** /* TPI Selected Pin Protocol Register Definitions */
1079:../source/../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Pos                 0U                                         /*!< TPI SPP
1080:../source/../CMSIS/core_cm4.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL /*<< TPI_SPPR_TXMODE_Pos*/)          /*!< TPI SPP
1081:../source/../CMSIS/core_cm4.h **** 
1082:../source/../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Status Register Definitions */
1083:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Pos              3U                                         /*!< TPI FFS
1084:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
1085:../source/../CMSIS/core_cm4.h **** 
1086:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Pos              2U                                         /*!< TPI FFS
1087:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
1088:../source/../CMSIS/core_cm4.h **** 
1089:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Pos              1U                                         /*!< TPI FFS
1090:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
1091:../source/../CMSIS/core_cm4.h **** 
1092:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Pos               0U                                         /*!< TPI FFS
1093:../source/../CMSIS/core_cm4.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL /*<< TPI_FFSR_FlInProg_Pos*/)        /*!< TPI FFS
1094:../source/../CMSIS/core_cm4.h **** 
1095:../source/../CMSIS/core_cm4.h **** /* TPI Formatter and Flush Control Register Definitions */
1096:../source/../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Pos                 8U                                         /*!< TPI FFC
1097:../source/../CMSIS/core_cm4.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
1098:../source/../CMSIS/core_cm4.h **** 
1099:../source/../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Pos                1U                                         /*!< TPI FFC
1100:../source/../CMSIS/core_cm4.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
1101:../source/../CMSIS/core_cm4.h **** 
1102:../source/../CMSIS/core_cm4.h **** /* TPI TRIGGER Register Definitions */
1103:../source/../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Pos             0U                                         /*!< TPI TRI
1104:../source/../CMSIS/core_cm4.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL /*<< TPI_TRIGGER_TRIGGER_Pos*/)      /*!< TPI TRI
1105:../source/../CMSIS/core_cm4.h **** 
1106:../source/../CMSIS/core_cm4.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
1107:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1108:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
1109:../source/../CMSIS/core_cm4.h **** 
1110:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1111:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
1112:../source/../CMSIS/core_cm4.h **** 
1113:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1114:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
1115:../source/../CMSIS/core_cm4.h **** 
1116:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1117:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
1118:../source/../CMSIS/core_cm4.h **** 
1119:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Pos                 16U                                         /*!< TPI FIF
1120:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
1121:../source/../CMSIS/core_cm4.h **** 
1122:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Pos                  8U                                         /*!< TPI FIF
1123:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
1124:../source/../CMSIS/core_cm4.h **** 
1125:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Pos                  0U                                         /*!< TPI FIF
1126:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL /*<< TPI_FIFO0_ETM0_Pos*/)          /*!< TPI FIF
1127:../source/../CMSIS/core_cm4.h **** 
1128:../source/../CMSIS/core_cm4.h **** /* TPI ITATBCTR2 Register Definitions */
1129:../source/../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0U                                         /*!< TPI ITA
1130:../source/../CMSIS/core_cm4.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR2_ATREADY_Pos*/)    /*!< TPI ITA
1131:../source/../CMSIS/core_cm4.h **** 
1132:../source/../CMSIS/core_cm4.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
1133:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29U                                         /*!< TPI FIF
1134:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
1135:../source/../CMSIS/core_cm4.h **** 
1136:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27U                                         /*!< TPI FIF
1137:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
1138:../source/../CMSIS/core_cm4.h **** 
1139:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26U                                         /*!< TPI FIF
1140:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
1141:../source/../CMSIS/core_cm4.h **** 
1142:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24U                                         /*!< TPI FIF
1143:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
1144:../source/../CMSIS/core_cm4.h **** 
1145:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Pos                 16U                                         /*!< TPI FIF
1146:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
1147:../source/../CMSIS/core_cm4.h **** 
1148:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Pos                  8U                                         /*!< TPI FIF
1149:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
1150:../source/../CMSIS/core_cm4.h **** 
1151:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Pos                  0U                                         /*!< TPI FIF
1152:../source/../CMSIS/core_cm4.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL /*<< TPI_FIFO1_ITM0_Pos*/)          /*!< TPI FIF
1153:../source/../CMSIS/core_cm4.h **** 
1154:../source/../CMSIS/core_cm4.h **** /* TPI ITATBCTR0 Register Definitions */
1155:../source/../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0U                                         /*!< TPI ITA
1156:../source/../CMSIS/core_cm4.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL /*<< TPI_ITATBCTR0_ATREADY_Pos*/)    /*!< TPI ITA
1157:../source/../CMSIS/core_cm4.h **** 
1158:../source/../CMSIS/core_cm4.h **** /* TPI Integration Mode Control Register Definitions */
1159:../source/../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Pos                 0U                                         /*!< TPI ITC
1160:../source/../CMSIS/core_cm4.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL /*<< TPI_ITCTRL_Mode_Pos*/)          /*!< TPI ITC
1161:../source/../CMSIS/core_cm4.h **** 
1162:../source/../CMSIS/core_cm4.h **** /* TPI DEVID Register Definitions */
1163:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Pos             11U                                         /*!< TPI DEV
1164:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
1165:../source/../CMSIS/core_cm4.h **** 
1166:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Pos            10U                                         /*!< TPI DEV
1167:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
1168:../source/../CMSIS/core_cm4.h **** 
1169:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Pos             9U                                         /*!< TPI DEV
1170:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
1171:../source/../CMSIS/core_cm4.h **** 
1172:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Pos              6U                                         /*!< TPI DEV
1173:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
1174:../source/../CMSIS/core_cm4.h **** 
1175:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Pos             5U                                         /*!< TPI DEV
1176:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1177:../source/../CMSIS/core_cm4.h **** 
1178:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Pos          0U                                         /*!< TPI DEV
1179:../source/../CMSIS/core_cm4.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL /*<< TPI_DEVID_NrTraceInput_Pos*/)  /*!< TPI DEV
1180:../source/../CMSIS/core_cm4.h **** 
1181:../source/../CMSIS/core_cm4.h **** /* TPI DEVTYPE Register Definitions */
1182:../source/../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Pos           4U                                         /*!< TPI DEV
1183:../source/../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1184:../source/../CMSIS/core_cm4.h **** 
1185:../source/../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Pos             0U                                         /*!< TPI DEV
1186:../source/../CMSIS/core_cm4.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL /*<< TPI_DEVTYPE_SubType_Pos*/)      /*!< TPI DEV
1187:../source/../CMSIS/core_cm4.h **** 
1188:../source/../CMSIS/core_cm4.h **** /*@}*/ /* end of group CMSIS_TPI */
1189:../source/../CMSIS/core_cm4.h **** 
1190:../source/../CMSIS/core_cm4.h **** 
1191:../source/../CMSIS/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1192:../source/../CMSIS/core_cm4.h **** /**
1193:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1194:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1195:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the Memory Protection Unit (MPU)
1196:../source/../CMSIS/core_cm4.h ****   @{
1197:../source/../CMSIS/core_cm4.h ****  */
1198:../source/../CMSIS/core_cm4.h **** 
1199:../source/../CMSIS/core_cm4.h **** /**
1200:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Memory Protection Unit (MPU).
1201:../source/../CMSIS/core_cm4.h ****  */
1202:../source/../CMSIS/core_cm4.h **** typedef struct
1203:../source/../CMSIS/core_cm4.h **** {
1204:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
1205:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
1206:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register */
1207:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1208:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1209:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A1;                /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1210:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A1;                /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1211:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A2;                /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1212:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A2;                /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1213:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RBAR_A3;                /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1214:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t RASR_A3;                /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1215:../source/../CMSIS/core_cm4.h **** } MPU_Type;
1216:../source/../CMSIS/core_cm4.h **** 
1217:../source/../CMSIS/core_cm4.h **** /* MPU Type Register Definitions */
1218:../source/../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU 
1219:../source/../CMSIS/core_cm4.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1220:../source/../CMSIS/core_cm4.h **** 
1221:../source/../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU 
1222:../source/../CMSIS/core_cm4.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1223:../source/../CMSIS/core_cm4.h **** 
1224:../source/../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU 
1225:../source/../CMSIS/core_cm4.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU 
1226:../source/../CMSIS/core_cm4.h **** 
1227:../source/../CMSIS/core_cm4.h **** /* MPU Control Register Definitions */
1228:../source/../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU 
1229:../source/../CMSIS/core_cm4.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1230:../source/../CMSIS/core_cm4.h **** 
1231:../source/../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU 
1232:../source/../CMSIS/core_cm4.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1233:../source/../CMSIS/core_cm4.h **** 
1234:../source/../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU 
1235:../source/../CMSIS/core_cm4.h **** #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU 
1236:../source/../CMSIS/core_cm4.h **** 
1237:../source/../CMSIS/core_cm4.h **** /* MPU Region Number Register Definitions */
1238:../source/../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU 
1239:../source/../CMSIS/core_cm4.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU 
1240:../source/../CMSIS/core_cm4.h **** 
1241:../source/../CMSIS/core_cm4.h **** /* MPU Region Base Address Register Definitions */
1242:../source/../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Pos                   5U                                            /*!< MPU 
1243:../source/../CMSIS/core_cm4.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1244:../source/../CMSIS/core_cm4.h **** 
1245:../source/../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU 
1246:../source/../CMSIS/core_cm4.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1247:../source/../CMSIS/core_cm4.h **** 
1248:../source/../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU 
1249:../source/../CMSIS/core_cm4.h **** #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU 
1250:../source/../CMSIS/core_cm4.h **** 
1251:../source/../CMSIS/core_cm4.h **** /* MPU Region Attribute and Size Register Definitions */
1252:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU 
1253:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1254:../source/../CMSIS/core_cm4.h **** 
1255:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU 
1256:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1257:../source/../CMSIS/core_cm4.h **** 
1258:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU 
1259:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1260:../source/../CMSIS/core_cm4.h **** 
1261:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU 
1262:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1263:../source/../CMSIS/core_cm4.h **** 
1264:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_S_Pos                     18U                                            /*!< MPU 
1265:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1266:../source/../CMSIS/core_cm4.h **** 
1267:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_C_Pos                     17U                                            /*!< MPU 
1268:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1269:../source/../CMSIS/core_cm4.h **** 
1270:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_B_Pos                     16U                                            /*!< MPU 
1271:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1272:../source/../CMSIS/core_cm4.h **** 
1273:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU 
1274:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1275:../source/../CMSIS/core_cm4.h **** 
1276:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU 
1277:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1278:../source/../CMSIS/core_cm4.h **** 
1279:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU 
1280:../source/../CMSIS/core_cm4.h **** #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU 
1281:../source/../CMSIS/core_cm4.h **** 
1282:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_MPU */
1283:../source/../CMSIS/core_cm4.h **** #endif
1284:../source/../CMSIS/core_cm4.h **** 
1285:../source/../CMSIS/core_cm4.h **** 
1286:../source/../CMSIS/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1287:../source/../CMSIS/core_cm4.h **** /**
1288:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1289:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_FPU     Floating Point Unit (FPU)
1290:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the Floating Point Unit (FPU)
1291:../source/../CMSIS/core_cm4.h ****   @{
1292:../source/../CMSIS/core_cm4.h ****  */
1293:../source/../CMSIS/core_cm4.h **** 
1294:../source/../CMSIS/core_cm4.h **** /**
1295:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Floating Point Unit (FPU).
1296:../source/../CMSIS/core_cm4.h ****  */
1297:../source/../CMSIS/core_cm4.h **** typedef struct
1298:../source/../CMSIS/core_cm4.h **** {
1299:../source/../CMSIS/core_cm4.h ****         uint32_t RESERVED0[1U];
1300:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FPCCR;                  /*!< Offset: 0x004 (R/W)  Floating-Point Context Control R
1301:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FPCAR;                  /*!< Offset: 0x008 (R/W)  Floating-Point Context Address R
1302:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t FPDSCR;                 /*!< Offset: 0x00C (R/W)  Floating-Point Default Status Co
1303:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR0;                  /*!< Offset: 0x010 (R/ )  Media and FP Feature Register 0 
1304:../source/../CMSIS/core_cm4.h ****   __IM  uint32_t MVFR1;                  /*!< Offset: 0x014 (R/ )  Media and FP Feature Register 1 
1305:../source/../CMSIS/core_cm4.h **** } FPU_Type;
1306:../source/../CMSIS/core_cm4.h **** 
1307:../source/../CMSIS/core_cm4.h **** /* Floating-Point Context Control Register Definitions */
1308:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Pos                31U                                            /*!< FPCC
1309:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_ASPEN_Msk                (1UL << FPU_FPCCR_ASPEN_Pos)                   /*!< FPCC
1310:../source/../CMSIS/core_cm4.h **** 
1311:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Pos                30U                                            /*!< FPCC
1312:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPEN_Msk                (1UL << FPU_FPCCR_LSPEN_Pos)                   /*!< FPCC
1313:../source/../CMSIS/core_cm4.h **** 
1314:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Pos                8U                                            /*!< FPCC
1315:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_MONRDY_Msk               (1UL << FPU_FPCCR_MONRDY_Pos)                  /*!< FPCC
1316:../source/../CMSIS/core_cm4.h **** 
1317:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Pos                 6U                                            /*!< FPCC
1318:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_BFRDY_Msk                (1UL << FPU_FPCCR_BFRDY_Pos)                   /*!< FPCC
1319:../source/../CMSIS/core_cm4.h **** 
1320:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Pos                 5U                                            /*!< FPCC
1321:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_MMRDY_Msk                (1UL << FPU_FPCCR_MMRDY_Pos)                   /*!< FPCC
1322:../source/../CMSIS/core_cm4.h **** 
1323:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Pos                 4U                                            /*!< FPCC
1324:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_HFRDY_Msk                (1UL << FPU_FPCCR_HFRDY_Pos)                   /*!< FPCC
1325:../source/../CMSIS/core_cm4.h **** 
1326:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Pos                3U                                            /*!< FPCC
1327:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_THREAD_Msk               (1UL << FPU_FPCCR_THREAD_Pos)                  /*!< FPCC
1328:../source/../CMSIS/core_cm4.h **** 
1329:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Pos                  1U                                            /*!< FPCC
1330:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_USER_Msk                 (1UL << FPU_FPCCR_USER_Pos)                    /*!< FPCC
1331:../source/../CMSIS/core_cm4.h **** 
1332:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Pos                0U                                            /*!< FPCC
1333:../source/../CMSIS/core_cm4.h **** #define FPU_FPCCR_LSPACT_Msk               (1UL /*<< FPU_FPCCR_LSPACT_Pos*/)              /*!< FPCC
1334:../source/../CMSIS/core_cm4.h **** 
1335:../source/../CMSIS/core_cm4.h **** /* Floating-Point Context Address Register Definitions */
1336:../source/../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Pos               3U                                            /*!< FPCA
1337:../source/../CMSIS/core_cm4.h **** #define FPU_FPCAR_ADDRESS_Msk              (0x1FFFFFFFUL << FPU_FPCAR_ADDRESS_Pos)        /*!< FPCA
1338:../source/../CMSIS/core_cm4.h **** 
1339:../source/../CMSIS/core_cm4.h **** /* Floating-Point Default Status Control Register Definitions */
1340:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Pos                 26U                                            /*!< FPDS
1341:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_AHP_Msk                 (1UL << FPU_FPDSCR_AHP_Pos)                    /*!< FPDS
1342:../source/../CMSIS/core_cm4.h **** 
1343:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Pos                  25U                                            /*!< FPDS
1344:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_DN_Msk                  (1UL << FPU_FPDSCR_DN_Pos)                     /*!< FPDS
1345:../source/../CMSIS/core_cm4.h **** 
1346:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Pos                  24U                                            /*!< FPDS
1347:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_FZ_Msk                  (1UL << FPU_FPDSCR_FZ_Pos)                     /*!< FPDS
1348:../source/../CMSIS/core_cm4.h **** 
1349:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Pos               22U                                            /*!< FPDS
1350:../source/../CMSIS/core_cm4.h **** #define FPU_FPDSCR_RMode_Msk               (3UL << FPU_FPDSCR_RMode_Pos)                  /*!< FPDS
1351:../source/../CMSIS/core_cm4.h **** 
1352:../source/../CMSIS/core_cm4.h **** /* Media and FP Feature Register 0 Definitions */
1353:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Pos    28U                                            /*!< MVFR
1354:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_rounding_modes_Msk    (0xFUL << FPU_MVFR0_FP_rounding_modes_Pos)     /*!< MVFR
1355:../source/../CMSIS/core_cm4.h **** 
1356:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Pos        24U                                            /*!< MVFR
1357:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Short_vectors_Msk        (0xFUL << FPU_MVFR0_Short_vectors_Pos)         /*!< MVFR
1358:../source/../CMSIS/core_cm4.h **** 
1359:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Pos          20U                                            /*!< MVFR
1360:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Square_root_Msk          (0xFUL << FPU_MVFR0_Square_root_Pos)           /*!< MVFR
1361:../source/../CMSIS/core_cm4.h **** 
1362:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Pos               16U                                            /*!< MVFR
1363:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Divide_Msk               (0xFUL << FPU_MVFR0_Divide_Pos)                /*!< MVFR
1364:../source/../CMSIS/core_cm4.h **** 
1365:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Pos    12U                                            /*!< MVFR
1366:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_FP_excep_trapping_Msk    (0xFUL << FPU_MVFR0_FP_excep_trapping_Pos)     /*!< MVFR
1367:../source/../CMSIS/core_cm4.h **** 
1368:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Pos      8U                                            /*!< MVFR
1369:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Double_precision_Msk     (0xFUL << FPU_MVFR0_Double_precision_Pos)      /*!< MVFR
1370:../source/../CMSIS/core_cm4.h **** 
1371:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Pos      4U                                            /*!< MVFR
1372:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_Single_precision_Msk     (0xFUL << FPU_MVFR0_Single_precision_Pos)      /*!< MVFR
1373:../source/../CMSIS/core_cm4.h **** 
1374:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Pos      0U                                            /*!< MVFR
1375:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR0_A_SIMD_registers_Msk     (0xFUL /*<< FPU_MVFR0_A_SIMD_registers_Pos*/)  /*!< MVFR
1376:../source/../CMSIS/core_cm4.h **** 
1377:../source/../CMSIS/core_cm4.h **** /* Media and FP Feature Register 1 Definitions */
1378:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Pos         28U                                            /*!< MVFR
1379:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_fused_MAC_Msk         (0xFUL << FPU_MVFR1_FP_fused_MAC_Pos)          /*!< MVFR
1380:../source/../CMSIS/core_cm4.h **** 
1381:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Pos              24U                                            /*!< MVFR
1382:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_FP_HPFP_Msk              (0xFUL << FPU_MVFR1_FP_HPFP_Pos)               /*!< MVFR
1383:../source/../CMSIS/core_cm4.h **** 
1384:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Pos            4U                                            /*!< MVFR
1385:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_D_NaN_mode_Msk           (0xFUL << FPU_MVFR1_D_NaN_mode_Pos)            /*!< MVFR
1386:../source/../CMSIS/core_cm4.h **** 
1387:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Pos              0U                                            /*!< MVFR
1388:../source/../CMSIS/core_cm4.h **** #define FPU_MVFR1_FtZ_mode_Msk             (0xFUL /*<< FPU_MVFR1_FtZ_mode_Pos*/)          /*!< MVFR
1389:../source/../CMSIS/core_cm4.h **** 
1390:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_FPU */
1391:../source/../CMSIS/core_cm4.h **** #endif
1392:../source/../CMSIS/core_cm4.h **** 
1393:../source/../CMSIS/core_cm4.h **** 
1394:../source/../CMSIS/core_cm4.h **** /**
1395:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_core_register
1396:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1397:../source/../CMSIS/core_cm4.h ****   \brief    Type definitions for the Core Debug Registers
1398:../source/../CMSIS/core_cm4.h ****   @{
1399:../source/../CMSIS/core_cm4.h ****  */
1400:../source/../CMSIS/core_cm4.h **** 
1401:../source/../CMSIS/core_cm4.h **** /**
1402:../source/../CMSIS/core_cm4.h ****   \brief  Structure type to access the Core Debug Register (CoreDebug).
1403:../source/../CMSIS/core_cm4.h ****  */
1404:../source/../CMSIS/core_cm4.h **** typedef struct
1405:../source/../CMSIS/core_cm4.h **** {
1406:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t DHCSR;                  /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1407:../source/../CMSIS/core_cm4.h ****   __OM  uint32_t DCRSR;                  /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1408:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t DCRDR;                  /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1409:../source/../CMSIS/core_cm4.h ****   __IOM uint32_t DEMCR;                  /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1410:../source/../CMSIS/core_cm4.h **** } CoreDebug_Type;
1411:../source/../CMSIS/core_cm4.h **** 
1412:../source/../CMSIS/core_cm4.h **** /* Debug Halting Control and Status Register Definitions */
1413:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16U                                            /*!< Core
1414:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1415:../source/../CMSIS/core_cm4.h **** 
1416:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25U                                            /*!< Core
1417:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1418:../source/../CMSIS/core_cm4.h **** 
1419:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24U                                            /*!< Core
1420:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1421:../source/../CMSIS/core_cm4.h **** 
1422:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19U                                            /*!< Core
1423:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1424:../source/../CMSIS/core_cm4.h **** 
1425:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18U                                            /*!< Core
1426:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1427:../source/../CMSIS/core_cm4.h **** 
1428:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17U                                            /*!< Core
1429:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1430:../source/../CMSIS/core_cm4.h **** 
1431:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16U                                            /*!< Core
1432:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1433:../source/../CMSIS/core_cm4.h **** 
1434:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5U                                            /*!< Core
1435:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1436:../source/../CMSIS/core_cm4.h **** 
1437:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3U                                            /*!< Core
1438:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1439:../source/../CMSIS/core_cm4.h **** 
1440:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2U                                            /*!< Core
1441:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1442:../source/../CMSIS/core_cm4.h **** 
1443:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1U                                            /*!< Core
1444:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1445:../source/../CMSIS/core_cm4.h **** 
1446:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0U                                            /*!< Core
1447:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL /*<< CoreDebug_DHCSR_C_DEBUGEN_Pos*/)     /*!< Core
1448:../source/../CMSIS/core_cm4.h **** 
1449:../source/../CMSIS/core_cm4.h **** /* Debug Core Register Selector Register Definitions */
1450:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16U                                            /*!< Core
1451:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1452:../source/../CMSIS/core_cm4.h **** 
1453:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0U                                            /*!< Core
1454:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL /*<< CoreDebug_DCRSR_REGSEL_Pos*/)     /*!< Core
1455:../source/../CMSIS/core_cm4.h **** 
1456:../source/../CMSIS/core_cm4.h **** /* Debug Exception and Monitor Control Register Definitions */
1457:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24U                                            /*!< Core
1458:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1459:../source/../CMSIS/core_cm4.h **** 
1460:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19U                                            /*!< Core
1461:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1462:../source/../CMSIS/core_cm4.h **** 
1463:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18U                                            /*!< Core
1464:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1465:../source/../CMSIS/core_cm4.h **** 
1466:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17U                                            /*!< Core
1467:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1468:../source/../CMSIS/core_cm4.h **** 
1469:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16U                                            /*!< Core
1470:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1471:../source/../CMSIS/core_cm4.h **** 
1472:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10U                                            /*!< Core
1473:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1474:../source/../CMSIS/core_cm4.h **** 
1475:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9U                                            /*!< Core
1476:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1477:../source/../CMSIS/core_cm4.h **** 
1478:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8U                                            /*!< Core
1479:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1480:../source/../CMSIS/core_cm4.h **** 
1481:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7U                                            /*!< Core
1482:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1483:../source/../CMSIS/core_cm4.h **** 
1484:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6U                                            /*!< Core
1485:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1486:../source/../CMSIS/core_cm4.h **** 
1487:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5U                                            /*!< Core
1488:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1489:../source/../CMSIS/core_cm4.h **** 
1490:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4U                                            /*!< Core
1491:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1492:../source/../CMSIS/core_cm4.h **** 
1493:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0U                                            /*!< Core
1494:../source/../CMSIS/core_cm4.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL /*<< CoreDebug_DEMCR_VC_CORERESET_Pos*/)  /*!< Core
1495:../source/../CMSIS/core_cm4.h **** 
1496:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_CoreDebug */
1497:../source/../CMSIS/core_cm4.h **** 
1498:../source/../CMSIS/core_cm4.h **** 
1499:../source/../CMSIS/core_cm4.h **** /**
1500:../source/../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1501:../source/../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_bitfield     Core register bit field macros
1502:../source/../CMSIS/core_cm4.h ****   \brief      Macros for use with bit field definitions (xxx_Pos, xxx_Msk).
1503:../source/../CMSIS/core_cm4.h ****   @{
1504:../source/../CMSIS/core_cm4.h ****  */
1505:../source/../CMSIS/core_cm4.h **** 
1506:../source/../CMSIS/core_cm4.h **** /**
1507:../source/../CMSIS/core_cm4.h ****   \brief   Mask and shift a bit field value for use in a register bit range.
1508:../source/../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1509:../source/../CMSIS/core_cm4.h ****   \param[in] value  Value of the bit field.
1510:../source/../CMSIS/core_cm4.h ****   \return           Masked and shifted value.
1511:../source/../CMSIS/core_cm4.h **** */
1512:../source/../CMSIS/core_cm4.h **** #define _VAL2FLD(field, value)    ((value << field ## _Pos) & field ## _Msk)
1513:../source/../CMSIS/core_cm4.h **** 
1514:../source/../CMSIS/core_cm4.h **** /**
1515:../source/../CMSIS/core_cm4.h ****   \brief     Mask and shift a register value to extract a bit filed value.
1516:../source/../CMSIS/core_cm4.h ****   \param[in] field  Name of the register bit field.
1517:../source/../CMSIS/core_cm4.h ****   \param[in] value  Value of register.
1518:../source/../CMSIS/core_cm4.h ****   \return           Masked and shifted bit field value.
1519:../source/../CMSIS/core_cm4.h **** */
1520:../source/../CMSIS/core_cm4.h **** #define _FLD2VAL(field, value)    ((value & field ## _Msk) >> field ## _Pos)
1521:../source/../CMSIS/core_cm4.h **** 
1522:../source/../CMSIS/core_cm4.h **** /*@} end of group CMSIS_core_bitfield */
1523:../source/../CMSIS/core_cm4.h **** 
1524:../source/../CMSIS/core_cm4.h **** 
1525:../source/../CMSIS/core_cm4.h **** /**
1526:../source/../CMSIS/core_cm4.h ****   \ingroup    CMSIS_core_register
1527:../source/../CMSIS/core_cm4.h ****   \defgroup   CMSIS_core_base     Core Definitions
1528:../source/../CMSIS/core_cm4.h ****   \brief      Definitions for base addresses, unions, and structures.
1529:../source/../CMSIS/core_cm4.h ****   @{
1530:../source/../CMSIS/core_cm4.h ****  */
1531:../source/../CMSIS/core_cm4.h **** 
1532:../source/../CMSIS/core_cm4.h **** /* Memory mapping of Cortex-M4 Hardware */
1533:../source/../CMSIS/core_cm4.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1534:../source/../CMSIS/core_cm4.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address */
1535:../source/../CMSIS/core_cm4.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address */
1536:../source/../CMSIS/core_cm4.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address */
1537:../source/../CMSIS/core_cm4.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1538:../source/../CMSIS/core_cm4.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address */
1539:../source/../CMSIS/core_cm4.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address */
1540:../source/../CMSIS/core_cm4.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1541:../source/../CMSIS/core_cm4.h **** 
1542:../source/../CMSIS/core_cm4.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1543:../source/../CMSIS/core_cm4.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1544:../source/../CMSIS/core_cm4.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1545:../source/../CMSIS/core_cm4.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1546:../source/../CMSIS/core_cm4.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1547:../source/../CMSIS/core_cm4.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1548:../source/../CMSIS/core_cm4.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1549:../source/../CMSIS/core_cm4.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1550:../source/../CMSIS/core_cm4.h **** 
1551:../source/../CMSIS/core_cm4.h **** #if (__MPU_PRESENT == 1U)
1552:../source/../CMSIS/core_cm4.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit *
1553:../source/../CMSIS/core_cm4.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit *
1554:../source/../CMSIS/core_cm4.h **** #endif
1555:../source/../CMSIS/core_cm4.h **** 
1556:../source/../CMSIS/core_cm4.h **** #if (__FPU_PRESENT == 1U)
1557:../source/../CMSIS/core_cm4.h ****   #define FPU_BASE          (SCS_BASE +  0x0F30UL)                    /*!< Floating Point Unit */
1558:../source/../CMSIS/core_cm4.h ****   #define FPU               ((FPU_Type       *)     FPU_BASE      )   /*!< Floating Point Unit */
1559:../source/../CMSIS/core_cm4.h **** #endif
1560:../source/../CMSIS/core_cm4.h **** 
1561:../source/../CMSIS/core_cm4.h **** /*@} */
1562:../source/../CMSIS/core_cm4.h **** 
1563:../source/../CMSIS/core_cm4.h **** 
1564:../source/../CMSIS/core_cm4.h **** 
1565:../source/../CMSIS/core_cm4.h **** /*******************************************************************************
1566:../source/../CMSIS/core_cm4.h ****  *                Hardware Abstraction Layer
1567:../source/../CMSIS/core_cm4.h ****   Core Function Interface contains:
1568:../source/../CMSIS/core_cm4.h ****   - Core NVIC Functions
1569:../source/../CMSIS/core_cm4.h ****   - Core SysTick Functions
1570:../source/../CMSIS/core_cm4.h ****   - Core Debug Functions
1571:../source/../CMSIS/core_cm4.h ****   - Core Register Access Functions
1572:../source/../CMSIS/core_cm4.h ****  ******************************************************************************/
1573:../source/../CMSIS/core_cm4.h **** /**
1574:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1575:../source/../CMSIS/core_cm4.h **** */
1576:../source/../CMSIS/core_cm4.h **** 
1577:../source/../CMSIS/core_cm4.h **** 
1578:../source/../CMSIS/core_cm4.h **** 
1579:../source/../CMSIS/core_cm4.h **** /* ##########################   NVIC functions  #################################### */
1580:../source/../CMSIS/core_cm4.h **** /**
1581:../source/../CMSIS/core_cm4.h ****   \ingroup  CMSIS_Core_FunctionInterface
1582:../source/../CMSIS/core_cm4.h ****   \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1583:../source/../CMSIS/core_cm4.h ****   \brief    Functions that manage interrupts and exceptions via the NVIC.
1584:../source/../CMSIS/core_cm4.h ****   @{
1585:../source/../CMSIS/core_cm4.h ****  */
1586:../source/../CMSIS/core_cm4.h **** 
1587:../source/../CMSIS/core_cm4.h **** /**
1588:../source/../CMSIS/core_cm4.h ****   \brief   Set Priority Grouping
1589:../source/../CMSIS/core_cm4.h ****   \details Sets the priority grouping field using the required unlock sequence.
1590:../source/../CMSIS/core_cm4.h ****            The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1591:../source/../CMSIS/core_cm4.h ****            Only values from 0..7 are used.
1592:../source/../CMSIS/core_cm4.h ****            In case of a conflict between priority grouping and available
1593:../source/../CMSIS/core_cm4.h ****            priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1594:../source/../CMSIS/core_cm4.h ****   \param [in]      PriorityGroup  Priority grouping field.
1595:../source/../CMSIS/core_cm4.h ****  */
1596:../source/../CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1597:../source/../CMSIS/core_cm4.h **** {
1598:../source/../CMSIS/core_cm4.h ****   uint32_t reg_value;
1599:../source/../CMSIS/core_cm4.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 a
1600:../source/../CMSIS/core_cm4.h **** 
1601:../source/../CMSIS/core_cm4.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1602:../source/../CMSIS/core_cm4.h ****   reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to chan
1603:../source/../CMSIS/core_cm4.h ****   reg_value  =  (reg_value                                   |
1604:../source/../CMSIS/core_cm4.h ****                 ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
1605:../source/../CMSIS/core_cm4.h ****                 (PriorityGroupTmp << 8U)                      );              /* Insert write key a
1606:../source/../CMSIS/core_cm4.h ****   SCB->AIRCR =  reg_value;
1607:../source/../CMSIS/core_cm4.h **** }
1608:../source/../CMSIS/core_cm4.h **** 
1609:../source/../CMSIS/core_cm4.h **** 
1610:../source/../CMSIS/core_cm4.h **** /**
1611:../source/../CMSIS/core_cm4.h ****   \brief   Get Priority Grouping
1612:../source/../CMSIS/core_cm4.h ****   \details Reads the priority grouping field from the NVIC Interrupt Controller.
1613:../source/../CMSIS/core_cm4.h ****   \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1614:../source/../CMSIS/core_cm4.h ****  */
1615:../source/../CMSIS/core_cm4.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1616:../source/../CMSIS/core_cm4.h **** {
1617:../source/../CMSIS/core_cm4.h ****   return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
1618:../source/../CMSIS/core_cm4.h **** }
1619:../source/../CMSIS/core_cm4.h **** 
1620:../source/../CMSIS/core_cm4.h **** 
1621:../source/../CMSIS/core_cm4.h **** /**
1622:../source/../CMSIS/core_cm4.h ****   \brief   Enable External Interrupt
1623:../source/../CMSIS/core_cm4.h ****   \details Enables a device-specific interrupt in the NVIC interrupt controller.
1624:../source/../CMSIS/core_cm4.h ****   \param [in]      IRQn  External interrupt number. Value cannot be negative.
1625:../source/../CMSIS/core_cm4.h ****  */
1626:../source/../CMSIS/core_cm4.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1627:../source/../CMSIS/core_cm4.h **** {
  29              		.loc 2 1627 1
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 8
  32              		@ frame_needed = 1, uses_anonymous_args = 0
  33              		@ link register save eliminated.
  34 0000 80B4     		push	{r7}
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 7, -4
  37 0002 83B0     		sub	sp, sp, #12
  38              		.cfi_def_cfa_offset 16
  39 0004 00AF     		add	r7, sp, #0
  40              		.cfi_def_cfa_register 7
  41 0006 0346     		mov	r3, r0
  42 0008 FB71     		strb	r3, [r7, #7]
1628:../source/../CMSIS/core_cm4.h ****   NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0
  43              		.loc 2 1628 97
  44 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
  45 000c 03F01F02 		and	r2, r3, #31
  46              		.loc 2 1628 7
  47 0010 0749     		ldr	r1, .L2
  48              		.loc 2 1628 16
  49 0012 97F90730 		ldrsb	r3, [r7, #7]
  50              		.loc 2 1628 41
  51 0016 5B09     		lsrs	r3, r3, #5
  52              		.loc 2 1628 67
  53 0018 0120     		movs	r0, #1
  54 001a 00FA02F2 		lsl	r2, r0, r2
  55              		.loc 2 1628 50
  56 001e 41F82320 		str	r2, [r1, r3, lsl #2]
1629:../source/../CMSIS/core_cm4.h **** }
  57              		.loc 2 1629 1
  58 0022 00BF     		nop
  59 0024 0C37     		adds	r7, r7, #12
  60              		.cfi_def_cfa_offset 4
  61 0026 BD46     		mov	sp, r7
  62              		.cfi_def_cfa_register 13
  63              		@ sp needed
  64 0028 5DF8047B 		ldr	r7, [sp], #4
  65              		.cfi_restore 7
  66              		.cfi_def_cfa_offset 0
  67 002c 7047     		bx	lr
  68              	.L3:
  69 002e 00BF     		.align	2
  70              	.L2:
  71 0030 00E100E0 		.word	-536813312
  72              		.cfi_endproc
  73              	.LFE108:
  75              		.global	uart
  76              		.section	.data.uart,"aw"
  77              		.align	2
  80              	uart:
  81 0000 00A00640 		.word	1074176000
  82 0004 00000000 		.word	0
  83 0008 00000000 		.word	0
  84 000c 00000000 		.word	0
  85 0010 00B00640 		.word	1074180096
  86 0014 00000000 		.word	0
  87 0018 00000000 		.word	0
  88 001c 00000000 		.word	0
  89 0020 00C00640 		.word	1074184192
  90 0024 00000000 		.word	0
  91 0028 00000000 		.word	0
  92 002c 00000000 		.word	0
  93 0030 00D00640 		.word	1074188288
  94 0034 00000000 		.word	0
  95 0038 00000000 		.word	0
  96 003c 00000000 		.word	0
  97 0040 00A00E40 		.word	1074700288
  98 0044 00000000 		.word	0
  99 0048 00000000 		.word	0
 100 004c 00000000 		.word	0
 101              		.section	.text.uart_init,"ax",%progbits
 102              		.align	1
 103              		.global	uart_init
 104              		.syntax unified
 105              		.thumb
 106              		.thumb_func
 108              	uart_init:
 109              	.LFB123:
   1:../source/uart2.c **** #include "uart2.h"
   2:../source/uart2.c **** 
   3:../source/uart2.c **** #include <stdint.h>
   4:../source/uart2.c **** #include "hardware.h"
   5:../source/uart2.c **** #include "utils/circular_buffer.h"
   6:../source/uart2.c **** 
   7:../source/uart2.c **** #define UART_BUF_SIZE 256
   8:../source/uart2.c **** 
   9:../source/uart2.c **** typedef struct UART_Data
  10:../source/uart2.c **** {
  11:../source/uart2.c ****     UART_Type *ptr;
  12:../source/uart2.c ****     uint32_t baud_rate;
  13:../source/uart2.c ****     CircularBuffer_t* buf_tx;
  14:../source/uart2.c ****     CircularBuffer_t* buf_rx;
  15:../source/uart2.c **** } UART_Data_t;
  16:../source/uart2.c **** 
  17:../source/uart2.c **** UART_Data_t uart[5] = {
  18:../source/uart2.c ****     {UART0, 0, NULL, NULL},
  19:../source/uart2.c ****     {UART1, 0, NULL, NULL},
  20:../source/uart2.c ****     {UART2, 0, NULL, NULL},
  21:../source/uart2.c ****     {UART3, 0, NULL, NULL},
  22:../source/uart2.c ****     {UART4, 0, NULL, NULL},
  23:../source/uart2.c **** };   // Son necesarios para las interrupciones
  24:../source/uart2.c **** 
  25:../source/uart2.c **** static void uart_set_baudrate(uint8_t port_id, uint32_t baudrate);
  26:../source/uart2.c **** static void uart_handle_interrupt(uint8_t port_id);
  27:../source/uart2.c **** 
  28:../source/uart2.c **** /**
  29:../source/uart2.c ****  * @brief: Initialize UART port with a given baud rate and default settings (8N1)
  30:../source/uart2.c ****  * @param: port, UART_Type port to be initialized (UART0, UART1, UART2, UART3, UART4, UART5)
  31:../source/uart2.c ****  * @param: baud_rate, baud rate to be used
  32:../source/uart2.c ****  * @return: uart_instance_t, instance of the initialized UART channel
  33:../source/uart2.c ****  */
  34:../source/uart2.c **** void uart_init(uint8_t port_id, uint32_t baud_rate)
  35:../source/uart2.c **** {
 110              		.loc 1 35 1
 111              		.cfi_startproc
 112              		@ args = 0, pretend = 0, frame = 8
 113              		@ frame_needed = 1, uses_anonymous_args = 0
 114 0000 90B5     		push	{r4, r7, lr}
 115              		.cfi_def_cfa_offset 12
 116              		.cfi_offset 4, -12
 117              		.cfi_offset 7, -8
 118              		.cfi_offset 14, -4
 119 0002 83B0     		sub	sp, sp, #12
 120              		.cfi_def_cfa_offset 24
 121 0004 00AF     		add	r7, sp, #0
 122              		.cfi_def_cfa_register 7
 123 0006 0346     		mov	r3, r0
 124 0008 3960     		str	r1, [r7]
 125 000a FB71     		strb	r3, [r7, #7]
  36:../source/uart2.c ****     if (port_id > 4)
 126              		.loc 1 36 8
 127 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 128 000e 042B     		cmp	r3, #4
 129 0010 00F2B280 		bhi	.L15
  37:../source/uart2.c ****         return;
  38:../source/uart2.c **** 
  39:../source/uart2.c ****     uart[port_id].baud_rate = baud_rate;
 130              		.loc 1 39 18
 131 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 132              		.loc 1 39 29
 133 0016 5B4A     		ldr	r2, .L17
 134 0018 1B01     		lsls	r3, r3, #4
 135 001a 1344     		add	r3, r3, r2
 136 001c 0433     		adds	r3, r3, #4
 137 001e 3A68     		ldr	r2, [r7]
 138 0020 1A60     		str	r2, [r3]
  40:../source/uart2.c **** 
  41:../source/uart2.c ****     uart[port_id].buf_tx = circular_buffer_init(UART_BUF_SIZE);
 139              		.loc 1 41 18
 140 0022 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 141              		.loc 1 41 28
 142 0024 4FF48070 		mov	r0, #256
 143 0028 FFF7FEFF 		bl	circular_buffer_init
 144 002c 0246     		mov	r2, r0
 145              		.loc 1 41 26 discriminator 1
 146 002e 5549     		ldr	r1, .L17
 147 0030 2301     		lsls	r3, r4, #4
 148 0032 0B44     		add	r3, r3, r1
 149 0034 0833     		adds	r3, r3, #8
 150 0036 1A60     		str	r2, [r3]
  42:../source/uart2.c ****     uart[port_id].buf_rx = circular_buffer_init(UART_BUF_SIZE);
 151              		.loc 1 42 18
 152 0038 FC79     		ldrb	r4, [r7, #7]	@ zero_extendqisi2
 153              		.loc 1 42 28
 154 003a 4FF48070 		mov	r0, #256
 155 003e FFF7FEFF 		bl	circular_buffer_init
 156 0042 0246     		mov	r2, r0
 157              		.loc 1 42 26 discriminator 1
 158 0044 4F49     		ldr	r1, .L17
 159 0046 2301     		lsls	r3, r4, #4
 160 0048 0B44     		add	r3, r3, r1
 161 004a 0C33     		adds	r3, r3, #12
 162 004c 1A60     		str	r2, [r3]
  43:../source/uart2.c **** 
  44:../source/uart2.c ****     switch (port_id)
 163              		.loc 1 44 5
 164 004e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 165 0050 042B     		cmp	r3, #4
 166 0052 00F29380 		bhi	.L16
 167 0056 01A2     		adr	r2, .L9
 168 0058 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 169              		.p2align 2
 170              	.L9:
 171 005c 71000000 		.word	.L13+1
 172 0060 9D000000 		.word	.L12+1
 173 0064 C9000000 		.word	.L11+1
 174 0068 F5000000 		.word	.L10+1
 175 006c 21010000 		.word	.L8+1
 176              		.p2align 1
 177              	.L13:
  45:../source/uart2.c ****     {
  46:../source/uart2.c ****     case 0:
  47:../source/uart2.c ****         {
  48:../source/uart2.c ****             SIM->SCGC4 |= SIM_SCGC4_UART0(1);
 178              		.loc 1 48 16
 179 0070 454B     		ldr	r3, .L17+4
 180 0072 03F58053 		add	r3, r3, #4096
 181 0076 5B6B     		ldr	r3, [r3, #52]
 182 0078 434A     		ldr	r2, .L17+4
 183              		.loc 1 48 24
 184 007a 43F48063 		orr	r3, r3, #1024
 185 007e 02F58052 		add	r2, r2, #4096
 186 0082 5363     		str	r3, [r2, #52]
  49:../source/uart2.c ****             // PORTD->PCR[UART0_RX] = 0x0; // Clear all bits
  50:../source/uart2.c ****             PORTB->PCR[PIN2NUM(UART0_RX)] = PORT_PCR_MUX(UART_MUX);
 187              		.loc 1 50 18
 188 0084 414B     		ldr	r3, .L17+8
 189              		.loc 1 50 43
 190 0086 4FF44072 		mov	r2, #768
 191 008a 1A64     		str	r2, [r3, #64]
  51:../source/uart2.c ****             // PORTD->PCR[UART0_RX] = PORT_PCR_IRQC(0);
  52:../source/uart2.c ****             // PORTD->PCR[UART0_TX] = 0x0; // Clear all bits
  53:../source/uart2.c ****             PORTB->PCR[PIN2NUM(UART0_TX)] = PORT_PCR_MUX(UART_MUX);
 192              		.loc 1 53 18
 193 008c 3F4B     		ldr	r3, .L17+8
 194              		.loc 1 53 43
 195 008e 4FF44072 		mov	r2, #768
 196 0092 5A64     		str	r2, [r3, #68]
  54:../source/uart2.c ****             // PORTD->PCR[UART0_TX] = PORT_PCR_IRQC(0);
  55:../source/uart2.c ****             NVIC_EnableIRQ(UART0_RX_TX_IRQn);
 197              		.loc 1 55 13
 198 0094 1F20     		movs	r0, #31
 199 0096 FFF7FEFF 		bl	NVIC_EnableIRQ
  56:../source/uart2.c ****         }
  57:../source/uart2.c ****         break;
 200              		.loc 1 57 9
 201 009a 57E0     		b	.L14
 202              	.L12:
  58:../source/uart2.c ****     case 1:
  59:../source/uart2.c ****         {
  60:../source/uart2.c ****             SIM->SCGC4 |= SIM_SCGC4_UART1(1);
 203              		.loc 1 60 16
 204 009c 3A4B     		ldr	r3, .L17+4
 205 009e 03F58053 		add	r3, r3, #4096
 206 00a2 5B6B     		ldr	r3, [r3, #52]
 207 00a4 384A     		ldr	r2, .L17+4
 208              		.loc 1 60 24
 209 00a6 43F40063 		orr	r3, r3, #2048
 210 00aa 02F58052 		add	r2, r2, #4096
 211 00ae 5363     		str	r3, [r2, #52]
  61:../source/uart2.c ****             PORTC->PCR[PIN2NUM(UART1_RX)] = PORT_PCR_MUX(UART_MUX);
 212              		.loc 1 61 18
 213 00b0 374B     		ldr	r3, .L17+12
 214              		.loc 1 61 43
 215 00b2 4FF44072 		mov	r2, #768
 216 00b6 DA60     		str	r2, [r3, #12]
  62:../source/uart2.c ****             PORTC->PCR[PIN2NUM(UART1_TX)] = PORT_PCR_MUX(UART_MUX);
 217              		.loc 1 62 18
 218 00b8 354B     		ldr	r3, .L17+12
 219              		.loc 1 62 43
 220 00ba 4FF44072 		mov	r2, #768
 221 00be 1A61     		str	r2, [r3, #16]
  63:../source/uart2.c ****             NVIC_EnableIRQ(UART1_RX_TX_IRQn);
 222              		.loc 1 63 13
 223 00c0 2120     		movs	r0, #33
 224 00c2 FFF7FEFF 		bl	NVIC_EnableIRQ
  64:../source/uart2.c ****         }
  65:../source/uart2.c ****         break;
 225              		.loc 1 65 9
 226 00c6 41E0     		b	.L14
 227              	.L11:
  66:../source/uart2.c ****     case 2:
  67:../source/uart2.c ****         {
  68:../source/uart2.c ****             SIM->SCGC4 |= SIM_SCGC4_UART2(1);
 228              		.loc 1 68 16
 229 00c8 2F4B     		ldr	r3, .L17+4
 230 00ca 03F58053 		add	r3, r3, #4096
 231 00ce 5B6B     		ldr	r3, [r3, #52]
 232 00d0 2D4A     		ldr	r2, .L17+4
 233              		.loc 1 68 24
 234 00d2 43F48053 		orr	r3, r3, #4096
 235 00d6 02F58052 		add	r2, r2, #4096
 236 00da 5363     		str	r3, [r2, #52]
  69:../source/uart2.c ****             PORTD->PCR[PIN2NUM(UART2_RX)] = PORT_PCR_MUX(UART_MUX);
 237              		.loc 1 69 18
 238 00dc 2D4B     		ldr	r3, .L17+16
 239              		.loc 1 69 43
 240 00de 4FF44072 		mov	r2, #768
 241 00e2 9A60     		str	r2, [r3, #8]
  70:../source/uart2.c ****             PORTD->PCR[PIN2NUM(UART2_TX)] = PORT_PCR_MUX(UART_MUX);
 242              		.loc 1 70 18
 243 00e4 2B4B     		ldr	r3, .L17+16
 244              		.loc 1 70 43
 245 00e6 4FF44072 		mov	r2, #768
 246 00ea DA60     		str	r2, [r3, #12]
  71:../source/uart2.c ****             NVIC_EnableIRQ(UART2_RX_TX_IRQn);
 247              		.loc 1 71 13
 248 00ec 2320     		movs	r0, #35
 249 00ee FFF7FEFF 		bl	NVIC_EnableIRQ
  72:../source/uart2.c ****         }
  73:../source/uart2.c ****         break;
 250              		.loc 1 73 9
 251 00f2 2BE0     		b	.L14
 252              	.L10:
  74:../source/uart2.c ****     case 3:
  75:../source/uart2.c ****         {
  76:../source/uart2.c ****             SIM->SCGC4 |= SIM_SCGC4_UART3(1);
 253              		.loc 1 76 16
 254 00f4 244B     		ldr	r3, .L17+4
 255 00f6 03F58053 		add	r3, r3, #4096
 256 00fa 5B6B     		ldr	r3, [r3, #52]
 257 00fc 224A     		ldr	r2, .L17+4
 258              		.loc 1 76 24
 259 00fe 43F40053 		orr	r3, r3, #8192
 260 0102 02F58052 		add	r2, r2, #4096
 261 0106 5363     		str	r3, [r2, #52]
  77:../source/uart2.c ****             PORTC->PCR[PIN2NUM(UART3_RX)] = PORT_PCR_MUX(UART_MUX);
 262              		.loc 1 77 18
 263 0108 214B     		ldr	r3, .L17+12
 264              		.loc 1 77 43
 265 010a 4FF44072 		mov	r2, #768
 266 010e 1A64     		str	r2, [r3, #64]
  78:../source/uart2.c ****             PORTC->PCR[PIN2NUM(UART3_TX)] = PORT_PCR_MUX(UART_MUX);
 267              		.loc 1 78 18
 268 0110 1F4B     		ldr	r3, .L17+12
 269              		.loc 1 78 43
 270 0112 4FF44072 		mov	r2, #768
 271 0116 5A64     		str	r2, [r3, #68]
  79:../source/uart2.c ****             NVIC_EnableIRQ(UART3_RX_TX_IRQn);
 272              		.loc 1 79 13
 273 0118 2520     		movs	r0, #37
 274 011a FFF7FEFF 		bl	NVIC_EnableIRQ
  80:../source/uart2.c ****         }
  81:../source/uart2.c ****         break;
 275              		.loc 1 81 9
 276 011e 15E0     		b	.L14
 277              	.L8:
  82:../source/uart2.c ****     case 4:
  83:../source/uart2.c ****         {
  84:../source/uart2.c ****             SIM->SCGC1 |= SIM_SCGC1_UART4(1);
 278              		.loc 1 84 16
 279 0120 194B     		ldr	r3, .L17+4
 280 0122 03F58053 		add	r3, r3, #4096
 281 0126 9B6A     		ldr	r3, [r3, #40]
 282 0128 174A     		ldr	r2, .L17+4
 283              		.loc 1 84 24
 284 012a 43F48063 		orr	r3, r3, #1024
 285 012e 02F58052 		add	r2, r2, #4096
 286 0132 9362     		str	r3, [r2, #40]
  85:../source/uart2.c ****             PORTC->PCR[PIN2NUM(UART4_RX)] = PORT_PCR_MUX(UART_MUX);
 287              		.loc 1 85 18
 288 0134 164B     		ldr	r3, .L17+12
 289              		.loc 1 85 43
 290 0136 4FF44072 		mov	r2, #768
 291 013a 9A63     		str	r2, [r3, #56]
  86:../source/uart2.c ****             PORTC->PCR[PIN2NUM(UART4_TX)] = PORT_PCR_MUX(UART_MUX);
 292              		.loc 1 86 18
 293 013c 144B     		ldr	r3, .L17+12
 294              		.loc 1 86 43
 295 013e 4FF44072 		mov	r2, #768
 296 0142 DA63     		str	r2, [r3, #60]
  87:../source/uart2.c ****             NVIC_EnableIRQ(UART4_RX_TX_IRQn);
 297              		.loc 1 87 13
 298 0144 4220     		movs	r0, #66
 299 0146 FFF7FEFF 		bl	NVIC_EnableIRQ
  88:../source/uart2.c ****         }
  89:../source/uart2.c ****         break;
 300              		.loc 1 89 9
 301 014a 00BF     		nop
 302              	.L14:
  90:../source/uart2.c ****     default:
  91:../source/uart2.c ****         return;
  92:../source/uart2.c ****         break;
  93:../source/uart2.c ****     }
  94:../source/uart2.c ****     uart_set_baudrate(port_id, baud_rate);
 303              		.loc 1 94 5
 304 014c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 305 014e 3968     		ldr	r1, [r7]
 306 0150 1846     		mov	r0, r3
 307 0152 FFF7FEFF 		bl	uart_set_baudrate
  95:../source/uart2.c ****     uart[port_id].ptr->C2 |= UART_C2_TE_MASK | UART_C2_RE_MASK | UART_C2_RIE_MASK; // Enable TX, RX
 308              		.loc 1 95 18
 309 0156 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 310 0158 0A4A     		ldr	r2, .L17
 311 015a 1B01     		lsls	r3, r3, #4
 312 015c 1344     		add	r3, r3, r2
 313 015e 1B68     		ldr	r3, [r3]
 314              		.loc 1 95 22
 315 0160 DB78     		ldrb	r3, [r3, #3]
 316 0162 DAB2     		uxtb	r2, r3
 317              		.loc 1 95 18
 318 0164 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 319 0166 0749     		ldr	r1, .L17
 320 0168 1B01     		lsls	r3, r3, #4
 321 016a 0B44     		add	r3, r3, r1
 322 016c 1B68     		ldr	r3, [r3]
 323              		.loc 1 95 27
 324 016e 42F02C02 		orr	r2, r2, #44
 325 0172 D2B2     		uxtb	r2, r2
 326 0174 DA70     		strb	r2, [r3, #3]
 327 0176 02E0     		b	.L4
 328              	.L15:
  37:../source/uart2.c **** 
 329              		.loc 1 37 9
 330 0178 00BF     		nop
 331 017a 00E0     		b	.L4
 332              	.L16:
  91:../source/uart2.c ****         break;
 333              		.loc 1 91 9
 334 017c 00BF     		nop
 335              	.L4:
  96:../source/uart2.c **** }
 336              		.loc 1 96 1
 337 017e 0C37     		adds	r7, r7, #12
 338              		.cfi_def_cfa_offset 12
 339 0180 BD46     		mov	sp, r7
 340              		.cfi_def_cfa_register 13
 341              		@ sp needed
 342 0182 90BD     		pop	{r4, r7, pc}
 343              	.L18:
 344              		.align	2
 345              	.L17:
 346 0184 00000000 		.word	uart
 347 0188 00700440 		.word	1074032640
 348 018c 00A00440 		.word	1074044928
 349 0190 00B00440 		.word	1074049024
 350 0194 00C00440 		.word	1074053120
 351              		.cfi_endproc
 352              	.LFE123:
 354              		.section	.text.uart_available,"ax",%progbits
 355              		.align	1
 356              		.global	uart_available
 357              		.syntax unified
 358              		.thumb
 359              		.thumb_func
 361              	uart_available:
 362              	.LFB124:
  97:../source/uart2.c **** 
  98:../source/uart2.c **** 
  99:../source/uart2.c **** bool uart_available(uint8_t port_id)
 100:../source/uart2.c **** {
 363              		.loc 1 100 1
 364              		.cfi_startproc
 365              		@ args = 0, pretend = 0, frame = 8
 366              		@ frame_needed = 1, uses_anonymous_args = 0
 367 0000 80B5     		push	{r7, lr}
 368              		.cfi_def_cfa_offset 8
 369              		.cfi_offset 7, -8
 370              		.cfi_offset 14, -4
 371 0002 82B0     		sub	sp, sp, #8
 372              		.cfi_def_cfa_offset 16
 373 0004 00AF     		add	r7, sp, #0
 374              		.cfi_def_cfa_register 7
 375 0006 0346     		mov	r3, r0
 376 0008 FB71     		strb	r3, [r7, #7]
 101:../source/uart2.c ****     if (port_id > 4)
 377              		.loc 1 101 8
 378 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 379 000c 042B     		cmp	r3, #4
 380 000e 01D9     		bls	.L20
 102:../source/uart2.c ****         return false;
 381              		.loc 1 102 16
 382 0010 0023     		movs	r3, #0
 383 0012 14E0     		b	.L21
 384              	.L20:
 103:../source/uart2.c ****     return !circular_buffer_empty(uart[port_id].buf_rx);
 385              		.loc 1 103 13
 386 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 387 0016 0C4A     		ldr	r2, .L22
 388 0018 1B01     		lsls	r3, r3, #4
 389 001a 1344     		add	r3, r3, r2
 390 001c 0C33     		adds	r3, r3, #12
 391 001e 1B68     		ldr	r3, [r3]
 392 0020 1846     		mov	r0, r3
 393 0022 FFF7FEFF 		bl	circular_buffer_empty
 394 0026 0346     		mov	r3, r0
 395              		.loc 1 103 5 discriminator 1
 396 0028 002B     		cmp	r3, #0
 397 002a 14BF     		ite	ne
 398 002c 0123     		movne	r3, #1
 399 002e 0023     		moveq	r3, #0
 400 0030 DBB2     		uxtb	r3, r3
 401 0032 83F00103 		eor	r3, r3, #1
 402 0036 DBB2     		uxtb	r3, r3
 403              		.loc 1 103 12 discriminator 1
 404 0038 03F00103 		and	r3, r3, #1
 405 003c DBB2     		uxtb	r3, r3
 406              	.L21:
 104:../source/uart2.c **** }
 407              		.loc 1 104 1
 408 003e 1846     		mov	r0, r3
 409 0040 0837     		adds	r7, r7, #8
 410              		.cfi_def_cfa_offset 8
 411 0042 BD46     		mov	sp, r7
 412              		.cfi_def_cfa_register 13
 413              		@ sp needed
 414 0044 80BD     		pop	{r7, pc}
 415              	.L23:
 416 0046 00BF     		.align	2
 417              	.L22:
 418 0048 00000000 		.word	uart
 419              		.cfi_endproc
 420              	.LFE124:
 422              		.section	.text.uart_read,"ax",%progbits
 423              		.align	1
 424              		.global	uart_read
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 429              	uart_read:
 430              	.LFB125:
 105:../source/uart2.c **** 
 106:../source/uart2.c **** uint8_t uart_read(uint8_t port_id)
 107:../source/uart2.c **** {
 431              		.loc 1 107 1
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 8
 434              		@ frame_needed = 1, uses_anonymous_args = 0
 435 0000 80B5     		push	{r7, lr}
 436              		.cfi_def_cfa_offset 8
 437              		.cfi_offset 7, -8
 438              		.cfi_offset 14, -4
 439 0002 82B0     		sub	sp, sp, #8
 440              		.cfi_def_cfa_offset 16
 441 0004 00AF     		add	r7, sp, #0
 442              		.cfi_def_cfa_register 7
 443 0006 0346     		mov	r3, r0
 444 0008 FB71     		strb	r3, [r7, #7]
 108:../source/uart2.c ****     if (port_id > 4)
 445              		.loc 1 108 8
 446 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 447 000c 042B     		cmp	r3, #4
 448 000e 01D9     		bls	.L25
 109:../source/uart2.c ****         return 0;
 449              		.loc 1 109 16
 450 0010 0023     		movs	r3, #0
 451 0012 17E0     		b	.L26
 452              	.L25:
 110:../source/uart2.c ****     if (circular_buffer_empty((uart[port_id].buf_rx)))
 453              		.loc 1 110 9
 454 0014 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 455 0016 0D4A     		ldr	r2, .L28
 456 0018 1B01     		lsls	r3, r3, #4
 457 001a 1344     		add	r3, r3, r2
 458 001c 0C33     		adds	r3, r3, #12
 459 001e 1B68     		ldr	r3, [r3]
 460 0020 1846     		mov	r0, r3
 461 0022 FFF7FEFF 		bl	circular_buffer_empty
 462 0026 0346     		mov	r3, r0
 463              		.loc 1 110 8 discriminator 1
 464 0028 002B     		cmp	r3, #0
 465 002a 01D0     		beq	.L27
 111:../source/uart2.c ****         return 0;
 466              		.loc 1 111 16
 467 002c 0023     		movs	r3, #0
 468 002e 09E0     		b	.L26
 469              	.L27:
 112:../source/uart2.c ****     return circular_buffer_pop(uart[port_id].buf_rx);
 470              		.loc 1 112 12
 471 0030 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 472 0032 064A     		ldr	r2, .L28
 473 0034 1B01     		lsls	r3, r3, #4
 474 0036 1344     		add	r3, r3, r2
 475 0038 0C33     		adds	r3, r3, #12
 476 003a 1B68     		ldr	r3, [r3]
 477 003c 1846     		mov	r0, r3
 478 003e FFF7FEFF 		bl	circular_buffer_pop
 479 0042 0346     		mov	r3, r0
 480              	.L26:
 113:../source/uart2.c **** }
 481              		.loc 1 113 1
 482 0044 1846     		mov	r0, r3
 483 0046 0837     		adds	r7, r7, #8
 484              		.cfi_def_cfa_offset 8
 485 0048 BD46     		mov	sp, r7
 486              		.cfi_def_cfa_register 13
 487              		@ sp needed
 488 004a 80BD     		pop	{r7, pc}
 489              	.L29:
 490              		.align	2
 491              	.L28:
 492 004c 00000000 		.word	uart
 493              		.cfi_endproc
 494              	.LFE125:
 496              		.section	.text.uart_set_baudrate,"ax",%progbits
 497              		.align	1
 498              		.syntax unified
 499              		.thumb
 500              		.thumb_func
 502              	uart_set_baudrate:
 503              	.LFB126:
 114:../source/uart2.c **** 
 115:../source/uart2.c **** static void uart_set_baudrate(uint8_t port_id, uint32_t baudrate)
 116:../source/uart2.c **** {
 504              		.loc 1 116 1
 505              		.cfi_startproc
 506              		@ args = 0, pretend = 0, frame = 24
 507              		@ frame_needed = 1, uses_anonymous_args = 0
 508              		@ link register save eliminated.
 509 0000 80B4     		push	{r7}
 510              		.cfi_def_cfa_offset 4
 511              		.cfi_offset 7, -4
 512 0002 87B0     		sub	sp, sp, #28
 513              		.cfi_def_cfa_offset 32
 514 0004 00AF     		add	r7, sp, #0
 515              		.cfi_def_cfa_register 7
 516 0006 0346     		mov	r3, r0
 517 0008 3960     		str	r1, [r7]
 518 000a FB71     		strb	r3, [r7, #7]
 117:../source/uart2.c ****     if (port_id > 4)
 519              		.loc 1 117 8
 520 000c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 521 000e 042B     		cmp	r3, #4
 522 0010 76D8     		bhi	.L36
 118:../source/uart2.c ****         return;
 119:../source/uart2.c **** 	uint16_t sbr, brfa;
 120:../source/uart2.c **** 	uint32_t clock;
 121:../source/uart2.c ****     uint8_t old_C2;
 122:../source/uart2.c **** 
 123:../source/uart2.c **** 	clock = ((uart[port_id].ptr == UART0) || (uart[port_id].ptr == UART1))?(__CORE_CLOCK__):(__CORE_CL
 523              		.loc 1 123 25
 524 0012 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 525 0014 3D4A     		ldr	r2, .L37
 526 0016 1B01     		lsls	r3, r3, #4
 527 0018 1344     		add	r3, r3, r2
 528 001a 1B68     		ldr	r3, [r3]
 529              		.loc 1 123 89
 530 001c 3C4A     		ldr	r2, .L37+4
 531 001e 9342     		cmp	r3, r2
 532 0020 07D0     		beq	.L33
 533              		.loc 1 123 57 discriminator 2
 534 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 535 0024 394A     		ldr	r2, .L37
 536 0026 1B01     		lsls	r3, r3, #4
 537 0028 1344     		add	r3, r3, r2
 538 002a 1B68     		ldr	r3, [r3]
 539              		.loc 1 123 40 discriminator 2
 540 002c 394A     		ldr	r2, .L37+8
 541 002e 9342     		cmp	r3, r2
 542 0030 01D1     		bne	.L34
 543              	.L33:
 544              		.loc 1 123 89 discriminator 3
 545 0032 394B     		ldr	r3, .L37+12
 546              		.loc 1 123 89 is_stmt 0
 547 0034 00E0     		b	.L35
 548              	.L34:
 549              		.loc 1 123 89 discriminator 4
 550 0036 394B     		ldr	r3, .L37+16
 551              	.L35:
 552              		.loc 1 123 8 is_stmt 1 discriminator 6
 553 0038 7B61     		str	r3, [r7, #20]
 124:../source/uart2.c **** 
 125:../source/uart2.c **** 	sbr = clock / (baudrate << 4);
 554              		.loc 1 125 26
 555 003a 3B68     		ldr	r3, [r7]
 556 003c 1B01     		lsls	r3, r3, #4
 557              		.loc 1 125 14
 558 003e 7A69     		ldr	r2, [r7, #20]
 559 0040 B2FBF3F3 		udiv	r3, r2, r3
 560              		.loc 1 125 6
 561 0044 7B82     		strh	r3, [r7, #18]	@ movhi
 126:../source/uart2.c **** 	brfa = (clock << 1) / baudrate - (sbr << 5);
 562              		.loc 1 126 16
 563 0046 7B69     		ldr	r3, [r7, #20]
 564 0048 5A00     		lsls	r2, r3, #1
 565              		.loc 1 126 22
 566 004a 3B68     		ldr	r3, [r7]
 567 004c B2FBF3F3 		udiv	r3, r2, r3
 568              		.loc 1 126 33
 569 0050 9AB2     		uxth	r2, r3
 570              		.loc 1 126 40
 571 0052 7B8A     		ldrh	r3, [r7, #18]	@ movhi
 572 0054 5B01     		lsls	r3, r3, #5
 573 0056 9BB2     		uxth	r3, r3
 574              		.loc 1 126 7
 575 0058 D31A     		subs	r3, r2, r3
 576 005a 3B82     		strh	r3, [r7, #16]	@ movhi
 127:../source/uart2.c **** 
 128:../source/uart2.c ****     // Store C2 before disable Tx and Rx
 129:../source/uart2.c ****     old_C2 = uart[port_id].ptr->C2;
 577              		.loc 1 129 27
 578 005c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 579 005e 2B4A     		ldr	r2, .L37
 580 0060 1B01     		lsls	r3, r3, #4
 581 0062 1344     		add	r3, r3, r2
 582 0064 1B68     		ldr	r3, [r3]
 583              		.loc 1 129 12
 584 0066 DB78     		ldrb	r3, [r3, #3]
 585 0068 FB73     		strb	r3, [r7, #15]
 130:../source/uart2.c ****     uart[port_id].ptr->C2 &= ~((uint8_t)UART_C2_TE_MASK | (uint8_t)UART_C2_RE_MASK);
 586              		.loc 1 130 18
 587 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 588 006c 274A     		ldr	r2, .L37
 589 006e 1B01     		lsls	r3, r3, #4
 590 0070 1344     		add	r3, r3, r2
 591 0072 1B68     		ldr	r3, [r3]
 592              		.loc 1 130 22
 593 0074 DB78     		ldrb	r3, [r3, #3]
 594 0076 DAB2     		uxtb	r2, r3
 595              		.loc 1 130 18
 596 0078 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 597 007a 2449     		ldr	r1, .L37
 598 007c 1B01     		lsls	r3, r3, #4
 599 007e 0B44     		add	r3, r3, r1
 600 0080 1B68     		ldr	r3, [r3]
 601              		.loc 1 130 27
 602 0082 22F00C02 		bic	r2, r2, #12
 603 0086 D2B2     		uxtb	r2, r2
 604 0088 DA70     		strb	r2, [r3, #3]
 131:../source/uart2.c **** 
 132:../source/uart2.c ****     uart[port_id].ptr->C1 = 0; // 8-bit mode, no parity
 605              		.loc 1 132 18
 606 008a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 607 008c 1F4A     		ldr	r2, .L37
 608 008e 1B01     		lsls	r3, r3, #4
 609 0090 1344     		add	r3, r3, r2
 610 0092 1B68     		ldr	r3, [r3]
 611              		.loc 1 132 27
 612 0094 0022     		movs	r2, #0
 613 0096 9A70     		strb	r2, [r3, #2]
 133:../source/uart2.c **** 
 134:../source/uart2.c ****     // Set Baud Rate
 135:../source/uart2.c ****     uart[port_id].ptr->BDH = UART_BDH_SBR(sbr>>8);
 614              		.loc 1 135 30
 615 0098 7B8A     		ldrh	r3, [r7, #18]
 616 009a 1B0A     		lsrs	r3, r3, #8
 617 009c 9BB2     		uxth	r3, r3
 618 009e DAB2     		uxtb	r2, r3
 619              		.loc 1 135 18
 620 00a0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 621 00a2 1A49     		ldr	r1, .L37
 622 00a4 1B01     		lsls	r3, r3, #4
 623 00a6 0B44     		add	r3, r3, r1
 624 00a8 1B68     		ldr	r3, [r3]
 625              		.loc 1 135 30
 626 00aa 02F01F02 		and	r2, r2, #31
 627 00ae D2B2     		uxtb	r2, r2
 628              		.loc 1 135 28
 629 00b0 1A70     		strb	r2, [r3]
 136:../source/uart2.c **** 	uart[port_id].ptr->BDL = UART_BDL_SBR(sbr);
 630              		.loc 1 136 15
 631 00b2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 632 00b4 154A     		ldr	r2, .L37
 633 00b6 1B01     		lsls	r3, r3, #4
 634 00b8 1344     		add	r3, r3, r2
 635 00ba 1B68     		ldr	r3, [r3]
 636              		.loc 1 136 27
 637 00bc 7A8A     		ldrh	r2, [r7, #18]	@ movhi
 638 00be D2B2     		uxtb	r2, r2
 639              		.loc 1 136 25
 640 00c0 5A70     		strb	r2, [r3, #1]
 137:../source/uart2.c **** 	uart[port_id].ptr->C4 = (uart[port_id].ptr->C4 & ~UART_C4_BRFA_MASK) | UART_C4_BRFA(brfa);
 641              		.loc 1 137 40
 642 00c2 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 643 00c4 114A     		ldr	r2, .L37
 644 00c6 1B01     		lsls	r3, r3, #4
 645 00c8 1344     		add	r3, r3, r2
 646 00ca 1B68     		ldr	r3, [r3]
 647              		.loc 1 137 44
 648 00cc 9B7A     		ldrb	r3, [r3, #10]
 649 00ce DBB2     		uxtb	r3, r3
 650              		.loc 1 137 49
 651 00d0 23F01F03 		bic	r3, r3, #31
 652 00d4 D9B2     		uxtb	r1, r3
 653              		.loc 1 137 73
 654 00d6 3B8A     		ldrh	r3, [r7, #16]	@ movhi
 655 00d8 DBB2     		uxtb	r3, r3
 656 00da 03F01F03 		and	r3, r3, #31
 657 00de DAB2     		uxtb	r2, r3
 658              		.loc 1 137 15
 659 00e0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 660 00e2 0A48     		ldr	r0, .L37
 661 00e4 1B01     		lsls	r3, r3, #4
 662 00e6 0344     		add	r3, r3, r0
 663 00e8 1B68     		ldr	r3, [r3]
 664              		.loc 1 137 71
 665 00ea 0A43     		orrs	r2, r2, r1
 666 00ec D2B2     		uxtb	r2, r2
 667              		.loc 1 137 24
 668 00ee 9A72     		strb	r2, [r3, #10]
 138:../source/uart2.c ****     // Restore C2
 139:../source/uart2.c ****     uart[port_id].ptr->C2 = old_C2;
 669              		.loc 1 139 18
 670 00f0 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 671 00f2 064A     		ldr	r2, .L37
 672 00f4 1B01     		lsls	r3, r3, #4
 673 00f6 1344     		add	r3, r3, r2
 674 00f8 1B68     		ldr	r3, [r3]
 675              		.loc 1 139 27
 676 00fa FA7B     		ldrb	r2, [r7, #15]
 677 00fc DA70     		strb	r2, [r3, #3]
 678 00fe 00E0     		b	.L30
 679              	.L36:
 118:../source/uart2.c **** 	uint16_t sbr, brfa;
 680              		.loc 1 118 9
 681 0100 00BF     		nop
 682              	.L30:
 140:../source/uart2.c **** }
 683              		.loc 1 140 1
 684 0102 1C37     		adds	r7, r7, #28
 685              		.cfi_def_cfa_offset 4
 686 0104 BD46     		mov	sp, r7
 687              		.cfi_def_cfa_register 13
 688              		@ sp needed
 689 0106 5DF8047B 		ldr	r7, [sp], #4
 690              		.cfi_restore 7
 691              		.cfi_def_cfa_offset 0
 692 010a 7047     		bx	lr
 693              	.L38:
 694              		.align	2
 695              	.L37:
 696 010c 00000000 		.word	uart
 697 0110 00A00640 		.word	1074176000
 698 0114 00B00640 		.word	1074180096
 699 0118 00E1F505 		.word	100000000
 700 011c 80F0FA02 		.word	50000000
 701              		.cfi_endproc
 702              	.LFE126:
 704              		.section	.text.uart_load_buffer,"ax",%progbits
 705              		.align	1
 706              		.global	uart_load_buffer
 707              		.syntax unified
 708              		.thumb
 709              		.thumb_func
 711              	uart_load_buffer:
 712              	.LFB127:
 141:../source/uart2.c **** 
 142:../source/uart2.c **** 
 143:../source/uart2.c **** // [ ] TODO: Test this function with UART0, UART1, UART2, UART3, UART4
 144:../source/uart2.c **** // void uart_set_baudrate(.....)
 145:../source/uart2.c **** // {
 146:../source/uart2.c **** //     ubd = (uint16)((sysclk*1000)/(baud * 16));
 147:../source/uart2.c **** //     /* Save off the current value of the UARTx_BDH except for the SBR */
 148:../source/uart2.c **** //     temp = uart->BDH & ~(UART_BDH_SBR(0x1F));
 149:../source/uart2.c **** //     uart->BDH = temp | UART_BDH_SBR(((ubd & 0x1F00) >> 8));
 150:../source/uart2.c **** //     uart->BDL = (uint8_t)(ubd & UART_BDL_SBR_MASK);
 151:../source/uart2.c **** //     /* Determine if a fractional divider is needed to get closer to the baud rate */
 152:../source/uart2.c **** //     brfa = (((sysclk*32000)/(baud * 16)) - (ubd * 32));
 153:../source/uart2.c **** //     /* Save off the current value of the UARTx_C4 register except for the BRFA */
 154:../source/uart2.c **** //     temp = uart->C4 & ~(UART_C4_BRFA(0x1F));
 155:../source/uart2.c **** //     uart->C4 = temp | UART_C4_BRFA(brfa);
 156:../source/uart2.c **** //     /* Enable receiver and transmitter */
 157:../source/uart2.c **** //     uart->C2 |= (UART_C2_TE_MASK | UART_C2_RE_MASK);
 158:../source/uart2.c **** // }
 159:../source/uart2.c **** 
 160:../source/uart2.c **** // [ ] TODO: Test this function with UART0, UART1, UART2, UART3, UART4
 161:../source/uart2.c **** // void uart_set_baudrate(UART_Type *uart, uint32_t baud_rate)
 162:../source/uart2.c **** // {
 163:../source/uart2.c **** //     uint32_t sbr = 0;
 164:../source/uart2.c **** //     uint32_t baudDiff = 0;
 165:../source/uart2.c **** //     uint8_t oldCtrl;
 166:../source/uart2.c **** 
 167:../source/uart2.c **** //     /* Calculate the baud rate modulo divisor, sbr*/
 168:../source/uart2.c **** //     sbr = __CORE_CLOCK__ / (baud_rate * 16U);
 169:../source/uart2.c **** //     /* set sbrTemp to 1 if the sourceClockInHz can not satisfy the desired baud rate */
 170:../source/uart2.c **** //     if (sbr == 0U)
 171:../source/uart2.c **** //     {
 172:../source/uart2.c **** //         sbr = 1U;
 173:../source/uart2.c **** //     }
 174:../source/uart2.c **** 
 175:../source/uart2.c **** //     baudDiff = (__CORE_CLOCK__ / (sbr * 16U)) - baud_rate;
 176:../source/uart2.c **** 
 177:../source/uart2.c **** //     /* Select the better value between sbr and (sbr + 1) */
 178:../source/uart2.c **** //     if (baudDiff > (baud_rate - (__CORE_CLOCK__ / (16U * (sbr + 1U)))))
 179:../source/uart2.c **** //     {
 180:../source/uart2.c **** //         baudDiff = baud_rate - (__CORE_CLOCK__ / (16U * (sbr + 1U)));
 181:../source/uart2.c **** //         sbr++;
 182:../source/uart2.c **** //     }
 183:../source/uart2.c **** 
 184:../source/uart2.c **** //     /* next, check to see if actual baud rate is within 3% of desired baud rate
 185:../source/uart2.c **** //      * based on the calculate SBR value */
 186:../source/uart2.c **** //     if (baudDiff < ((baud_rate / 100U) * 3U))
 187:../source/uart2.c **** //     {
 188:../source/uart2.c **** //         /* Store C2 before disable Tx and Rx */
 189:../source/uart2.c **** //         oldCtrl = uart->C2;
 190:../source/uart2.c **** 
 191:../source/uart2.c **** //         /* Disable UART TX RX before setting. */
 192:../source/uart2.c **** //         uart->C2 &= ~((uint8_t)UART_C2_TE_MASK | (uint8_t)UART_C2_RE_MASK);
 193:../source/uart2.c **** 
 194:../source/uart2.c **** //         /* Write the sbr value to the BDH and BDL registers*/
 195:../source/uart2.c **** //         uart->BDH = (uart->BDH & ~(uint8_t)UART_BDH_SBR_MASK) | (uint8_t)(sbr >> 8);
 196:../source/uart2.c **** //         uart->BDL = (uint8_t)sbr;
 197:../source/uart2.c **** 
 198:../source/uart2.c **** //         uart->C2 = oldCtrl;
 199:../source/uart2.c **** //     }
 200:../source/uart2.c **** // }
 201:../source/uart2.c **** 
 202:../source/uart2.c **** void uart_load_buffer(uint8_t port_id, uint8_t data)
 203:../source/uart2.c **** {
 713              		.loc 1 203 1
 714              		.cfi_startproc
 715              		@ args = 0, pretend = 0, frame = 8
 716              		@ frame_needed = 1, uses_anonymous_args = 0
 717 0000 80B5     		push	{r7, lr}
 718              		.cfi_def_cfa_offset 8
 719              		.cfi_offset 7, -8
 720              		.cfi_offset 14, -4
 721 0002 82B0     		sub	sp, sp, #8
 722              		.cfi_def_cfa_offset 16
 723 0004 00AF     		add	r7, sp, #0
 724              		.cfi_def_cfa_register 7
 725 0006 0346     		mov	r3, r0
 726 0008 0A46     		mov	r2, r1
 727 000a FB71     		strb	r3, [r7, #7]
 728 000c 1346     		mov	r3, r2
 729 000e BB71     		strb	r3, [r7, #6]
 204:../source/uart2.c ****     if (port_id > 4)
 730              		.loc 1 204 8
 731 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 732 0012 042B     		cmp	r3, #4
 733 0014 1AD8     		bhi	.L42
 205:../source/uart2.c ****         return;
 206:../source/uart2.c ****     if (!circular_buffer_full(uart[port_id].buf_tx))
 734              		.loc 1 206 10
 735 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 736 0018 0E4A     		ldr	r2, .L43
 737 001a 1B01     		lsls	r3, r3, #4
 738 001c 1344     		add	r3, r3, r2
 739 001e 0833     		adds	r3, r3, #8
 740 0020 1B68     		ldr	r3, [r3]
 741 0022 1846     		mov	r0, r3
 742 0024 FFF7FEFF 		bl	circular_buffer_full
 743 0028 0346     		mov	r3, r0
 744              		.loc 1 206 9 discriminator 1
 745 002a 83F00103 		eor	r3, r3, #1
 746 002e DBB2     		uxtb	r3, r3
 747              		.loc 1 206 8 discriminator 1
 748 0030 002B     		cmp	r3, #0
 749 0032 0CD0     		beq	.L39
 207:../source/uart2.c ****         circular_buffer_push(uart[port_id].buf_tx, data);
 750              		.loc 1 207 9
 751 0034 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 752 0036 074A     		ldr	r2, .L43
 753 0038 1B01     		lsls	r3, r3, #4
 754 003a 1344     		add	r3, r3, r2
 755 003c 0833     		adds	r3, r3, #8
 756 003e 1B68     		ldr	r3, [r3]
 757 0040 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 758 0042 1146     		mov	r1, r2
 759 0044 1846     		mov	r0, r3
 760 0046 FFF7FEFF 		bl	circular_buffer_push
 761 004a 00E0     		b	.L39
 762              	.L42:
 205:../source/uart2.c ****         return;
 763              		.loc 1 205 9
 764 004c 00BF     		nop
 765              	.L39:
 208:../source/uart2.c **** }
 766              		.loc 1 208 1
 767 004e 0837     		adds	r7, r7, #8
 768              		.cfi_def_cfa_offset 8
 769 0050 BD46     		mov	sp, r7
 770              		.cfi_def_cfa_register 13
 771              		@ sp needed
 772 0052 80BD     		pop	{r7, pc}
 773              	.L44:
 774              		.align	2
 775              	.L43:
 776 0054 00000000 		.word	uart
 777              		.cfi_endproc
 778              	.LFE127:
 780              		.section	.text.uart_disable_tx_interrupt,"ax",%progbits
 781              		.align	1
 782              		.global	uart_disable_tx_interrupt
 783              		.syntax unified
 784              		.thumb
 785              		.thumb_func
 787              	uart_disable_tx_interrupt:
 788              	.LFB128:
 209:../source/uart2.c **** 
 210:../source/uart2.c **** void uart_disable_tx_interrupt(uint8_t port_id)
 211:../source/uart2.c **** {
 789              		.loc 1 211 1
 790              		.cfi_startproc
 791              		@ args = 0, pretend = 0, frame = 8
 792              		@ frame_needed = 1, uses_anonymous_args = 0
 793              		@ link register save eliminated.
 794 0000 80B4     		push	{r7}
 795              		.cfi_def_cfa_offset 4
 796              		.cfi_offset 7, -4
 797 0002 83B0     		sub	sp, sp, #12
 798              		.cfi_def_cfa_offset 16
 799 0004 00AF     		add	r7, sp, #0
 800              		.cfi_def_cfa_register 7
 801 0006 0346     		mov	r3, r0
 802 0008 FB71     		strb	r3, [r7, #7]
 212:../source/uart2.c ****     if (port_id > 4)
 803              		.loc 1 212 8
 804 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 805 000c 042B     		cmp	r3, #4
 806 000e 10D8     		bhi	.L48
 213:../source/uart2.c ****         return;
 214:../source/uart2.c ****     uart[port_id].ptr->C2 &= ~UART_C2_TIE_MASK; // Disable TX interrupt
 807              		.loc 1 214 18
 808 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 809 0012 0B4A     		ldr	r2, .L49
 810 0014 1B01     		lsls	r3, r3, #4
 811 0016 1344     		add	r3, r3, r2
 812 0018 1B68     		ldr	r3, [r3]
 813              		.loc 1 214 22
 814 001a DB78     		ldrb	r3, [r3, #3]
 815 001c DAB2     		uxtb	r2, r3
 816              		.loc 1 214 18
 817 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 818 0020 0749     		ldr	r1, .L49
 819 0022 1B01     		lsls	r3, r3, #4
 820 0024 0B44     		add	r3, r3, r1
 821 0026 1B68     		ldr	r3, [r3]
 822              		.loc 1 214 27
 823 0028 02F07F02 		and	r2, r2, #127
 824 002c D2B2     		uxtb	r2, r2
 825 002e DA70     		strb	r2, [r3, #3]
 826 0030 00E0     		b	.L45
 827              	.L48:
 213:../source/uart2.c ****         return;
 828              		.loc 1 213 9
 829 0032 00BF     		nop
 830              	.L45:
 215:../source/uart2.c **** }
 831              		.loc 1 215 1
 832 0034 0C37     		adds	r7, r7, #12
 833              		.cfi_def_cfa_offset 4
 834 0036 BD46     		mov	sp, r7
 835              		.cfi_def_cfa_register 13
 836              		@ sp needed
 837 0038 5DF8047B 		ldr	r7, [sp], #4
 838              		.cfi_restore 7
 839              		.cfi_def_cfa_offset 0
 840 003c 7047     		bx	lr
 841              	.L50:
 842 003e 00BF     		.align	2
 843              	.L49:
 844 0040 00000000 		.word	uart
 845              		.cfi_endproc
 846              	.LFE128:
 848              		.section	.text.uart_enable_tx_interrupt,"ax",%progbits
 849              		.align	1
 850              		.global	uart_enable_tx_interrupt
 851              		.syntax unified
 852              		.thumb
 853              		.thumb_func
 855              	uart_enable_tx_interrupt:
 856              	.LFB129:
 216:../source/uart2.c **** 
 217:../source/uart2.c **** void uart_enable_tx_interrupt(uint8_t port_id)
 218:../source/uart2.c **** {
 857              		.loc 1 218 1
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 8
 860              		@ frame_needed = 1, uses_anonymous_args = 0
 861              		@ link register save eliminated.
 862 0000 80B4     		push	{r7}
 863              		.cfi_def_cfa_offset 4
 864              		.cfi_offset 7, -4
 865 0002 83B0     		sub	sp, sp, #12
 866              		.cfi_def_cfa_offset 16
 867 0004 00AF     		add	r7, sp, #0
 868              		.cfi_def_cfa_register 7
 869 0006 0346     		mov	r3, r0
 870 0008 FB71     		strb	r3, [r7, #7]
 219:../source/uart2.c ****     if (port_id > 4)
 871              		.loc 1 219 8
 872 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 873 000c 042B     		cmp	r3, #4
 874 000e 10D8     		bhi	.L54
 220:../source/uart2.c ****         return;
 221:../source/uart2.c ****     uart[port_id].ptr->C2 |= UART_C2_TIE_MASK; // Enable TX interrupt
 875              		.loc 1 221 18
 876 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 877 0012 0B4A     		ldr	r2, .L55
 878 0014 1B01     		lsls	r3, r3, #4
 879 0016 1344     		add	r3, r3, r2
 880 0018 1B68     		ldr	r3, [r3]
 881              		.loc 1 221 22
 882 001a DB78     		ldrb	r3, [r3, #3]
 883 001c DAB2     		uxtb	r2, r3
 884              		.loc 1 221 18
 885 001e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 886 0020 0749     		ldr	r1, .L55
 887 0022 1B01     		lsls	r3, r3, #4
 888 0024 0B44     		add	r3, r3, r1
 889 0026 1B68     		ldr	r3, [r3]
 890              		.loc 1 221 27
 891 0028 62F07F02 		orn	r2, r2, #127
 892 002c D2B2     		uxtb	r2, r2
 893 002e DA70     		strb	r2, [r3, #3]
 894 0030 00E0     		b	.L51
 895              	.L54:
 220:../source/uart2.c ****         return;
 896              		.loc 1 220 9
 897 0032 00BF     		nop
 898              	.L51:
 222:../source/uart2.c **** }
 899              		.loc 1 222 1
 900 0034 0C37     		adds	r7, r7, #12
 901              		.cfi_def_cfa_offset 4
 902 0036 BD46     		mov	sp, r7
 903              		.cfi_def_cfa_register 13
 904              		@ sp needed
 905 0038 5DF8047B 		ldr	r7, [sp], #4
 906              		.cfi_restore 7
 907              		.cfi_def_cfa_offset 0
 908 003c 7047     		bx	lr
 909              	.L56:
 910 003e 00BF     		.align	2
 911              	.L55:
 912 0040 00000000 		.word	uart
 913              		.cfi_endproc
 914              	.LFE129:
 916              		.section	.text.uart_write_array,"ax",%progbits
 917              		.align	1
 918              		.global	uart_write_array
 919              		.syntax unified
 920              		.thumb
 921              		.thumb_func
 923              	uart_write_array:
 924              	.LFB130:
 223:../source/uart2.c **** 
 224:../source/uart2.c **** 
 225:../source/uart2.c **** void uart_write_array(uint8_t port_id, const uint8_t *data, unsigned long size)
 226:../source/uart2.c **** {
 925              		.loc 1 226 1
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 24
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929 0000 80B5     		push	{r7, lr}
 930              		.cfi_def_cfa_offset 8
 931              		.cfi_offset 7, -8
 932              		.cfi_offset 14, -4
 933 0002 86B0     		sub	sp, sp, #24
 934              		.cfi_def_cfa_offset 32
 935 0004 00AF     		add	r7, sp, #0
 936              		.cfi_def_cfa_register 7
 937 0006 0346     		mov	r3, r0
 938 0008 B960     		str	r1, [r7, #8]
 939 000a 7A60     		str	r2, [r7, #4]
 940 000c FB73     		strb	r3, [r7, #15]
 227:../source/uart2.c ****     if (port_id > 4 || data == NULL || size == 0 || size > UART_BUF_SIZE - 1)
 941              		.loc 1 227 8
 942 000e FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 943 0010 042B     		cmp	r3, #4
 944 0012 4FD8     		bhi	.L64
 945              		.loc 1 227 21 discriminator 1
 946 0014 BB68     		ldr	r3, [r7, #8]
 947 0016 002B     		cmp	r3, #0
 948 0018 4CD0     		beq	.L64
 949              		.loc 1 227 37 discriminator 2
 950 001a 7B68     		ldr	r3, [r7, #4]
 951 001c 002B     		cmp	r3, #0
 952 001e 49D0     		beq	.L64
 953              		.loc 1 227 50 discriminator 3
 954 0020 7B68     		ldr	r3, [r7, #4]
 955 0022 FF2B     		cmp	r3, #255
 956 0024 46D8     		bhi	.L64
 228:../source/uart2.c ****         return;
 229:../source/uart2.c **** 
 230:../source/uart2.c ****     uart[port_id].ptr->C2 &= ~UART_C2_TIE_MASK;
 957              		.loc 1 230 18
 958 0026 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 959 0028 244A     		ldr	r2, .L65
 960 002a 1B01     		lsls	r3, r3, #4
 961 002c 1344     		add	r3, r3, r2
 962 002e 1B68     		ldr	r3, [r3]
 963              		.loc 1 230 22
 964 0030 DB78     		ldrb	r3, [r3, #3]
 965 0032 DAB2     		uxtb	r2, r3
 966              		.loc 1 230 18
 967 0034 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 968 0036 2149     		ldr	r1, .L65
 969 0038 1B01     		lsls	r3, r3, #4
 970 003a 0B44     		add	r3, r3, r1
 971 003c 1B68     		ldr	r3, [r3]
 972              		.loc 1 230 27
 973 003e 02F07F02 		and	r2, r2, #127
 974 0042 D2B2     		uxtb	r2, r2
 975 0044 DA70     		strb	r2, [r3, #3]
 976              	.LBB2:
 231:../source/uart2.c ****     for (unsigned long i = 0; i < size; i++)
 977              		.loc 1 231 24
 978 0046 0023     		movs	r3, #0
 979 0048 7B61     		str	r3, [r7, #20]
 980              		.loc 1 231 5
 981 004a 1EE0     		b	.L61
 982              	.L63:
 232:../source/uart2.c ****     {
 233:../source/uart2.c ****         if (!circular_buffer_full(uart[port_id].buf_tx))
 983              		.loc 1 233 14
 984 004c FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 985 004e 1B4A     		ldr	r2, .L65
 986 0050 1B01     		lsls	r3, r3, #4
 987 0052 1344     		add	r3, r3, r2
 988 0054 0833     		adds	r3, r3, #8
 989 0056 1B68     		ldr	r3, [r3]
 990 0058 1846     		mov	r0, r3
 991 005a FFF7FEFF 		bl	circular_buffer_full
 992 005e 0346     		mov	r3, r0
 993              		.loc 1 233 13 discriminator 1
 994 0060 83F00103 		eor	r3, r3, #1
 995 0064 DBB2     		uxtb	r3, r3
 996              		.loc 1 233 12 discriminator 1
 997 0066 002B     		cmp	r3, #0
 998 0068 0CD0     		beq	.L62
 234:../source/uart2.c ****         {
 235:../source/uart2.c ****             circular_buffer_push(uart[port_id].buf_tx, data[i]);
 999              		.loc 1 235 13
 1000 006a FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1001 006c 134A     		ldr	r2, .L65
 1002 006e 1B01     		lsls	r3, r3, #4
 1003 0070 1344     		add	r3, r3, r2
 1004 0072 0833     		adds	r3, r3, #8
 1005 0074 1868     		ldr	r0, [r3]
 1006              		.loc 1 235 60
 1007 0076 BA68     		ldr	r2, [r7, #8]
 1008 0078 7B69     		ldr	r3, [r7, #20]
 1009 007a 1344     		add	r3, r3, r2
 1010              		.loc 1 235 13
 1011 007c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1012 007e 1946     		mov	r1, r3
 1013 0080 FFF7FEFF 		bl	circular_buffer_push
 1014              	.L62:
 231:../source/uart2.c ****     {
 1015              		.loc 1 231 42 discriminator 2
 1016 0084 7B69     		ldr	r3, [r7, #20]
 1017 0086 0133     		adds	r3, r3, #1
 1018 0088 7B61     		str	r3, [r7, #20]
 1019              	.L61:
 231:../source/uart2.c ****     {
 1020              		.loc 1 231 33 discriminator 1
 1021 008a 7A69     		ldr	r2, [r7, #20]
 1022 008c 7B68     		ldr	r3, [r7, #4]
 1023 008e 9A42     		cmp	r2, r3
 1024 0090 DCD3     		bcc	.L63
 1025              	.LBE2:
 236:../source/uart2.c ****         }
 237:../source/uart2.c ****     }
 238:../source/uart2.c ****     uart[port_id].ptr->C2 |= UART_C2_TIE_MASK; // Enable TX interrupt
 1026              		.loc 1 238 18
 1027 0092 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1028 0094 094A     		ldr	r2, .L65
 1029 0096 1B01     		lsls	r3, r3, #4
 1030 0098 1344     		add	r3, r3, r2
 1031 009a 1B68     		ldr	r3, [r3]
 1032              		.loc 1 238 22
 1033 009c DB78     		ldrb	r3, [r3, #3]
 1034 009e DAB2     		uxtb	r2, r3
 1035              		.loc 1 238 18
 1036 00a0 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1037 00a2 0649     		ldr	r1, .L65
 1038 00a4 1B01     		lsls	r3, r3, #4
 1039 00a6 0B44     		add	r3, r3, r1
 1040 00a8 1B68     		ldr	r3, [r3]
 1041              		.loc 1 238 27
 1042 00aa 62F07F02 		orn	r2, r2, #127
 1043 00ae D2B2     		uxtb	r2, r2
 1044 00b0 DA70     		strb	r2, [r3, #3]
 1045 00b2 00E0     		b	.L57
 1046              	.L64:
 228:../source/uart2.c **** 
 1047              		.loc 1 228 9
 1048 00b4 00BF     		nop
 1049              	.L57:
 239:../source/uart2.c **** }
 1050              		.loc 1 239 1
 1051 00b6 1837     		adds	r7, r7, #24
 1052              		.cfi_def_cfa_offset 8
 1053 00b8 BD46     		mov	sp, r7
 1054              		.cfi_def_cfa_register 13
 1055              		@ sp needed
 1056 00ba 80BD     		pop	{r7, pc}
 1057              	.L66:
 1058              		.align	2
 1059              	.L65:
 1060 00bc 00000000 		.word	uart
 1061              		.cfi_endproc
 1062              	.LFE130:
 1064              		.section	.text.uart_write,"ax",%progbits
 1065              		.align	1
 1066              		.global	uart_write
 1067              		.syntax unified
 1068              		.thumb
 1069              		.thumb_func
 1071              	uart_write:
 1072              	.LFB131:
 240:../source/uart2.c **** 
 241:../source/uart2.c **** void uart_write(uint8_t port_id, uint8_t data)
 242:../source/uart2.c **** {
 1073              		.loc 1 242 1
 1074              		.cfi_startproc
 1075              		@ args = 0, pretend = 0, frame = 8
 1076              		@ frame_needed = 1, uses_anonymous_args = 0
 1077 0000 80B5     		push	{r7, lr}
 1078              		.cfi_def_cfa_offset 8
 1079              		.cfi_offset 7, -8
 1080              		.cfi_offset 14, -4
 1081 0002 82B0     		sub	sp, sp, #8
 1082              		.cfi_def_cfa_offset 16
 1083 0004 00AF     		add	r7, sp, #0
 1084              		.cfi_def_cfa_register 7
 1085 0006 0346     		mov	r3, r0
 1086 0008 0A46     		mov	r2, r1
 1087 000a FB71     		strb	r3, [r7, #7]
 1088 000c 1346     		mov	r3, r2
 1089 000e BB71     		strb	r3, [r7, #6]
 243:../source/uart2.c ****     if (port_id > 4)
 1090              		.loc 1 243 8
 1091 0010 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1092 0012 042B     		cmp	r3, #4
 1093 0014 3AD8     		bhi	.L71
 244:../source/uart2.c ****         return;
 245:../source/uart2.c ****     uart[port_id].ptr->C2 &= ~UART_C2_TIE_MASK; // Disable TX interrupt
 1094              		.loc 1 245 18
 1095 0016 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1096 0018 1E4A     		ldr	r2, .L72
 1097 001a 1B01     		lsls	r3, r3, #4
 1098 001c 1344     		add	r3, r3, r2
 1099 001e 1B68     		ldr	r3, [r3]
 1100              		.loc 1 245 22
 1101 0020 DB78     		ldrb	r3, [r3, #3]
 1102 0022 DAB2     		uxtb	r2, r3
 1103              		.loc 1 245 18
 1104 0024 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1105 0026 1B49     		ldr	r1, .L72
 1106 0028 1B01     		lsls	r3, r3, #4
 1107 002a 0B44     		add	r3, r3, r1
 1108 002c 1B68     		ldr	r3, [r3]
 1109              		.loc 1 245 27
 1110 002e 02F07F02 		and	r2, r2, #127
 1111 0032 D2B2     		uxtb	r2, r2
 1112 0034 DA70     		strb	r2, [r3, #3]
 246:../source/uart2.c ****     if (!circular_buffer_full(uart[port_id].buf_tx))
 1113              		.loc 1 246 10
 1114 0036 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1115 0038 164A     		ldr	r2, .L72
 1116 003a 1B01     		lsls	r3, r3, #4
 1117 003c 1344     		add	r3, r3, r2
 1118 003e 0833     		adds	r3, r3, #8
 1119 0040 1B68     		ldr	r3, [r3]
 1120 0042 1846     		mov	r0, r3
 1121 0044 FFF7FEFF 		bl	circular_buffer_full
 1122 0048 0346     		mov	r3, r0
 1123              		.loc 1 246 9 discriminator 1
 1124 004a 83F00103 		eor	r3, r3, #1
 1125 004e DBB2     		uxtb	r3, r3
 1126              		.loc 1 246 8 discriminator 1
 1127 0050 002B     		cmp	r3, #0
 1128 0052 0AD0     		beq	.L70
 247:../source/uart2.c ****     {
 248:../source/uart2.c ****         circular_buffer_push(uart[port_id].buf_tx, data);
 1129              		.loc 1 248 9
 1130 0054 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1131 0056 0F4A     		ldr	r2, .L72
 1132 0058 1B01     		lsls	r3, r3, #4
 1133 005a 1344     		add	r3, r3, r2
 1134 005c 0833     		adds	r3, r3, #8
 1135 005e 1B68     		ldr	r3, [r3]
 1136 0060 BA79     		ldrb	r2, [r7, #6]	@ zero_extendqisi2
 1137 0062 1146     		mov	r1, r2
 1138 0064 1846     		mov	r0, r3
 1139 0066 FFF7FEFF 		bl	circular_buffer_push
 1140              	.L70:
 249:../source/uart2.c ****     }
 250:../source/uart2.c ****     uart[port_id].ptr->C2 |= UART_C2_TIE_MASK; // Enable TX interrupt
 1141              		.loc 1 250 18
 1142 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1143 006c 094A     		ldr	r2, .L72
 1144 006e 1B01     		lsls	r3, r3, #4
 1145 0070 1344     		add	r3, r3, r2
 1146 0072 1B68     		ldr	r3, [r3]
 1147              		.loc 1 250 22
 1148 0074 DB78     		ldrb	r3, [r3, #3]
 1149 0076 DAB2     		uxtb	r2, r3
 1150              		.loc 1 250 18
 1151 0078 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1152 007a 0649     		ldr	r1, .L72
 1153 007c 1B01     		lsls	r3, r3, #4
 1154 007e 0B44     		add	r3, r3, r1
 1155 0080 1B68     		ldr	r3, [r3]
 1156              		.loc 1 250 27
 1157 0082 62F07F02 		orn	r2, r2, #127
 1158 0086 D2B2     		uxtb	r2, r2
 1159 0088 DA70     		strb	r2, [r3, #3]
 1160 008a 00E0     		b	.L67
 1161              	.L71:
 244:../source/uart2.c ****     uart[port_id].ptr->C2 &= ~UART_C2_TIE_MASK; // Disable TX interrupt
 1162              		.loc 1 244 9
 1163 008c 00BF     		nop
 1164              	.L67:
 251:../source/uart2.c **** }
 1165              		.loc 1 251 1
 1166 008e 0837     		adds	r7, r7, #8
 1167              		.cfi_def_cfa_offset 8
 1168 0090 BD46     		mov	sp, r7
 1169              		.cfi_def_cfa_register 13
 1170              		@ sp needed
 1171 0092 80BD     		pop	{r7, pc}
 1172              	.L73:
 1173              		.align	2
 1174              	.L72:
 1175 0094 00000000 		.word	uart
 1176              		.cfi_endproc
 1177              	.LFE131:
 1179              		.section	.text.uart_handle_interrupt,"ax",%progbits
 1180              		.align	1
 1181              		.syntax unified
 1182              		.thumb
 1183              		.thumb_func
 1185              	uart_handle_interrupt:
 1186              	.LFB132:
 252:../source/uart2.c **** 
 253:../source/uart2.c **** 
 254:../source/uart2.c **** 
 255:../source/uart2.c **** 
 256:../source/uart2.c **** 
 257:../source/uart2.c **** 
 258:../source/uart2.c **** 
 259:../source/uart2.c **** static void uart_handle_interrupt(uint8_t port_id)
 260:../source/uart2.c **** {
 1187              		.loc 1 260 1
 1188              		.cfi_startproc
 1189              		@ args = 0, pretend = 0, frame = 16
 1190              		@ frame_needed = 1, uses_anonymous_args = 0
 1191 0000 90B5     		push	{r4, r7, lr}
 1192              		.cfi_def_cfa_offset 12
 1193              		.cfi_offset 4, -12
 1194              		.cfi_offset 7, -8
 1195              		.cfi_offset 14, -4
 1196 0002 85B0     		sub	sp, sp, #20
 1197              		.cfi_def_cfa_offset 32
 1198 0004 00AF     		add	r7, sp, #0
 1199              		.cfi_def_cfa_register 7
 1200 0006 0346     		mov	r3, r0
 1201 0008 FB71     		strb	r3, [r7, #7]
 261:../source/uart2.c ****     uint8_t status = uart[port_id].ptr->S1;
 1202              		.loc 1 261 35
 1203 000a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1204 000c 294A     		ldr	r2, .L79
 1205 000e 1B01     		lsls	r3, r3, #4
 1206 0010 1344     		add	r3, r3, r2
 1207 0012 1B68     		ldr	r3, [r3]
 1208              		.loc 1 261 13
 1209 0014 1B79     		ldrb	r3, [r3, #4]
 1210 0016 FB73     		strb	r3, [r7, #15]
 262:../source/uart2.c **** 
 263:../source/uart2.c ****     // Receive Data Register Full Flag
 264:../source/uart2.c ****     if (status & UART_S1_RDRF_MASK)
 1211              		.loc 1 264 16
 1212 0018 FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 1213 001a 03F02003 		and	r3, r3, #32
 1214              		.loc 1 264 8
 1215 001e 002B     		cmp	r3, #0
 1216 0020 10D0     		beq	.L75
 265:../source/uart2.c ****     {
 266:../source/uart2.c ****         circular_buffer_push(uart[port_id].buf_rx, uart[port_id].ptr->D);
 1217              		.loc 1 266 9
 1218 0022 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1219 0024 234A     		ldr	r2, .L79
 1220 0026 1B01     		lsls	r3, r3, #4
 1221 0028 1344     		add	r3, r3, r2
 1222 002a 0C33     		adds	r3, r3, #12
 1223 002c 1A68     		ldr	r2, [r3]
 1224              		.loc 1 266 65
 1225 002e FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1226 0030 2049     		ldr	r1, .L79
 1227 0032 1B01     		lsls	r3, r3, #4
 1228 0034 0B44     		add	r3, r3, r1
 1229 0036 1B68     		ldr	r3, [r3]
 1230              		.loc 1 266 69
 1231 0038 DB79     		ldrb	r3, [r3, #7]
 1232 003a DBB2     		uxtb	r3, r3
 1233              		.loc 1 266 9
 1234 003c 1946     		mov	r1, r3
 1235 003e 1046     		mov	r0, r2
 1236 0040 FFF7FEFF 		bl	circular_buffer_push
 1237              	.L75:
 267:../source/uart2.c ****     }
 268:../source/uart2.c **** 
 269:../source/uart2.c ****     // Transmit Data Register Empty Flag
 270:../source/uart2.c ****     if (status & UART_S1_TDRE_MASK)
 1238              		.loc 1 270 9
 1239 0044 97F90F30 		ldrsb	r3, [r7, #15]
 1240              		.loc 1 270 8
 1241 0048 002B     		cmp	r3, #0
 1242 004a 2FDA     		bge	.L78
 271:../source/uart2.c ****     {
 272:../source/uart2.c ****         if (!circular_buffer_empty(uart[port_id].buf_tx))
 1243              		.loc 1 272 14
 1244 004c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1245 004e 194A     		ldr	r2, .L79
 1246 0050 1B01     		lsls	r3, r3, #4
 1247 0052 1344     		add	r3, r3, r2
 1248 0054 0833     		adds	r3, r3, #8
 1249 0056 1B68     		ldr	r3, [r3]
 1250 0058 1846     		mov	r0, r3
 1251 005a FFF7FEFF 		bl	circular_buffer_empty
 1252 005e 0346     		mov	r3, r0
 1253              		.loc 1 272 13 discriminator 1
 1254 0060 83F00103 		eor	r3, r3, #1
 1255 0064 DBB2     		uxtb	r3, r3
 1256              		.loc 1 272 12 discriminator 1
 1257 0066 002B     		cmp	r3, #0
 1258 0068 10D0     		beq	.L77
 273:../source/uart2.c ****         {
 274:../source/uart2.c ****             uart[port_id].ptr->D = circular_buffer_pop(uart[port_id].buf_tx);
 1259              		.loc 1 274 36
 1260 006a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1261 006c 114A     		ldr	r2, .L79
 1262 006e 1B01     		lsls	r3, r3, #4
 1263 0070 1344     		add	r3, r3, r2
 1264 0072 0833     		adds	r3, r3, #8
 1265 0074 1A68     		ldr	r2, [r3]
 1266              		.loc 1 274 26
 1267 0076 FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1268 0078 0E49     		ldr	r1, .L79
 1269 007a 1B01     		lsls	r3, r3, #4
 1270 007c 0B44     		add	r3, r3, r1
 1271 007e 1C68     		ldr	r4, [r3]
 1272              		.loc 1 274 36
 1273 0080 1046     		mov	r0, r2
 1274 0082 FFF7FEFF 		bl	circular_buffer_pop
 1275 0086 0346     		mov	r3, r0
 1276              		.loc 1 274 34 discriminator 1
 1277 0088 E371     		strb	r3, [r4, #7]
 275:../source/uart2.c ****         }
 276:../source/uart2.c ****         else
 277:../source/uart2.c ****         {
 278:../source/uart2.c ****             // Disable TX interrupt
 279:../source/uart2.c ****             uart[port_id].ptr->C2 &= ~UART_C2_TIE_MASK;
 280:../source/uart2.c ****         }
 281:../source/uart2.c ****     }
 282:../source/uart2.c **** }
 1278              		.loc 1 282 1
 1279 008a 0FE0     		b	.L78
 1280              	.L77:
 279:../source/uart2.c ****         }
 1281              		.loc 1 279 26
 1282 008c FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1283 008e 094A     		ldr	r2, .L79
 1284 0090 1B01     		lsls	r3, r3, #4
 1285 0092 1344     		add	r3, r3, r2
 1286 0094 1B68     		ldr	r3, [r3]
 279:../source/uart2.c ****         }
 1287              		.loc 1 279 30
 1288 0096 DB78     		ldrb	r3, [r3, #3]
 1289 0098 DAB2     		uxtb	r2, r3
 279:../source/uart2.c ****         }
 1290              		.loc 1 279 26
 1291 009a FB79     		ldrb	r3, [r7, #7]	@ zero_extendqisi2
 1292 009c 0549     		ldr	r1, .L79
 1293 009e 1B01     		lsls	r3, r3, #4
 1294 00a0 0B44     		add	r3, r3, r1
 1295 00a2 1B68     		ldr	r3, [r3]
 279:../source/uart2.c ****         }
 1296              		.loc 1 279 35
 1297 00a4 02F07F02 		and	r2, r2, #127
 1298 00a8 D2B2     		uxtb	r2, r2
 1299 00aa DA70     		strb	r2, [r3, #3]
 1300              	.L78:
 1301              		.loc 1 282 1
 1302 00ac 00BF     		nop
 1303 00ae 1437     		adds	r7, r7, #20
 1304              		.cfi_def_cfa_offset 12
 1305 00b0 BD46     		mov	sp, r7
 1306              		.cfi_def_cfa_register 13
 1307              		@ sp needed
 1308 00b2 90BD     		pop	{r4, r7, pc}
 1309              	.L80:
 1310              		.align	2
 1311              	.L79:
 1312 00b4 00000000 		.word	uart
 1313              		.cfi_endproc
 1314              	.LFE132:
 1316              		.section	.text.UART0_RX_TX_IRQHandler,"ax",%progbits
 1317              		.align	1
 1318              		.global	UART0_RX_TX_IRQHandler
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1323              	UART0_RX_TX_IRQHandler:
 1324              	.LFB133:
 283:../source/uart2.c **** 
 284:../source/uart2.c **** __ISR__ UART0_RX_TX_IRQHandler(void) {uart_handle_interrupt(0);}
 1325              		.loc 1 284 38
 1326              		.cfi_startproc
 1327              		@ Stack Align: May be called with mis-aligned SP.
 1328              		@ args = 0, pretend = 0, frame = 0
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330 0000 6846     		mov	r0, sp
 1331              		.cfi_register 13, 0
 1332 0002 20F00701 		bic	r1, r0, #7
 1333 0006 8D46     		mov	sp, r1
 1334 0008 89B5     		push	{r0, r3, r7, lr}
 1335              		.cfi_def_cfa_offset 16
 1336              		.cfi_offset 13, -16
 1337              		.cfi_offset 3, -12
 1338              		.cfi_offset 7, -8
 1339              		.cfi_offset 14, -4
 1340 000a 00AF     		add	r7, sp, #0
 1341              		.cfi_def_cfa_register 7
 1342              		.loc 1 284 39
 1343 000c 0020     		movs	r0, #0
 1344 000e FFF7FEFF 		bl	uart_handle_interrupt
 1345              		.loc 1 284 64
 1346 0012 00BF     		nop
 1347 0014 BD46     		mov	sp, r7
 1348              		.cfi_def_cfa_register 13
 1349              		@ sp needed
 1350 0016 BDE88940 		pop	{r0, r3, r7, lr}
 1351              		.cfi_restore 14
 1352              		.cfi_restore 7
 1353              		.cfi_restore 3
 1354              		.cfi_restore 0
 1355              		.cfi_def_cfa_offset 0
 1356 001a 8546     		mov	sp, r0
 1357 001c 7047     		bx	lr
 1358              		.cfi_endproc
 1359              	.LFE133:
 1361              		.section	.text.UART1_RX_TX_IRQHandler,"ax",%progbits
 1362              		.align	1
 1363              		.global	UART1_RX_TX_IRQHandler
 1364              		.syntax unified
 1365              		.thumb
 1366              		.thumb_func
 1368              	UART1_RX_TX_IRQHandler:
 1369              	.LFB134:
 285:../source/uart2.c **** __ISR__ UART1_RX_TX_IRQHandler(void) {uart_handle_interrupt(1);}
 1370              		.loc 1 285 38
 1371              		.cfi_startproc
 1372              		@ Stack Align: May be called with mis-aligned SP.
 1373              		@ args = 0, pretend = 0, frame = 0
 1374              		@ frame_needed = 1, uses_anonymous_args = 0
 1375 0000 6846     		mov	r0, sp
 1376              		.cfi_register 13, 0
 1377 0002 20F00701 		bic	r1, r0, #7
 1378 0006 8D46     		mov	sp, r1
 1379 0008 89B5     		push	{r0, r3, r7, lr}
 1380              		.cfi_def_cfa_offset 16
 1381              		.cfi_offset 13, -16
 1382              		.cfi_offset 3, -12
 1383              		.cfi_offset 7, -8
 1384              		.cfi_offset 14, -4
 1385 000a 00AF     		add	r7, sp, #0
 1386              		.cfi_def_cfa_register 7
 1387              		.loc 1 285 39
 1388 000c 0120     		movs	r0, #1
 1389 000e FFF7FEFF 		bl	uart_handle_interrupt
 1390              		.loc 1 285 64
 1391 0012 00BF     		nop
 1392 0014 BD46     		mov	sp, r7
 1393              		.cfi_def_cfa_register 13
 1394              		@ sp needed
 1395 0016 BDE88940 		pop	{r0, r3, r7, lr}
 1396              		.cfi_restore 14
 1397              		.cfi_restore 7
 1398              		.cfi_restore 3
 1399              		.cfi_restore 0
 1400              		.cfi_def_cfa_offset 0
 1401 001a 8546     		mov	sp, r0
 1402 001c 7047     		bx	lr
 1403              		.cfi_endproc
 1404              	.LFE134:
 1406              		.section	.text.UART2_RX_TX_IRQHandler,"ax",%progbits
 1407              		.align	1
 1408              		.global	UART2_RX_TX_IRQHandler
 1409              		.syntax unified
 1410              		.thumb
 1411              		.thumb_func
 1413              	UART2_RX_TX_IRQHandler:
 1414              	.LFB135:
 286:../source/uart2.c **** __ISR__ UART2_RX_TX_IRQHandler(void) {uart_handle_interrupt(2);}
 1415              		.loc 1 286 38
 1416              		.cfi_startproc
 1417              		@ Stack Align: May be called with mis-aligned SP.
 1418              		@ args = 0, pretend = 0, frame = 0
 1419              		@ frame_needed = 1, uses_anonymous_args = 0
 1420 0000 6846     		mov	r0, sp
 1421              		.cfi_register 13, 0
 1422 0002 20F00701 		bic	r1, r0, #7
 1423 0006 8D46     		mov	sp, r1
 1424 0008 89B5     		push	{r0, r3, r7, lr}
 1425              		.cfi_def_cfa_offset 16
 1426              		.cfi_offset 13, -16
 1427              		.cfi_offset 3, -12
 1428              		.cfi_offset 7, -8
 1429              		.cfi_offset 14, -4
 1430 000a 00AF     		add	r7, sp, #0
 1431              		.cfi_def_cfa_register 7
 1432              		.loc 1 286 39
 1433 000c 0220     		movs	r0, #2
 1434 000e FFF7FEFF 		bl	uart_handle_interrupt
 1435              		.loc 1 286 64
 1436 0012 00BF     		nop
 1437 0014 BD46     		mov	sp, r7
 1438              		.cfi_def_cfa_register 13
 1439              		@ sp needed
 1440 0016 BDE88940 		pop	{r0, r3, r7, lr}
 1441              		.cfi_restore 14
 1442              		.cfi_restore 7
 1443              		.cfi_restore 3
 1444              		.cfi_restore 0
 1445              		.cfi_def_cfa_offset 0
 1446 001a 8546     		mov	sp, r0
 1447 001c 7047     		bx	lr
 1448              		.cfi_endproc
 1449              	.LFE135:
 1451              		.section	.text.UART3_RX_TX_IRQHandler,"ax",%progbits
 1452              		.align	1
 1453              		.global	UART3_RX_TX_IRQHandler
 1454              		.syntax unified
 1455              		.thumb
 1456              		.thumb_func
 1458              	UART3_RX_TX_IRQHandler:
 1459              	.LFB136:
 287:../source/uart2.c **** __ISR__ UART3_RX_TX_IRQHandler(void) {uart_handle_interrupt(3);}
 1460              		.loc 1 287 38
 1461              		.cfi_startproc
 1462              		@ Stack Align: May be called with mis-aligned SP.
 1463              		@ args = 0, pretend = 0, frame = 0
 1464              		@ frame_needed = 1, uses_anonymous_args = 0
 1465 0000 6846     		mov	r0, sp
 1466              		.cfi_register 13, 0
 1467 0002 20F00701 		bic	r1, r0, #7
 1468 0006 8D46     		mov	sp, r1
 1469 0008 89B5     		push	{r0, r3, r7, lr}
 1470              		.cfi_def_cfa_offset 16
 1471              		.cfi_offset 13, -16
 1472              		.cfi_offset 3, -12
 1473              		.cfi_offset 7, -8
 1474              		.cfi_offset 14, -4
 1475 000a 00AF     		add	r7, sp, #0
 1476              		.cfi_def_cfa_register 7
 1477              		.loc 1 287 39
 1478 000c 0320     		movs	r0, #3
 1479 000e FFF7FEFF 		bl	uart_handle_interrupt
 1480              		.loc 1 287 64
 1481 0012 00BF     		nop
 1482 0014 BD46     		mov	sp, r7
 1483              		.cfi_def_cfa_register 13
 1484              		@ sp needed
 1485 0016 BDE88940 		pop	{r0, r3, r7, lr}
 1486              		.cfi_restore 14
 1487              		.cfi_restore 7
 1488              		.cfi_restore 3
 1489              		.cfi_restore 0
 1490              		.cfi_def_cfa_offset 0
 1491 001a 8546     		mov	sp, r0
 1492 001c 7047     		bx	lr
 1493              		.cfi_endproc
 1494              	.LFE136:
 1496              		.section	.text.UART4_RX_TX_IRQHandler,"ax",%progbits
 1497              		.align	1
 1498              		.global	UART4_RX_TX_IRQHandler
 1499              		.syntax unified
 1500              		.thumb
 1501              		.thumb_func
 1503              	UART4_RX_TX_IRQHandler:
 1504              	.LFB137:
 288:../source/uart2.c **** __ISR__ UART4_RX_TX_IRQHandler(void) {uart_handle_interrupt(4);}
 1505              		.loc 1 288 38
 1506              		.cfi_startproc
 1507              		@ Stack Align: May be called with mis-aligned SP.
 1508              		@ args = 0, pretend = 0, frame = 0
 1509              		@ frame_needed = 1, uses_anonymous_args = 0
 1510 0000 6846     		mov	r0, sp
 1511              		.cfi_register 13, 0
 1512 0002 20F00701 		bic	r1, r0, #7
 1513 0006 8D46     		mov	sp, r1
 1514 0008 89B5     		push	{r0, r3, r7, lr}
 1515              		.cfi_def_cfa_offset 16
 1516              		.cfi_offset 13, -16
 1517              		.cfi_offset 3, -12
 1518              		.cfi_offset 7, -8
 1519              		.cfi_offset 14, -4
 1520 000a 00AF     		add	r7, sp, #0
 1521              		.cfi_def_cfa_register 7
 1522              		.loc 1 288 39
 1523 000c 0420     		movs	r0, #4
 1524 000e FFF7FEFF 		bl	uart_handle_interrupt
 1525              		.loc 1 288 64
 1526 0012 00BF     		nop
 1527 0014 BD46     		mov	sp, r7
 1528              		.cfi_def_cfa_register 13
 1529              		@ sp needed
 1530 0016 BDE88940 		pop	{r0, r3, r7, lr}
 1531              		.cfi_restore 14
 1532              		.cfi_restore 7
 1533              		.cfi_restore 3
 1534              		.cfi_restore 0
 1535              		.cfi_def_cfa_offset 0
 1536 001a 8546     		mov	sp, r0
 1537 001c 7047     		bx	lr
 1538              		.cfi_endproc
 1539              	.LFE137:
 1541              		.text
 1542              	.Letext0:
 1543              		.file 3 "C:/nxp/MCUXpressoIDE_11.10.0_3148/ide/plugins/com.nxp.mcuxpresso.tools.win32_11.10.0.2023
 1544              		.file 4 "C:/nxp/MCUXpressoIDE_11.10.0_3148/ide/plugins/com.nxp.mcuxpresso.tools.win32_11.10.0.2023
 1545              		.file 5 "../source/../CMSIS/MK64F12.h"
 1546              		.file 6 "../source/utils/circular_buffer.h"
 1547              		.file 7 "../source/./gpio/gpio.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart2.c
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:21     .text.NVIC_EnableIRQ:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:26     .text.NVIC_EnableIRQ:00000000 NVIC_EnableIRQ
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:71     .text.NVIC_EnableIRQ:00000030 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:80     .data.uart:00000000 uart
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:77     .data.uart:00000000 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:102    .text.uart_init:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:108    .text.uart_init:00000000 uart_init
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:171    .text.uart_init:0000005c $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:176    .text.uart_init:00000070 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:502    .text.uart_set_baudrate:00000000 uart_set_baudrate
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:346    .text.uart_init:00000184 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:355    .text.uart_available:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:361    .text.uart_available:00000000 uart_available
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:418    .text.uart_available:00000048 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:423    .text.uart_read:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:429    .text.uart_read:00000000 uart_read
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:492    .text.uart_read:0000004c $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:497    .text.uart_set_baudrate:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:696    .text.uart_set_baudrate:0000010c $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:705    .text.uart_load_buffer:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:711    .text.uart_load_buffer:00000000 uart_load_buffer
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:776    .text.uart_load_buffer:00000054 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:781    .text.uart_disable_tx_interrupt:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:787    .text.uart_disable_tx_interrupt:00000000 uart_disable_tx_interrupt
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:844    .text.uart_disable_tx_interrupt:00000040 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:849    .text.uart_enable_tx_interrupt:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:855    .text.uart_enable_tx_interrupt:00000000 uart_enable_tx_interrupt
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:912    .text.uart_enable_tx_interrupt:00000040 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:917    .text.uart_write_array:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:923    .text.uart_write_array:00000000 uart_write_array
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1060   .text.uart_write_array:000000bc $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1065   .text.uart_write:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1071   .text.uart_write:00000000 uart_write
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1175   .text.uart_write:00000094 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1180   .text.uart_handle_interrupt:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1185   .text.uart_handle_interrupt:00000000 uart_handle_interrupt
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1312   .text.uart_handle_interrupt:000000b4 $d
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1317   .text.UART0_RX_TX_IRQHandler:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1323   .text.UART0_RX_TX_IRQHandler:00000000 UART0_RX_TX_IRQHandler
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1362   .text.UART1_RX_TX_IRQHandler:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1368   .text.UART1_RX_TX_IRQHandler:00000000 UART1_RX_TX_IRQHandler
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1407   .text.UART2_RX_TX_IRQHandler:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1413   .text.UART2_RX_TX_IRQHandler:00000000 UART2_RX_TX_IRQHandler
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1452   .text.UART3_RX_TX_IRQHandler:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1458   .text.UART3_RX_TX_IRQHandler:00000000 UART3_RX_TX_IRQHandler
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1497   .text.UART4_RX_TX_IRQHandler:00000000 $t
C:\Users\casas\AppData\Local\Temp\ccIpw2gb.s:1503   .text.UART4_RX_TX_IRQHandler:00000000 UART4_RX_TX_IRQHandler
                           .group:00000000 wm4.0.1dcc4abb7b230aa9a5dadaa004994123
                           .group:00000000 wm4.redlib_version.h.25.d2e865e22c1528eeae52d7d98a50fff1
                           .group:00000000 wm4.libconfigarm.h.19.34723c94cbd19598192aa6b1e87fca41
                           .group:00000000 wm4.stdint.h.31.58198de4ea930fb897655479091e17c7
                           .group:00000000 wm4.stdbool.h.15.fddf1cb2402fd739d8e2516677869231
                           .group:00000000 wm4.gpio.h.8.3b8dab8fd05527fe26c360fc8897e237
                           .group:00000000 wm4.MK64F12.h.105.e884e5c80776532d2ec0f5c21e2ea7cb
                           .group:00000000 wm4.core_cm4.h.42.42f38327ee0970d80f60117e6a3ba2b0
                           .group:00000000 wm4.cmsis_gcc.h.36.39970cb43ce4b53c82644a1f9bc2eab9
                           .group:00000000 wm4.core_cm4.h.223.7b48c9958ef5573320c4765074c8b0ce
                           .group:00000000 wm4.system_MK64F12.h.109.c6d21568e03be21b21c922eb7345d6e3
                           .group:00000000 wm4.MK64F12.h.475.9475ab1c0ace29480f556d9316131319
                           .group:00000000 wm4.uart_k64_frdm.h.7.daad7da6bb0c433ac1106ba3952f7c1d
                           .group:00000000 wm4.fsl_device_registers.h.32.f10b25a7fd7ad45b9a40904c33f28816
                           .group:00000000 wm4.MK64F12_features.h.92.512cea46d882153168efeec0bc3a9da7
                           .group:00000000 wm4.hardware.h.28.9c5eae6fa67a41a2ef974419a839913d
                           .group:00000000 wm4.stdlib.h.22.a9bbbfa810cf02ee174b0a6b37d52530

UNDEFINED SYMBOLS
circular_buffer_init
circular_buffer_empty
circular_buffer_pop
circular_buffer_full
circular_buffer_push
